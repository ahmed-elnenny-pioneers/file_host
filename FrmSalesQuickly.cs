using System;
using System.Collections.Generic;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Windows.Forms;
using System.Globalization;
using System.IO;
using ComponentAce.Barcoding;
using System.Collections;
using System.ComponentModel;
using System.Data.SqlClient;
using System.Data.SqlTypes;
using System.Net;
using System.Threading;
using System.Windows.Input;
using ConvrtYoNunber;
using CrystalDecisions.Windows.Forms;
using GPDesktop.Helper;
using GPDesktop.Models;
using GPDesktop.Process;
using Newtonsoft.Json;
using Store.AutoSave_Module;
using Store.AutoSave_Module.Models;
using Store.Helper;
using Store.Models;
using Store.SER_Checkup.Models;
using KeyEventArgs = System.Windows.Forms.KeyEventArgs;
using MouseEventArgs = System.Windows.Forms.MouseEventArgs;
using TextBox = System.Windows.Forms.TextBox;
using System.Diagnostics;
using Timer = System.Windows.Forms.Timer;
using Microsoft.PointOfService;

namespace Store
{
    public partial class FrmSalesQuickly : Form
    {
        public static FrmSalesQuickly Instance { get; set; }
        public bool LoadingUnsavedBill;
        public static DataTable dtServices = new DataTable(); string AID = ""; string AQty = "";
        ConvrtYoNunber.ConverToNumber ct = new ConvrtYoNunber.ConverToNumber(); byte[] img = null; MemoryStream ms;
        dataClass Codes = dataClass.Instance; bool b = false; bool dd = false; bool ss = false; bool ff = false; DataTable dts = new DataTable(); DataTable dtb = new DataTable(); bool cc = false; DataTable dtb1 = new DataTable();
        DataTable dt; DataTable dtExpDate = new DataTable(); DataGridViewComboBoxColumn m;
        //DataGridViewComboBoxColumn ItemGrid; 
        DataGridViewCheckBoxColumn UnderDelevery;
        decimal x, y, c, Total, totalrebh, Saleprice, Pieceprice, itemMains, PayPrice; bool amu = false;
        decimal? beforeQnt, beforePrice;
        string BillNu;
        ItemsMoveCs itemMove = new ItemsMoveCs();
        SupplierClients sc = new SupplierClients();
        CashDrawer myCashDrawer = null;
        PosExplorer explorer;
        bool AutomaticColorTextInSales = false;
        private string _clientType;
        DataTable dtUsers = new DataTable();
        //string language = "ar";
        private int _lastAddItemColumnIndex = 1;

        bool reload = false;
        bool AllowToShowBuyPriceInSales = false;

        public System.Windows.Forms.Timer AutoSaveTimer;

        private readonly AutoSaveManager _autoSaveManager;

        private bool discountChanged;

        public AutoSaveSalesModel CurrentAutoSaveModel;

        private PictureBox _hoverBox;

        private readonly PayTerminalProcessing _terminalProcessing;

        private string _formName = "FrmSalesQuickly";

        private BindingList<KeyShortcut> _keyshortcuts;

        private bool _OnLoad = true;

        private bool _cellValueChangedHandled, _cellValueChangedReleased;
        private int _cellValueChanged = 0;
        public FrmSalesQuickly()
        {
            //this.SetStyle(ControlStyles.ResizeRedraw, true);

            InitializeComponent();
            this.ChangeLTR(1);
            TLPContainer.AutoScroll = false;
            Shown += FrmSalesQuickly_Shown;
            //dataGridView1.ColumnWidthChanged += DataGridView1_ColumnWidthChanged;
            if (ProSetting.TerminalPackage)
            {
                try
                {
                    _terminalProcessing = new PayTerminalProcessing();
                }
                catch (Exception exc)
                {
                }
            }
            else
            {
                BtnPayViaTerminal.Visible = false;
            }
            _hoverBox = new PictureBox()
            {
                BackgroundImageLayout = ImageLayout.Stretch
            };
            Controls.Add(_hoverBox);
            if (ProSetting.SalesAutoSaveEnabled)
            {
                _autoSaveManager = AutoSaveManager.Instance;

                AutoSaveTimer = new System.Windows.Forms.Timer()
                {
                    Enabled = true,
                    Interval = 10000
                };
                AutoSaveTimer.Tick += AutoSaveTimer_Tick;
            }

            dtUsers = FrmMainNEW.DtUsers;

            if (dtUsers == null || dtUsers.Rows.Count == 0)
                dtUsers = Codes.Search2("Select * From Users Where Active=1");


            try
            {
                label37.Visible = LBstoreQuantity.Visible = !ProSetting.RaseedDisappear;
            }
            catch (Exception ex)
            {
            }

            bill = true;
            

            try
            {
                dataGridView1.CurrentCellChanged += new EventHandler(dataGridView1_CurrentCellChanged);
                dataGridView1.CellMouseEnter += DataGridView1_CellMouseEnter;
                dataGridView1.CellMouseLeave += DataGridView1_CellMouseLeave;
            }
            catch
            {
            }

           

            //try
            //{
            //    sc.Seller(SellerCombo);

            //}
            //catch { }
            textBox9.LostFocus += TextBox9_LostFocus;
            textBox12.LostFocus += TextBox12_LostFocus;
            button7.LostFocus += Button7_LostFocus;
        }
        private void CreateCasherDrawer()
        {
            try
            {
                explorer = new PosExplorer();
                DeviceInfo ObjDevicesInfo = explorer.GetDevice("CashDrawer");
                if (ObjDevicesInfo != null)
                {
                    var check = ObjDevicesInfo.IsDefault;
                    myCashDrawer = (CashDrawer)explorer.CreateInstance(ObjDevicesInfo);
                    ObjDevicesInfo = null;
                }
            }
            catch (Exception ex)
            {
            }
        }
        private void DisposeCasherDrawer()
        {
            explorer = null;
            myCashDrawer = null;
        }
        private void DataGridView1_ColumnWidthChanged(object sender, DataGridViewColumnEventArgs e)
        {
            try
            {
                return;
                int maxWidth = e.Column.MinimumWidth;

                if (e.Column.Width > maxWidth)
                {
                    e.Column.Width = maxWidth;
                }
            }
            catch (Exception ex)
            {
            }
        }

        private void FrmSalesQuickly_Shown(object sender, EventArgs e)
        {


            LoadForm(e);
            try
            {
                if (Screen.PrimaryScreen.Bounds.Width > 1250)
                {
                    PnlActions1.AutoSize = false;
                    PnlActions2.AutoSize = false;
                    PnlActions1.Width = PnlActions1.Controls.Cast<Control>().Where(c => c.Visible).Sum(c => c.Width);
                    PnlActions2.Width = PnlActions1.Controls.Cast<Control>().Where(c => c.Visible).Sum(c => c.Width);

                    PnlActions1.CenterHorizontally();
                    PnlActions2.CenterHorizontally(PnlActions1);

                    TLPContainer.AutoScroll = true;
                    PnlActions1.AutoSize =
                        PnlActions2.AutoSize = true;
                }
                else
                {
                    PnlActions1.AutoSize = false;
                    PnlActions2.AutoSize = false;
                    PnlActions2.Location = new Point(0, PnlActions2.Location.Y);
                    TLPContainer.AutoScroll = true;
                }
            }
            catch (Exception ex)
            {

            }
            //using (var timer = new Timer())
            //{
            //    timer.Interval = 20000;
            //    timer.Tick += (s, ee) =>
            //    {
            //        TLPContainer.AutoScroll = true;
            //        timer.Stop();
            //        timer.Enabled = false;
            //    };
            //    timer.Start();
            //}
        }

        private void DataGridView1_CellMouseLeave(object sender, DataGridViewCellEventArgs e)
        {
            _hoverBox.BackgroundImage = null;
            _hoverBox.Visible = false;

        }

        private void DataGridView1_CellMouseEnter(object sender, DataGridViewCellEventArgs e)
        {

            try
            {
                var imageIndex = dataGridView1.Columns["Image"] != null ? dataGridView1.Columns["Image"].Index : -1;
                if (e.ColumnIndex == imageIndex
                        && dataGridView1.Rows.Count > 1
                        && e.RowIndex < dataGridView1.Rows.Count
                        && ProSetting.ShowItemImage
                        && !_hoverBox.Visible)
                {
                    var cell = dataGridView1.Rows[e.RowIndex].Cells[e.ColumnIndex];

                    var mousePosition = System.Windows.Forms.Cursor.Position;
                    var cellLocation = dataGridView1.GetCellDisplayRectangle(e.ColumnIndex, e.RowIndex, false).Location;

                    var clientocation = dataGridView1.PointToClient(mousePosition);
                    var screenLocation = dataGridView1.PointToScreen(cellLocation);

                    _hoverBox.Location = new Point(clientocation.X + 30, screenLocation.Y);



                    var image = ((byte[])cell.Value).ToImage();

                    if (image == null)
                        return;
                    _hoverBox.Size = new Size(image.Width / 2, image.Height / 2);
                    _hoverBox.BackgroundImage = image;
                    _hoverBox.Visible = true;
                    _hoverBox.BringToFront();
                }
            }
            catch (Exception exc)
            {

            }
        }

        private void Button7_LostFocus(object sender, EventArgs e)
        {
            if (!textBox9.Focused && !textBox12.Focused)
                lastPaymentFocus = "";
        }

        private void TextBox12_LostFocus(object sender, EventArgs e)
        {
            if (!textBox9.Focused && !button7.Focused)
                lastPaymentFocus = "";
        }

        private void TextBox9_LostFocus(object sender, EventArgs e)
        {
            if (!textBox12.Focused && !button7.Focused)
                lastPaymentFocus = "";
        }

        private void AutoSaveTimer_Tick(object sender, EventArgs e)
        {
            if (ClientCombo.SelectedValue != null)
                _autoSaveManager.DoAutoSaveWork(this);
        }

        void dataGridView1_CurrentCellChanged(object sender, EventArgs e)
        {
            try
            {
                if (dataGridView1.RowCount > 1
                    && dataGridView1.Rows[dataGridView1.Rows.Count - 2].Cells[0].Value == null
                    && dataGridView1.Rows[dataGridView1.Rows.Count - 2].Cells[1].Value == null
                    && dataGridView1.Rows[dataGridView1.Rows.Count - 2].Cells[2].Value == null)
                {
                    SendKeys.Send("{ENTER}");
                    //dataGridView1_PreviewKeyDown(sender, new PreviewKeyDownEventArgs(Keys.Enter));
                }
                else
                {
                    if (dataGridView1.CurrentCell != null
                        && dataGridView1.CurrentCell.ColumnIndex != dataGridView1.Columns["Barcode"].Index
                        && dataGridView1.CurrentCell.ColumnIndex != dataGridView1.Columns["ItemName"].Index)
                    {
                        if (dataGridView1.CurrentCell.ColumnIndex == dataGridView1.Columns["Quantity"].Index
                            && ProSetting.OnQuantity)
                        {
                            if (itemAdded)
                            {
                                if (dataGridView1.CurrentRow.Index == dataGridView1.Rows.Count - 1)
                                    SendKeys.Send("{ENTER}");
                            }
                            else if (Keyboard.IsKeyDown(Key.Enter) &&
                                     !string.IsNullOrEmpty(ProSetting.BarcodeOrItem))
                            {
                                if (CellValueChanged)
                                    CellValueChanged = false;
                                else
                                    SendKeys.Send("{ENTER}");
                            }
                        }
                        else
                        {
                            if (Keyboard.IsKeyDown(Key.Enter) && !string.IsNullOrEmpty(ProSetting.BarcodeOrItem))
                            {
                                if (CellValueChanged)
                                    CellValueChanged = false;
                                else
                                    SendKeys.Send("{ENTER}");

                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                // ignored
            }
        }
        public void LoadClientRassed()
        {
            try
            {
                if (panel5.Visible)
                {
                    label27.TextChanged -= label27_TextChanged;
                    label27.Text = "-";
                    label27.TextChanged += label27_TextChanged;
                    var clientID = 0;
                    if (int.TryParse(ClientCombo.SelectedValue.Stringify(), out clientID))
                    {
                        var Account = sc.GetClientAccount(ClientCombo.SelectedValue.Stringify());
                        label27.Text = Math.Round(Account,
                                ProSetting.Round
                                , MidpointRounding.AwayFromZero)
                            .ToString("F" + ProSetting.Round);
                    }
                }
            }
            catch
            {
            }


        }
        public void LoadUnits(string ItemIds)
        {
            try
            {
                if (string.IsNullOrEmpty(ItemIds))
                {
                    UnitsCom.DataSource = null;
                    return;
                }
                UnitsCom.BindComboBox("SELECT Units.ID ,Units.Name FROM ItemsUnit INNER JOIN Units ON ItemsUnit.UnitID = Units.ID where ItemsUnit.ItemID='" + ItemIds + "' order by ItemsUnit.ID");
            }
            catch { }
            byte[] img1 = null;
            try
            {
                if (ItemCombo.SelectedValue.ToInt32() == 0)
                {
                    pictureBox1.BackgroundImage = null;
                    return;
                }
                ms = new MemoryStream();


                dt = Codes.Search2(@"select Picture,Items.StoreCode from Items where ID = '" + ItemCombo.SelectedValue + "'");
                if (dt.Rows[0][0].ToText() != "")
                {
                    SqlBytes bytes = new SqlBytes((byte[])dt.Rows[0][0]);
                    img1 = (byte[])dt.Rows[0][0];
                    pictureBox1.BackgroundImage = Image.FromStream(bytes.Stream);
                }
                else
                    pictureBox1.BackgroundImage = null;
            }
            catch (Exception ex)
            {
                pictureBox1.BackgroundImage = null;
            }
        }

        private DataTable dtSelectedItemComponents = new DataTable();
        private DataTable dtSelectedItemStoreQuantity = new DataTable();

        private decimal selectedItemPoints = 0M,
            selectedAvailableQuantityOftheItem = 0M,
            selectedActualItemStoreQuantity = 0M,
            selectedBuyPrice = 0M;
        private string selectedUnderDeliveryQnt;
        public void LoadWithUnits(string unitId, string ItemIds)
        {
            decimal Buy = 0;
            PriceText.Text = "0";
            if (string.IsNullOrEmpty(ItemIds) || string.IsNullOrEmpty(unitId) || StoreCombo.SelectedIndex < 0)
            {
                TaxNum.Value = 0;
                BarcodeText.Text = "";
                Saleprice = 0;
                Pieceprice = 0;
                itemMains = 0;
                selectedBuyPrice = 0;
                selectedActualItemStoreQuantity = 0;
                textBox21.Text = "0";
                PriceText.Text = "0";
                textBox21.Text = "0";
                discount = "0";
                ItemCombo.ResetText();
                Buy = 0;

                return;
            }
            var dtItemDetails = Codes.Search2(@"
select 
ItemsUnit.Barcode,
Isnull(ItemsUnit.Price,0) as Price,
Isnull(ItemsUnit.PriceInter,0) as PriceInter,
Isnull(ItemsUnit.HalfPrice,0) as HalfPrice,
Isnull( ItemsUnit.Gomla1,0) as Gomla1,
Isnull(ItemsUnit.Gomla2,0) as Gomla2,
ItMain,
CASE WHEN dbo.ItemsUnit.ItMain=1 
and isnull((Select IsNull(dbo.Store.Price,0) from Store where ItemID =ItemsUnit.ItemId 
and StoreId='" + StoreCombo.SelectedValue + @"' ),0) > 0 
THEN (Select IsNull(dbo.Store.Price,0) from Store where ItemID =ItemsUnit.ItemId 
and StoreId='" + StoreCombo.SelectedValue + @"' )
ELSE  dbo.ItemsUnit.BuyPrice End as BuyPrice,
ItemsUnit.HalfPrice,
ItemsUnit.Gomla1,
ItemsUnit.Gomla2,
(Select IsNull(dbo.Store.Quantity,0)/dbo.ItemsUnit.ItMain 
From Store Where ItemID=ITemsUnit.ItemID and StoreID='" + StoreCombo.SelectedValue + @"' ) as StoreQuantity,
Isnull(Items.Tax,0) as Tax,
isnull(discountincoming,0) as discountincoming ,
isnull(discountbuy,0) as discountbuy,
isnull(discountgomla,0) as discountgomla,
isnull(discounthalfgomla,0) as discounthalfgomla,
isnull(discountgomla1,0) as discountgomla1,
isnull(discountgomla2,0) as discountgomla2 ,
isnull(ProfitSell,0) as ProfitSell ,
isnull(ProfitGomla,0) as ProfitGomla,
isnull(ProfitHalfGomla,0) as ProfitHalfGomla,
isnull(discounthalfgomla,0) as discounthalfgomla,
isnull(ProfitGomla1,0) as ProfitGomla1,
isnull(ProfitGomla2,0) as ProfitGomla2 ,
(select isnull(
(select  Point from Itemspoint where  ItemID= Items.Id and Datefrom <= Convert(varchar(10),GetDate(),23) + ' 00:00:00'
and  isnull(DateTo,'01-01-1900') >= case when DateTo is null or Year(DateTo)='1900' then '01-01-1900' else  Convert(varchar(10),GetDate(),23) + ' 00:00:00'  end),0)) as Points,
Isnull((Select Cast(Sum(amount * itMains) as nvarchar(50)) From UnderDelivery Where ItemID = ItemsUnit.ItemID 
and StoreId=" + StoreCombo.SelectedValue + @"),'0')
+ '/' 
+ Isnull((Select Cast(Sum(amount * itMains) as nvarchar(50)) From UnderDelivery 
Where ItemID= ItemsUnit.ItemID ),0) as UnderDeliveryQnt,
(Case When (" + Convert.ToInt16(ProSetting.SkipQuantityAssemblingOfAnItem) + @"=1) 
    then Case when Isnull((Select Count([ItemsColleting].[ID]) from ItemsColleting where ParentItemId= ItemsUnit.ItemID),0) > 0 
                    then 1 
                    else 0 end
     else 0 end) as IsItemHaveComponents,
Isnull(IsInDiscountList,0) as IsInDiscountList
from ItemsUnit Join Items On  ItemsUnit.ItemID = Items.ID
where ItemsUnit.UnitID ='" + unitId + @"' 
AND ItemsUnit.ItemID='" + ItemIds + @"' 
order by ItemsUnit.ID");
            var isItemInDiscountList = ProSetting.salesByList && Convert.ToBoolean(dtItemDetails.Rows[0]["IsInDiscountList"]);
            try
            {
                TaxNum.Value =
                        dtItemDetails.Rows[0]["Tax"].ToDecimal().RoundBy(ProSetting.Round);
                BarcodeText.Text = dtItemDetails.Rows[0][0].Stringify();
                selectedItemPoints = dtItemDetails.Rows[0]["Points"].ToDecimal().RoundBy(ProSetting.Round);
                selectedUnderDeliveryQnt = dtItemDetails.Rows[0]["UnderDeliveryQnt"].Stringify();
            }
            catch (Exception exception)
            {
            }
            try
            {
                if (ProSetting.ClientPrice)
                {
                    var dtLastPriceToClient = Codes.Search2(@"
select UnitPrice,id from sales 
where UnitID ='" + unitId + @"' 
AND ItemID='" + ItemIds + @"' 
and ClientID=" + ClientCombo.SelectedValue + @"
ORDER BY id DESC");

                    PriceText.Text = "0";
                    textBox21.Text = "0";
                    try
                    {
                        LBstoreQuantity.Text = Math.Round(Convert.ToDecimal(
                                    dtItemDetails.Rows[0]["StoreQuantity"]),
                                        ProSetting.Round,
                                        MidpointRounding.AwayFromZero)
                                    .ToString("F" + ProSetting.Round);
                    }
                    catch (Exception ex)
                    {
                    }


                    if (dtLastPriceToClient.Rows.Count > 0)
                    {
                        textBox21.Text = Math.Round(Convert.ToDecimal(dtLastPriceToClient.Rows[0][0].Stringify()), ProSetting.Round, MidpointRounding.AwayFromZero).ToString("F" + ProSetting.Round);
                        if (!ProSetting.ClientPricePilot
                            && ClientCombo.SelectedValue.Stringify() != ProSetting.NakdiClient.Stringify()
                            && !isItemInDiscountList)
                        {
                            try
                            {
                                PriceText.Text = Math
                                    .Round(Convert.ToDecimal(dtLastPriceToClient.Rows[0][0].Stringify()),
                                        ProSetting.Round, MidpointRounding.AwayFromZero)
                                    .ToString("F" + ProSetting.Round);
                                Saleprice = Math.Round(Convert.ToDecimal(dtLastPriceToClient.Rows[0][0].Stringify()),
                                    ProSetting.Round, MidpointRounding.AwayFromZero);
                            }
                            catch
                            {
                                Saleprice = 0;
                            }
                        }
                    }
                }
            }
            catch { }

            if (ProSetting.SkipQuantityAssemblingOfAnItem)
            {
                dtSelectedItemComponents =
                    Codes.Search2(@"select ItemsColleting.* ,
ItemsUnit.ItemID, 
Items.Barcode, 
Items.Name as ItemName ,
(Select Name From Units Where ID =ItemsUnit.UnitId) as UnitName 
from ItemsColleting 
Join ItemsUnit 
on ItemsColleting.ChildItemUnitID = ItemsUnit.Id 
Join Items 
On ItemsUnit.ItemID= Items.ID 
where ParentItemID='" + ItemCombo.SelectedValue + "'");

                if (dtSelectedItemComponents.Rows.Count > 0)
                {
                    dtSelectedItemStoreQuantity = Codes.Search2(
                        @"WITH ItemComponentsCTE AS (
SELECT  Row_Number() Over (Order by ItemsUnit.ItemId,ItemsUnit.ID) as Rn ,
ItemsUnit.ItemID,
ItemsUnit.Barcode,
(Select Name From Items Where ID =ItemsUnit.ItemID) as ItemName,
(Select Name From Units Where ID =ItemsUnit.UnitId) as UnitName,
Isnull((Select Price From Store Where ItemID =ParentITemID and StoreId =  '" + StoreCombo.SelectedValue +
                        @"'),0) as BuyPrice,
 ItemsUnit.ItMain as ComponentItMain,
(
(Case When ItemsUnit.ItMain = 1 
Then Isnull(dbo.Store.Price,0) Else ItemsUnit.BuyPrice END )
" + (!ProSetting.salesByList ? "" : @"
* (1 - ((Select case when Isnull(IsInDiscountList,0) = 0 then 0 
else isnull(discountincoming,0) end from Items Where ID = ItemsUnit.ItemID)/100))
") + @"
)
as ComponentBuyPrice,
Cast((Isnull(dbo.Store.Quantity,0)/ItemsUnit.ItMain) as money) as OriginalComponentStoreQuantity ,
Cast(Qnt as money) as ComponentAssemblingQuantity,
FLOOR(ISNULL(Quantity,0)/(Qnt * ItMain)) as ItemLargestAssembledQuantity,
Isnull((Select Quantity From Store Where ItemID = ParentItemID and StoreId =   '" + StoreCombo.SelectedValue +
                        @"'),0) as ItemStoreQuantity,
Case When Sum(Qnt * ItMain) over (partition by ItemsUnit.ItemID) > Quantity then 0 else 1 end as QuantityAvailableStatus,
Isnull(ModifyBuyprice,1) as ModifyBuyprice ,
Isnull(masnyea,0) as masnyea,
(Select Count(*) From Store Where ItemID =ParentITemID and StoreId =  '" + StoreCombo.SelectedValue + @"') as AddedToStore,
(Select Khadamy From Items Where ID =ItemsUnit.ItemID) as Khadamy
FROM dbo.ItemsColleting 
LEFT JOIN ItemsUnit 
ON ItemsColleting.ChildItemUnitID = ItemsUnit.Id 
LEFT Join dbo.Store 
ON dbo.ItemsUnit.ItemID = dbo.Store.ItemID  and Store.StoreID = '" + StoreCombo.SelectedValue + @"'
where ParentITemID = '" + ItemCombo.SelectedValue + @"'
),
ValidItemComponentsCTE AS (
    SELECT
        Rn,
        ItemID,
		Barcode,
		ItemName,
		UnitName,
        BuyPrice,
        ComponentBuyPrice,	
        (OriginalComponentStoreQuantity* ComponentItMain -
            (SELECT SUM(ComponentAssemblingQuantity)
             FROM ItemComponentsCTE AS innerCTE
             WHERE innerCTE.ItemID = outerCTE.ItemID
               AND innerCTE.Rn <= outerCTE.Rn) 
            + ComponentAssemblingQuantity)/ ComponentItMain AS ComponentStoreQuantity,
        ComponentAssemblingQuantity,
        ItemLargestAssembledQuantity,
		ItemStoreQuantity,
        ModifyBuyprice,
        masnyea,
		AddedToStore,
        Khadamy
    FROM ItemComponentsCTE AS outerCTE
)
SELECT
    ItemID,
	Barcode,
	ItemName,
	UnitName,
	BuyPrice,
	ComponentBuyPrice,
	ComponentStoreQuantity,
	ComponentAssemblingQuantity,
	CASE 
        WHEN ComponentStoreQuantity < ComponentAssemblingQuantity THEN 0
        ELSE ItemLargestAssembledQuantity end
    ItemLargestAssembledQuantity,
	ItemStoreQuantity,
    CASE 
        WHEN ComponentStoreQuantity < ComponentAssemblingQuantity THEN 0
        ELSE 1
    END AS QuantityAvailableStatus,
    ModifyBuyprice,
	masnyea,
	AddedToStore,
	Khadamy
FROM ValidItemComponentsCTE
ORDER BY Rn;");
                    try
                    {
                        selectedActualItemStoreQuantity =
                            dtSelectedItemStoreQuantity.Rows[0]["ItemStoreQuantity"].ToDecimal();

                        var LargestAvailableQnt = dtSelectedItemStoreQuantity.Rows.OfType<DataRow>()
                            .Where(dr => !Convert.ToBoolean(dr["Khadamy"])).Min(dr => dr["ItemLargestAssembledQuantity"].ToDecimal());
                        var updateBuyPriceOFCombinedItem =
                            Convert.ToBoolean(dtSelectedItemStoreQuantity.Rows[0]["ModifyBuyprice"]);
                        var masnyea = dtSelectedItemStoreQuantity.Rows[0]["masnyea"].ToDecimal();
                        selectedBuyPrice = updateBuyPriceOFCombinedItem && selectedActualItemStoreQuantity <= 0
                            ? dtSelectedItemStoreQuantity.Select().Sum(dr => dr["ComponentBuyPrice"].ToDecimal() * dr["ComponentAssemblingQuantity"].ToDecimal()) + masnyea
                            : dtSelectedItemStoreQuantity.Rows[0]["BuyPrice"].ToDecimal();

                        selectedAvailableQuantityOftheItem =
                            (LargestAvailableQnt < 0 ? 0 : LargestAvailableQnt) + (selectedActualItemStoreQuantity < 0 ? 0
                            : selectedActualItemStoreQuantity);
                    }
                    catch (Exception exx)
                    {
                        selectedBuyPrice = selectedAvailableQuantityOftheItem = 0;
                    }
                }
                else
                {
                    dtSelectedItemStoreQuantity = Codes.Search2(@"
SELECT (Case When ItemsUnit.ItMain = 1 
Then Isnull(dbo.Store.Price, 0) Else ItemsUnit.BuyPrice END) as BuyPrice,
Store.Quantity  as ItemStoreQuantity 
FROM dbo.ItemsUnit INNER JOIN dbo.Store 
ON dbo.ItemsUnit.ItemID = dbo.Store.ItemID
where UnitID = '" + unitId + @"'
and ItemsUnit.ItemID = '" + ItemCombo.SelectedValue + @"' 
and Store.StoreID = '" + StoreCombo.SelectedValue + "'");
                    //decimal Qty = 0;
                    try
                    {
                        selectedBuyPrice = dtSelectedItemStoreQuantity.Rows[0][0].ToDecimal();
                        selectedAvailableQuantityOftheItem = dtSelectedItemStoreQuantity.Rows[0]["ItemStoreQuantity"].ToDecimal();
                        selectedActualItemStoreQuantity = selectedAvailableQuantityOftheItem;
                    }
                    catch (Exception exx)
                    {
                        selectedBuyPrice = selectedAvailableQuantityOftheItem = 0;
                    }
                }

            }
            else
            {
                dtSelectedItemComponents.Clear();
                dtSelectedItemStoreQuantity = Codes.Search2(
                    @"SELECT ISNULL(SUM(dbo.Store.Quantity), 0)  as ItemStoreQuantity
FROM dbo.ItemsUnit INNER JOIN dbo.Store 
ON dbo.ItemsUnit.ItemID = dbo.Store.ItemID 
where ItemsUnit.Barcode='" + BarcodeText.Text + "' " + "and Store.StoreID = " + StoreCombo.SelectedValue + "  "
                    + "and dbo.ItemsUnit.UnitID = '" +
                    UnitsCom.SelectedValue + "'");

                selectedAvailableQuantityOftheItem = selectedActualItemStoreQuantity =
                    dtSelectedItemStoreQuantity.Rows[0]["ItemStoreQuantity"].ToDecimal();

                selectedBuyPrice = Math.Round(Convert.ToDecimal(dtItemDetails.Rows[0]["BuyPrice"].Stringify()), ProSetting.Round, MidpointRounding.AwayFromZero);
            }

            try
            {

                itemMains = dtItemDetails.Rows[0]["ItMain"].ToDecimal();
                PayPrice = selectedBuyPrice;
            }
            catch { }

            try
            {
                LBstoreQuantity.Text = Math.Round(Convert.ToDecimal(dtItemDetails.Rows[0]["StoreQuantity"]),
                            ProSetting.Round, MidpointRounding.AwayFromZero)
                        .ToString("F" + ProSetting.Round);
            }
            catch (Exception ex)
            {
            }

            try
            {
                if (isItemInDiscountList)
                {
                    discount = dtItemDetails.Rows[0]["discountincoming"].Stringify();
                    Buy = (PayPrice * (100 - discount.ToDecimal()) / 100).RoundBy(ProSetting.Round);
                }
                else
                {
                    var dtDiscount = Codes.Search2(@"
select isnull(Discount,0) from items 
where DateFrom<='" + dateTimePicker1.Value.ToString("MM/dd/yyyy") + @"' 
and DateTo>='" + dateTimePicker1.Value.ToString("MM/dd/yyyy") + @"' 
and Items.Active = 1 and id=" + ItemIds);
                    try
                    {
                        if (dtDiscount.Rows.Count > 0)
                        {
                            discount = dtDiscount.Rows[0][0].ToDecimal().ToString("F" + ProSetting.Round);
                        }
                        else
                        {
                            discount = "0.00";
                        }
                    }
                    catch (Exception ex)
                    {
                    }

                    Buy = Math.Round(PayPrice,
                        ProSetting.Round,
                        MidpointRounding.AwayFromZero);
                }
            }
            catch { }

            try
            {
                Pieceprice = Math.Round(Convert.ToDecimal(dtItemDetails.Rows[0]["Price"].Stringify()), ProSetting.Round, MidpointRounding.AwayFromZero);
            }
            catch { }

            if ((ProSetting.ClientPricePilot
                || ClientCombo.SelectedValue.Stringify() == ProSetting.NakdiClient.Stringify()
                || PriceText.Text.ToDecimal() == 0))
            {
                if (BillKindCom.Text == "قطاعي")
                {
                    if (isItemInDiscountList)
                        discount = dtItemDetails.Rows[0]["discountbuy"].Stringify();

                    PriceText.Text = "0";
                    PriceText.Text =
                        (!ProSetting.UpdateItemsSellPricesOnChangeOfBuyPrice
                        || dtItemDetails.Rows[0]["ProfitSell"].ToDecimal() == 0
                        || isItemInDiscountList
                            ? dtItemDetails.Rows[0]["Price"].ToDecimal()
                            : (PayPrice *
                                (
                                (100 + dtItemDetails.Rows[0]["ProfitSell"].ToDecimal())
                                / 100))
                         ).ToString("F" + ProSetting.Round);

                    Saleprice = dtItemDetails.Rows[0]["Price"].ToDecimal().RoundBy(ProSetting.Round);
                }
                else if (BillKindCom.Text == "جملة")
                {
                    if (isItemInDiscountList)
                        discount = dtItemDetails.Rows[0]["discountgomla"].Stringify();
                    PriceText.Text = "0";
                    PriceText.Text =
                        (!ProSetting.UpdateItemsSellPricesOnChangeOfBuyPrice
                        || dtItemDetails.Rows[0]["ProfitGomla"].ToDecimal() == 0
                        || isItemInDiscountList
                            ? dtItemDetails.Rows[0]["PriceInter"].ToDecimal().RoundBy(ProSetting.Round)
                            : (PayPrice *
                                ((100 + dtItemDetails.Rows[0]["ProfitGomla"].ToDecimal()) / 100)).RoundBy(ProSetting.Round)).ToString("F" + ProSetting.Round);

                    Saleprice = Math.Round(Convert.ToDecimal(dtItemDetails.Rows[0]["PriceInter"].Stringify()),
                        ProSetting.Round, MidpointRounding.AwayFromZero);

                }
                else if (BillKindCom.Text == "نصف جملة")
                {
                    if (isItemInDiscountList)
                        discount = dtItemDetails.Rows[0]["discounthalfgomla"].Stringify();
                    PriceText.Text = "0";
                    PriceText.Text =
                        (!ProSetting.UpdateItemsSellPricesOnChangeOfBuyPrice
                        || dtItemDetails.Rows[0]["ProfitHalfGomla"].ToDecimal() == 0
                        || isItemInDiscountList
                            ? dtItemDetails.Rows[0]["HalfPrice"].ToDecimal().RoundBy(ProSetting.Round)
                            : (PayPrice *
                                ((100 + Convert.ToDecimal(dtItemDetails.Rows[0]["ProfitHalfGomla"])) / 100))
                                .RoundBy(ProSetting.Round)
                         ).ToString("F" + ProSetting.Round);

                    Saleprice = dtItemDetails.Rows[0]["HalfPrice"].ToDecimal().RoundBy(ProSetting.Round);

                }
                else if (BillKindCom.Text == "جملة 1")
                {
                    if (isItemInDiscountList)
                        discount = dtItemDetails.Rows[0]["discountgomla1"].Stringify();
                    PriceText.Text = "0";
                    PriceText.Text =
                        (!ProSetting.UpdateItemsSellPricesOnChangeOfBuyPrice
                        || dtItemDetails.Rows[0]["ProfitGomla1"].ToDecimal() == 0
                        || isItemInDiscountList
                            ? dtItemDetails.Rows[0]["Gomla1"].ToDecimal().RoundBy(ProSetting.Round)

                            : (PayPrice *
                                ((100 + dtItemDetails.Rows[0]["ProfitGomla1"].ToDecimal()) / 100)).RoundBy(ProSetting.Round))
                                .ToString("F" + ProSetting.Round);

                    Saleprice = dtItemDetails.Rows[0]["Gomla1"].ToDecimal().RoundBy(ProSetting.Round);
                }
                else if (BillKindCom.Text == "جملة 2")
                {
                    if (isItemInDiscountList)
                        discount = dtItemDetails.Rows[0]["discountgomla2"].Stringify();

                    PriceText.Text = "0";
                    PriceText.Text =
                        (!ProSetting.UpdateItemsSellPricesOnChangeOfBuyPrice
                        || dtItemDetails.Rows[0]["ProfitGomla2"].ToDecimal() == 0
                        || isItemInDiscountList
                            ? dtItemDetails.Rows[0]["Gomla2"].ToDecimal().RoundBy(ProSetting.Round)
                            : (PayPrice *
                                ((100 + dtItemDetails.Rows[0]["ProfitGomla2"].ToDecimal()) / 100))
                                .RoundBy(ProSetting.Round)
                         ).ToString("F" + ProSetting.Round);

                    Saleprice = dtItemDetails.Rows[0]["Gomla2"].ToDecimal().RoundBy(ProSetting.Round);
                }
            }
            itemMains = dtItemDetails.Rows[0]["ItMain"].ToDecimal();
            PayPrice = Buy.RoundBy(ProSetting.Round);

        }
        DataTable dtitem;
        DataRow[] dtItems;
        public void LoadItems()
        {
            try
            {
                var orderbyStatement = "";
                if (descendingOrder)
                {
                    descendingOrder = false;
                    orderbyStatement = " order by Items.ID desc ";
                }

                if (ProSetting.StoreMinus || ProSetting.UniderDelevItem)
                {
                    ItemCombo.DisplayMember = "Name";
                    ItemCombo.ValueMember = "ID";
                    if (ProSetting.LoadItemsAsCache)
                    {
                        if (orderbyStatement == "")
                            dtitem = FrmMainNEW.dtItems.AsEnumerable()
                                .Where(row =>
                                    int.Parse(row["storeid"].Stringify()) ==
                                    int.Parse(StoreCombo.SelectedValue.Stringify())
                                    && bool.Parse(row["Active"].Stringify()) == true)
                                .CopyToDataTable();
                        else
                            dtitem = FrmMainNEW.dtItems.AsEnumerable()
                                .Where(row =>
                                    int.Parse(row["storeid"].Stringify()) ==
                                    int.Parse(StoreCombo.SelectedValue.Stringify())
                                    && bool.Parse(row["Active"].Stringify()) == true)
                                .OrderByDescending(c => int.Parse(c["Id"].Stringify()))
                                .CopyToDataTable();
                        ItemCombo.DataSource = dtitem;
                    }
                    else
                    {
                        ItemCombo.BindComboBox(@"Select Items.ID,Name 
From Items Left Join Store On Items.ID= Store.ItemID 
Where Active=1 and StoreId='" + StoreCombo.SelectedValue + "'" + orderbyStatement + ";");
                    }

                }
                else
                {
                    //dtitem = new DataTable();
                    //dtitem = Codes.Search2("select Items.ID,Items.Name from Items,Store where Store.ItemID=Items.ID and Active = 1 and Store.Quantity>0 and storeid=" + StoreCombo.SelectedValue.Stringify());

                    ItemCombo.DisplayMember = "Name";
                    ItemCombo.ValueMember = "ID";
                    if (ProSetting.LoadItemsAsCache)
                    {
                        if (orderbyStatement == "")
                        {
                            var items = FrmMainNEW.dtItems.AsEnumerable()
                                .Where(row =>
                                    int.Parse(row["storeid"].Stringify()) ==
                                    int.Parse(StoreCombo.SelectedValue.Stringify()) &&
                                    bool.Parse(row["Active"].Stringify()) == true &&
                                    (Convert.ToDecimal(row["Quantity"].Stringify()) > 0 ||
                                     bool.Parse(row["Khadamy"].Stringify()) == true));
                            dtitem = items.Any() ? items.CopyToDataTable() : null;
                        }
                        else
                        {
                            var items = FrmMainNEW.dtItems.AsEnumerable()
                                .Where(row =>
                                    int.Parse(row["storeid"].Stringify()) ==
                                    int.Parse(StoreCombo.SelectedValue.Stringify()) &&
                                    bool.Parse(row["Active"].Stringify()) == true &&
                                    (Convert.ToDecimal(row["Quantity"].Stringify()) > 0 ||
                                     bool.Parse(row["Khadamy"].Stringify()) == true))
                                .OrderByDescending(c => int.Parse(c["Id"].Stringify()));

                            dtitem = items.Any() ? items.CopyToDataTable() : null;

                        }

                        ItemCombo.DataSource = dtitem;
                    }
                    else
                    {
                        ItemCombo.BindComboBox(@"Select ID,Name from (
Select Items.ID,Name,
Khadamy , 
Quantity , 
Active,
(Case When (" + Convert.ToInt16(ProSetting.SkipQuantityAssemblingOfAnItem) + @"=1) 
    then Case when Isnull((Select Count([ItemsColleting].[ID]) from ItemsColleting where ParentItemId= Items.ID),0) > 0 
                    then 1 
                    else 0 end
     else 0 end) as IsItemHaveComponents
From Items Left Join Store 
On Items.ID= Store.ItemID  
Where StoreId='" + StoreCombo.SelectedValue + @"') as ITMS 
Where (Khadamy = 1 or  Quantity>0 or IsItemHaveComponents = 1 ) and  Active=1  " + orderbyStatement.Replace("Items.", "") + ";");
                    }
                }



            }
            catch (Exception ex)
            {
                ItemCombo.DataSource = null;
            }
            //if (ItemCombo.DataSource != null && ItemCombo.SelectedIndex == 0)
            //{
            //    try
            //    {
            //        try
            //        {
            //            ItemCombo.SelectedValueChanged -= comboBox3_SelectedIndexChanged;
            //            ItemCombo.SelectedIndex = -1;
            //        }
            //        finally
            //        {
            //            ItemCombo.SelectedValueChanged += comboBox3_SelectedIndexChanged;
            //        }
            //        ItemCombo.SelectedIndex = 0;
            //    }
            //    catch (Exception ex)
            //    {
            //    }
            //}
        }

        private void FrmSalesQuickly_Activated(object sender, System.EventArgs e)
        {

            //if (StoreCombo.SelectedIndex != -1)
            //    LoadItems(StoreCombo.SelectedValue.Stringify());
            //if(dataGridView1.Rows.Count>0)
            //{
            //    for (int i = 0; i < dataGridView1.Rows.Count-1; i++)
            //    {
            //        if(dataGridView1.Rows[i].Cells[1].Value != null)
            //            dataGridView1_CellValueChanged(sender, new DataGridViewCellEventArgs(1,i));

            //    }
            //};

        }
        public void LoadItems(string storeid)
        {
            try
            {
                if (storeid.ToInt32() == 0)
                {
                    ItemCombo.DataSource = null;
                    return;
                }
                var orderbyStatement = "";
                if (descendingOrder)
                {
                    descendingOrder = false;
                    orderbyStatement = " order by Items.ID desc ";
                }

                if (ProSetting.StoreMinus || ProSetting.UniderDelevItem)
                {
                    ItemCombo.DisplayMember = "Name";
                    ItemCombo.ValueMember = "ID";
                    if (ProSetting.LoadItemsAsCache)
                    {
                        if (orderbyStatement == "")
                            dtitem = FrmMainNEW.dtItems.AsEnumerable()
                                .Where(row => int.Parse(row["storeid"].Stringify()) == int.Parse(storeid)
                                              && bool.Parse(row["Active"].Stringify()) == true)
                                .CopyToDataTable();
                        else
                            dtitem = FrmMainNEW.dtItems.AsEnumerable()
                                .Where(row => int.Parse(row["storeid"].Stringify()) == int.Parse(storeid)
                                              && bool.Parse(row["Active"].Stringify()) == true)
                                .OrderByDescending(c => int.Parse(c["Id"].Stringify()))
                                .CopyToDataTable();
                        ItemCombo.DataSource = dtitem;
                    }
                    else
                    {
                        ItemCombo.BindComboBox(@"Select Items.ID,Name 
From Items Left Join Store On Items.ID= Store.ItemID 
Where Active=1 and StoreId='" + storeid + "'" + orderbyStatement + ";");
                    }

                }
                else
                {
                    //dtitem = new DataTable();
                    //dtitem = Codes.Search2("select Items.ID,Items.Name from Items,Store where Store.ItemID=Items.ID and Active = 1 and Store.Quantity>0 and storeid=" + storeid);

                    ItemCombo.DisplayMember = "Name";
                    ItemCombo.ValueMember = "ID";
                    if (ProSetting.LoadItemsAsCache)
                    {
                        if (orderbyStatement == "")
                            dtitem = FrmMainNEW.dtItems.AsEnumerable()
                                .Where(row =>
                                    int.Parse(row["storeid"].Stringify()) ==
                                    int.Parse(storeid) &&
                                    bool.Parse(row["Active"].Stringify()) == true &&
                                    (Convert.ToDecimal(row["Quantity"].Stringify()) > 0 ||
                                     bool.Parse(row["Khadamy"].Stringify()) == true))
                                .CopyToDataTable();
                        else
                            dtitem = FrmMainNEW.dtItems.AsEnumerable()
                                .Where(row =>
                                    int.Parse(row["storeid"].Stringify()) ==
                                    int.Parse(storeid) &&
                                    bool.Parse(row["Active"].Stringify()) == true &&
                                    (Convert.ToDecimal(row["Quantity"].Stringify()) > 0 ||
                                     bool.Parse(row["Khadamy"].Stringify()) == true))
                                .OrderByDescending(c => int.Parse(c["Id"].Stringify()))
                                .CopyToDataTable();
                        ItemCombo.DataSource = dtitem;
                    }
                    else
                    {
                        ItemCombo.BindComboBox(@"Select ID,Name from (
Select Items.ID,Name,
Khadamy , 
Quantity , 
Active,
(Case When (" + Convert.ToInt16(ProSetting.SkipQuantityAssemblingOfAnItem) + @"=1) 
    then Case when Isnull((Select Count([ItemsColleting].[ID]) from ItemsColleting where ParentItemId= Items.ID),0) > 0 
                    then 1 
                    else 0 end
     else 0 end) as IsItemHaveComponents
From Items Left Join Store 
On Items.ID= Store.ItemID  
Where StoreId='" + storeid + @"') as ITMS 
Where (Khadamy = 1 or  Quantity>0 or IsItemHaveComponents = 1 ) and  Active=1  " + orderbyStatement.Replace("Items.", "") + ";");
                    }
                }
            }
            catch (Exception ex)
            {
                ItemCombo.DataSource = null;
            }
        }
        string orderClients = ""; DataTable dtClients;

        private void FrmSalesPiont_Load(object sender, EventArgs e)
        {
            try
            {
                if (Screen.PrimaryScreen.Bounds.Width < 1200)
                {
                    PnlActions1.Dock = DockStyle.Top;
                }
            }
            catch (Exception ex)
            {
            }
        }
        private void LoadForm(EventArgs e)
        {
            Codes.StartQueryBatch();
            try
            {
                comboBox7.BindComboBox("select ID,Service from FollowUpServices", "Service", "ID");
            }
            catch
            {
            }

            try
            {
                DataTable dcomp = Codes.Search2("select Name from CompanyData");
                CompanyNamelbl.Text = dcomp.Rows[0][0].Stringify();
            }
            catch
            {
            }

            try
            {
                sc.LoadUserStocks(StockCombo);
            }
            catch
            {
            }
            try
            {
                Codes.StartQueryBatch();
                TLPContainer.AutoScroll = false;
                BtnKeysShortcuts.ButtonText = Tr.M2.m840;
                if (ProSetting.ShowInvoiceDareba)
                {
                    if (ProSetting.HideDefaultBillTypes)
                    {
                        this.CmbBillPaperSize.Items.AddRange(new object[]
                        {
                        "فاتورة ضريبة مفصلة",
                        "فاتورة ضريبة مبسطة"
                        });
                    }
                    else
                    {
                        this.CmbBillPaperSize.Items.AddRange(new object[]
                        {
                        "A4",
                        "نصف A4",
                        "ريسيت",
                        "ريسيت بدون جدول",
                        "ريسيت بدون اعدادات",
                        "A5",
                        "فاتورة طبية",
                        "فاتورة سيريال",
                        "فاتورة كشف نظارات",
                        "فاتورة مخصصة1",
                        "فاتورة مخصصة2",
                        "فاتورة ضريبة مفصلة",
                        "فاتورة ضريبة مبسطة"
                        });
                    }
                }
                else
                {
                    if (!ProSetting.HideDefaultBillTypes)
                    {

                        this.CmbBillPaperSize.Items.AddRange(new object[]
                        {
                        "A4",
                        "نصف A4",
                        "ريسيت",
                        "ريسيت بدون جدول",
                        "ريسيت بدون اعدادات",
                        "A5",
                        "فاتورة طبية",
                        "فاتورة سيريال",
                        "فاتورة كشف نظارات",
                        "فاتورة مخصصة1",
                        "فاتورة مخصصة2"
                        });
                    }

                }
                button12.Enabled = ProSetting.SearchSale;
                button4.Enabled = ProSetting.DeleteSale;
                button2.Enabled = ProSetting.BackSale;
                //ItemGrid = new DataGridViewComboBoxColumn();
                if (ProSetting.OrderClientsByName)
                {
                    orderClients = " order by Name asc";
                }
                try
                {
                    label64.Visible = ProSetting.ClientPrice;
                    textBox21.Visible = ProSetting.ClientPrice;
                }
                catch { }
                try
                {
                    dtServices.Columns.Add("ID");
                    dtServices.Columns.Add("Service");
                }
                catch { }



                try
                {
                    ChkDetect.Visible = ProSetting.Detect;
                }
                catch { }

                try
                {
                    label27.Text = label45.Text = label43.Text = label22.Text = "0";
                    label16.Visible =
                        label27.Visible =
                            label28.Visible =
                                label43.Visible =
                                    label44.Visible =
                                        label45.Visible =
                                            label46.Visible =
                                                label22.Visible =
                                                    panel5.Visible = ProSetting.ClientRaseed;
                }
                catch
                {
                }

                try
                {

                    panel12.Visible = ProSetting.Est7qaq;
                }
                catch { }
                try
                {
                    label52.Visible = ProSetting.UnitWeight; textBox2.Visible = ProSetting.UnitWeight;
                    UniderDelevItem.Visible = ProSetting.UniderDelevItem;
                }
                catch { }
                BillKindCom.SelectedIndexChanged -= BillKindCom_SelectedIndexChanged;
                try { BillKindCom.Enabled = FrmMainNEW.BillType; }

                catch { }
                try { BillKindCom.Text = ProSetting.BillType; }
                catch { }
                BillKindCom.SelectedIndexChanged += BillKindCom_SelectedIndexChanged;

                try
                {
                    if (ProSetting.ColorText == false)
                    {
                        textBox8.Visible = false;
                        label25.Visible = false;
                    }
                    else
                    {
                        textBox8.Visible = true;
                        label25.Visible = true;
                    }
                    label25.Text = ProSetting.ColorOrSerial;
                    if (ProSetting.ColorOrSerial == "السيريال")
                    {
                        textBox8.ReadOnly = true;
                    }
                    else if (ProSetting.ColorOrSerial == "اللون")
                    {
                        if (ProSetting.ColorList)
                        {
                            textBox8.ReadOnly = true;
                        }
                    }
                }
                catch { }
                try
                {
                    if (ProSetting.PriceBean == true)
                    {
                        BeanKindCom.SelectedIndex = 1;
                    }
                    else
                    {
                        BeanKindCom.SelectedIndex = 0;
                    }
                    if (ProSetting.UnderDelevBill == false)
                    {
                        checkBox1.Visible = false;
                    }
                    else
                    {
                        checkBox1.Visible = true;
                    }
                    //if (checkBox1.Checked == true)
                    //{
                    //    ProSetting.UnderDelevBill = true;
                    //}
                    //else
                    //{
                    //    ProSetting.UnderDelevBill = false;
                    //}
                }
                catch { }


                dataGridView1.Select();

                if (ProSetting.MadfooSafey == true)
                {
                    PayedKindCom.Text = "نقدى";
                }
                else
                {
                    PayedKindCom.Text = "أجل";
                }

                lblUserName.Text = ProSetting.UserNameLo;
                if (dtExpDate.Columns.Count == 0)
                {
                    dtExpDate.Columns.Add("اسم الصنف");
                    dtExpDate.Columns.Add("الباركود");
                    dtExpDate.Columns.Add("تاريخ الصلاحيه");
                }



                if (ProSetting.ChooseClient)
                {
                    try
                    {
                        SellerCombo.SelectedIndexChanged -= SellerCombo_SelectedIndexChanged;

                        try
                        {
                            sc.Seller(SellerCombo);
                        }
                        catch
                        {
                        }
                        SellerCombo.SelectedIndexChanged += SellerCombo_SelectedIndexChanged;

                        if (ProSetting.ClientBillType)
                        {
                            dtClients = ClientCombo.BindComboBox(@"IF OBJECT_ID('tempdb..#CLNTS') IS NOT NULL
	Drop Table #CLNTS;
select ID,Name  Into #CLNTS from Clients WHERE Status='True' and BillType='" + BillKindCom.Text + @"' and SellerID in (select SellerId from UserSeller where UserSeller.Status='True' and UserId='" + ProSetting.UserIdLo + @"')

if((Select Count(*) From #CLNTS) > 0 and (Select ClientBillType From ProSetting)=1)
begin
Select * From #CLNTS " + orderClients + @";
end
else
begin
select ID,Name from Clients WHERE Status='True' and BillType='" + BillKindCom.Text + @"'" + orderClients + @"
end

", "<-اختر->");



                            //ClientCombo.DisplayMember = dlt.Columns["Name"].Stringify();
                            //ClientCombo.SelectedValueMember = dlt.Columns["ID"].Stringify();
                        }
                        else
                        {
                            dtClients = ClientCombo.BindComboBox(@"IF OBJECT_ID('tempdb..#CLNTS') IS NOT NULL
	Drop Table #CLNTS;
select ID,Name  Into #CLNTS from Clients WHERE Status='True' and SellerID in (select SellerId from UserSeller where UserSeller.Status='True' and UserId='" + ProSetting.UserIdLo + @"')

if((Select Count(*) From #CLNTS) > 0 and (Select ClientSeller From ProSetting)=1)
begin
Select * From #CLNTS " + orderClients + @";
end
else
begin
select ID,Name from Clients WHERE Status='True' " + orderClients + @"
end

", "<-اختر->");
                            ClientCombo.SelectedIndex = 0;
                        }
                    }
                    catch { }
                    //if (dtClients.Rows.Count > 0)
                    //{
                    //    ClientCombo_SelectedValueChanged(sender, e);
                    //}
                    try
                    {
                        StoreCombo.SelectedIndexChanged -= StoreCombo_SelectedIndexChanged;
                        sc.LoadUserStores3(StoreCombo);
                        StoreCombo.SelectedIndexChanged += StoreCombo_SelectedIndexChanged;
                        StoreCombo_SelectedIndexChanged(StoreCombo, e);
                    }
                    catch { }
                }
                else
                {
                    SellerCombo.SelectedIndexChanged -= SellerCombo_SelectedIndexChanged;

                    try
                    {
                        sc.SellerWithout(SellerCombo);
                    }
                    catch { }
                    SellerCombo.SelectedIndexChanged += SellerCombo_SelectedIndexChanged;

                    try
                    {
                        if (ProSetting.ClientBillType)
                        {
                            dtClients = ClientCombo.BindComboBox(@"IF OBJECT_ID('tempdb..#CLNTS') IS NOT NULL
	Drop Table #CLNTS;
select ID,Name  Into #CLNTS from Clients WHERE Status='True' and BillType='" + BillKindCom.Text + @"' and SellerID in (select SellerId from UserSeller where UserSeller.Status='True' and UserId='" + ProSetting.UserIdLo + @"')

if((Select Count(*) From #CLNTS) > 0 and (Select ClientBillType From ProSetting)=1)
begin
Select * From #CLNTS " + orderClients + @";
end
else
begin
select ID,Name from Clients WHERE Status='True' and BillType='" + BillKindCom.Text + @"'" + orderClients + @"
end

");
                        }
                        else
                        {
                            dtClients = ClientCombo.BindComboBox(@"IF OBJECT_ID('tempdb..#CLNTS') IS NOT NULL
	Drop Table #CLNTS;
select ID,Name  Into #CLNTS from Clients WHERE Status='True' and SellerID in (select SellerId from UserSeller where UserSeller.Status='True' and UserId='" + ProSetting.UserIdLo + @"')

if((Select Count(*) From #CLNTS) > 0 and (Select ClientSeller From ProSetting)=1)
begin
Select * From #CLNTS " + orderClients + @";
end
else
begin
select ID,Name from Clients WHERE Status='True' " + orderClients + @"
end

");
                        }
                    }
                    catch { }

                    try
                    {
                        StoreCombo.SelectedIndexChanged -= StoreCombo_SelectedIndexChanged;
                        sc.LoadUserStores(StoreCombo);
                        StoreCombo.SelectedIndexChanged += StoreCombo_SelectedIndexChanged;
                        StoreCombo_SelectedIndexChanged(StoreCombo, e);
                    }
                    catch { }
                }

                SetPayTypeSettings();

                try
                {
                    m = new DataGridViewComboBoxColumn();
                    dt = new DataTable();
                    dt = Codes.Search2("select ID,Name from Units");

                    m.Name = "mm";
                    m.HeaderText = Tr.M2.m046;
                    m.DisplayMember = dt.Columns[1].Stringify();
                    m.DataSource = dt;

                    //m.ValueMember = dt.Columns[0].Stringify();
                }
                catch { }
                try
                {
                    if (ProSetting.SaleBillNum == true)
                    {
                        BillNoT.Enabled = true;
                    }
                    else
                    {
                        BillNoT.Enabled = false;
                        if (ProSetting.DailyBill == true)
                        {
                            DataTable dt88 = new DataTable();
                            dt = Codes.Search2("select top 1( cast(billno as int)) from ClientMove where Date ='" + DateTime.Today.ToShortDateString() + "'  order by cast(billno as int) desc");
                            int dd = Convert.ToInt32(dt.Rows[0][0].Stringify()) + 1;
                            BillNoT.Text = dd.Stringify();
                        }
                        else
                        {
                            DataTable dt88 = new DataTable();
                            dt = Codes.Search2("select top 1( cast(billno as int)) from ClientMove order by cast(billno as int) desc");
                            int dd = Convert.ToInt32(dt.Rows[0][0].Stringify()) + 1;
                            BillNoT.Text = dd.Stringify();
                        }
                    }

                    //label8.Text = (Convert.ToInt32(Codes.Search(" select max(id) from ClientMove ").Rows[0][0].Stringify()) + 1).Stringify();

                }
                catch { BillNoT.Text = "1"; }
                try
                {
                    BankCombo.DataSource = null;

                    DataTable bank = BankCombo.BindComboBox(@"SELECT        Banks.ID, Banks.Name
FROM            Banks INNER JOIN
                         UserBank ON Banks.ID = UserBank.BankId
WHERE        (UserBank.Status = 'True') AND (UserBank.UserId = '" + ProSetting.UserIdLo + "')");

                    if (bank.Rows.Count == 0)
                    {
                        textBox12.Enabled = false;
                    }
                }
                catch { }
                if (dataGridView1.Columns.Count == 0)
                {
                    try
                    {
                        dataGridView1.Columns.Add("ItemID", "Id");//0
                        dataGridView1.Columns["ItemID"].Visible = false;
                        dataGridView1.Columns.Add("Barcode", Tr.M2.M520);//1
                        dataGridView1.Columns["Barcode"].ReadOnly = ProSetting.Barcode;
                        //if (ProSetting.ItemCombo == false)
                        //{
                        //    dataGridView1.Columns.Add(ItemGrid);
                        //    dataGridView1.Columns[2].ReadOnly = false;
                        //}
                        //else
                        //{
                        dataGridView1.Columns.Add("ItemName", Tr.M2.item_name);//2
                        dataGridView1.Columns[2].ReadOnly = true;
                        //}

                        dataGridView1.Columns.Add("ItemColor", ProSetting.ColorOrSerial);//3
                        if (ProSetting.ColorOrSerial == "السيريال")
                        {
                            dataGridView1.Columns[3].ReadOnly = true;
                        }
                        else if (ProSetting.ColorOrSerial == "اللون")
                        {
                            if (ProSetting.ColorList)
                            {
                                dataGridView1.Columns[3].ReadOnly = true;
                            }
                        }
                        //dataGridView1.Columns.Add("mm", "الوحده");

                        dataGridView1.Columns.Add(m);//4
                        dataGridView1.Columns.Add("Quantity", Tr.M2.m009);//5
                        if (ProSetting.Qnt)
                        {
                            dataGridView1.Columns[5].ReadOnly = true;
                            QntText.ReadOnly = true;
                        }

                        //try
                        //{
                        //    BillKindCom.Items.Add(ProSetting.Price1);
                        //    BillKindCom.Items.Add(ProSetting.Price2);
                        //    BillKindCom.Items.Add(ProSetting.Price3);
                        //    BillKindCom.Items.Add(ProSetting.Price4);
                        //    BillKindCom.Items.Add(ProSetting.Price1);
                        //}
                        //catch { }

                        if (BillKindCom.SelectedIndex == 1)
                        {
                            dataGridView1.Columns.Add("UnitPrice", ProSetting.Price1);//6
                        }
                        else if (BillKindCom.SelectedIndex == 0)
                        {
                            dataGridView1.Columns.Add("UnitPrice", ProSetting.Price2);//6
                        }
                        else if (BillKindCom.SelectedIndex == 2)
                        {
                            dataGridView1.Columns.Add("UnitPrice", ProSetting.Price3);//6
                        }
                        else if (BillKindCom.SelectedIndex == 3)
                        {
                            dataGridView1.Columns.Add("UnitPrice", ProSetting.Price4);//6
                        }
                        else if (BillKindCom.SelectedIndex == 4)
                        {
                            dataGridView1.Columns.Add("UnitPrice", ProSetting.Price5);//6
                        }
                        else
                        {
                            dataGridView1.Columns.Add("UnitPrice", ProSetting.Price1);//6
                        }
                        dataGridView1.Columns.Add("Discount", Tr.M2.m013);//7
                        dataGridView1.Columns.Add("DiscountValue", Tr.M2.m014);//8
                        dataGridView1.Columns.Add("AdditionValue", Tr.M2.m515);//9
                        dataGridView1.Columns.Add("countItemmain", Tr.M2.m516);//10
                        dataGridView1.Columns.Add("MainUnitPrice", Tr.M2.m517);//11
                                                                               //dataGridView1.Columns["countItemmain"].ReadOnly = true;
                        dataGridView1.Columns.Add("TotalPrice", Tr.M2.m018);//12
                        dataGridView1.Columns["TotalPrice"].ReadOnly = true;
                        dataGridView1.Columns.Add("StoreID", Tr.M2.m373);//13
                        dataGridView1.Columns.Add("mainIt", Tr.M2.M519);//14
                        dataGridView1.Columns.Add("buyPrice", Tr.M2.m047);//15
                        dataGridView1.Columns.Add("Rebhea", Tr.M2.m375);//16
                        dataGridView1.Columns.Add("TotalBuy", Tr.M2.m376);//17
                        dataGridView1.Columns.Add("ItemStoreCode", Tr.M2.m350);//18
                        dataGridView1.Columns.Add("qntStore", Tr.M2.m518);//19

                        dataGridView1.Columns["qntStore"].ReadOnly = true;

                        dataGridView1.Columns["ItemStoreCode"].Visible = ProSetting.ShowItemStoreCode;
                        UnderDelevery = new DataGridViewCheckBoxColumn();
                        UnderDelevery.Name = "UnderDelevItem";
                        UnderDelevery.HeaderText = Tr.M2.m025;
                        dataGridView1.Columns.Add(UnderDelevery);//20
                        if (!ProSetting.countItemmain)
                        {
                            dataGridView1.Columns["countItemmain"].Visible
                                = dataGridView1.Columns["MainUnitPrice"].Visible = false;
                        }
                        if (ProSetting.RaseedDisappear)
                        {
                            dataGridView1.Columns["qntStore"].Visible = false;
                        }
                        if (ProSetting.ColorText == false)
                        {
                            dataGridView1.Columns[3].Visible = false;
                        }
                        else
                        {
                            dataGridView1.Columns[3].Visible = true;
                        }
                        dataGridView1.Columns["UnderDelevItem"].Visible =
                            ProSetting.UniderDelevItem;
                        //dataGridView1.Columns.Add("UnitID", "الوحده");

                        //dataGridView1.Columns.Add(EXPDATEI);

                        DataGridViewImageColumn imageCol = new DataGridViewImageColumn();
                        imageCol.HeaderText = Tr.M2.image;
                        imageCol.Name = "Image";
                        imageCol.ImageLayout = DataGridViewImageCellLayout.Stretch;
                        dataGridView1.Columns.Add(imageCol);//21
                        dataGridView1.Columns.Add("ItemTax", Tr.M2.vat_rate);//22
                                                                             //dataGridView1.Columns["ItemTax"].ReadOnly = true;
                        DataGridViewButtonColumn PrintlablelButtonColumn = new DataGridViewButtonColumn();
                        PrintlablelButtonColumn.Name = "Printlabel";
                        PrintlablelButtonColumn.HeaderText = Tr.M2.m521;
                        PrintlablelButtonColumn.Text = Tr.M2.print;
                        PrintlablelButtonColumn.UseColumnTextForButtonValue = true;
                        dataGridView1.Columns.Add(PrintlablelButtonColumn);//23
                        dataGridView1.Columns.Add("DiscountType", "");//24
                        dataGridView1.Columns.Add("ItemPoints", "");//25
                        dataGridView1.Columns.Add("UnderDeliveryQnt", "");//26
                        dataGridView1.Columns.Add("ItemBuyPrice", "");//27

                        dataGridView1.Columns["Image"].DisplayIndex = dataGridView1.ColumnCount - 1;


                        dataGridView1.Columns["DiscountType"].Visible = false;
                        dataGridView1.Columns["ItemPoints"].Visible = false;
                        dataGridView1.Columns["UnderDeliveryQnt"].Visible = false;
                        dataGridView1.Columns["ItemBuyPrice"].Visible = false;
                        dataGridView1.Columns["Printlabel"].Visible =
                            ProSetting.PrintSaleslabel
                            && Convert.ToBoolean(FrmMainNEW.CurrentUser["PrintSaleslabel"].Stringify());

                        if (ProSetting.AllowExtrInfoToSalesBill)
                        {
                            LblExtraInfo.Visible =
                                TxtExtraInfo1.Visible =
                                    TxtExtraInfo2.Visible = true;

                            TxtExtraInfo1.Text = ProSetting.SalesBillExtraInfo1;
                            TxtExtraInfo2.Text = ProSetting.SalesBillExtraInfo2;
                        }
                        dataGridView1.Columns["ItemTax"].Visible =
                            ProSetting.ItemsTax;
                        dataGridView1.Columns["AdditionValue"].Visible =
                            ProSetting.ItemsAdditionValue
                            && ProSetting.Edition != EditionType.Platinum;

                        Taxlbl.Visible = ProSetting.ItemsTax;
                        TaxNum.Visible = ProSetting.ItemsTax;


                        try
                        {

                            dataGridView1.Columns[6].ReadOnly = !Convert.ToBoolean(FrmMainNEW.CurrentUser["ChangeBillPrice"].Stringify());
                            PriceText.Enabled = Convert.ToBoolean(FrmMainNEW.CurrentUser["ChangeBillPrice"].Stringify());
                            checkBox1.Visible = ProSetting.Edition != EditionType.Silver
                                                && Convert.ToBoolean(FrmMainNEW.CurrentUser["AddUnderDeliveryBillInSales"].Stringify());
                            BtnUpdateItemsSellPrices.Visible = FrmMainNEW.CurrentUser["UpdateSoldItemPrices"].ToBool();
                        }
                        catch { }
                        try
                        {
                            if (!Convert.ToBoolean(Codes.Search2("select Status from SMSSend where Type = 'Sale'").Rows[0][0]))
                            {
                                CHKSendSms.Visible = Convert.ToBoolean(FrmMainNEW.CurrentUser["SendSmsFromSales"].Stringify());
                            }
                        }
                        catch
                        {
                        }

                        dataGridView1.Columns["StoreID"].Visible = false;
                        dataGridView1.Columns["mainIt"].Visible = false;
                        dataGridView1.Columns["Rebhea"].Visible = false;
                        dataGridView1.Columns["buyPrice"].Visible = false;
                        dataGridView1.Columns["TotalBuy"].Visible = false;


                        if (ProSetting.NesbaColumns == true)
                        {
                            dataGridView1.Columns[7].Visible = false;
                            dataGridView1.Columns[8].Visible = false;

                        }
                        else
                        {
                            //var dtallowAddingItemDiscountInSalesBill = Codes.Search2("Select AllowAddingItemDiscountInSalesBill From Users Where ID=" + ProSetting.UserIdLo);
                            dataGridView1.Columns[7].ReadOnly = dataGridView1.Columns[8].ReadOnly =
                                 FrmMainNEW.CurrentUser != null
                                ? !Convert.ToBoolean(FrmMainNEW.CurrentUser["AllowAddingItemDiscountInSalesBill"].Stringify())
                                : dtUsers.Rows.Count > 0
                                ? !Convert.ToBoolean(dtUsers.Select("Id=" + ProSetting.UserIdLo)[0]["AllowAddingItemDiscountInSalesBill"].Stringify())
                                : true;

                        }
                        try
                        {
                            AllowToShowBuyPriceInSales = Convert.ToBoolean(FrmMainNEW.CurrentUser["AllowToShowBuyPriceInSales"].Stringify());
                        }
                        catch
                        {
                        }

                        BtnPrint.Visible = ProSetting.AllowPrintBillBeforeSave;
                    }
                    catch
                    {
                    }
                }

                try
                {


                    button16.Enabled = Convert.ToBoolean(FrmMainNEW.CurrentUser["FrmItemsBtn"].Stringify());
                    button9.Enabled = Convert.ToBoolean(FrmMainNEW.CurrentUser["FrmClientsBtn"].Stringify());
                    button10.Enabled = Convert.ToBoolean(FrmMainNEW.CurrentUser["FrmSellerBtn"].Stringify());
                    SalesBtn.Visible = ProSetting.Edition != EditionType.Silver && Convert.ToBoolean(FrmMainNEW.CurrentUser["OpenSales"].Stringify());
                    dataGridView1.Columns["ItemTax"].ReadOnly = !Convert.ToBoolean(FrmMainNEW.CurrentUser["AllowToEditSalesVAT"].Stringify());
                    TaxNum.Enabled = Convert.ToBoolean(FrmMainNEW.CurrentUser["AllowToEditSalesVAT"].Stringify());
                    textBox4.Enabled = Convert.ToBoolean(FrmMainNEW.CurrentUser["AllowInvoiceDiscount"].Stringify());
                    if (ProSetting.ItemsTax)
                    {
                        DarebaText.Text = "0";
                        DarebaText.ReadOnly = true;
                    }
                    else
                    {
                        DarebaText.Text = ProSetting.Dareba.Stringify();
                        DarebaText.ReadOnly = false;
                    }
                    if (BeanKindCom.SelectedIndex == 0)
                    {
                        textBox4.Text = ProSetting.Discount.Stringify();
                    }
                    pButton2.Enabled = Convert.ToBoolean(FrmMainNEW.CurrentUser["FrmReturnSalesBtn"].Stringify());
                    pButton3.Enabled = Convert.ToBoolean(FrmMainNEW.CurrentUser["FrmReturnSalesClientBtn"].Stringify());
                    pButton4.Enabled = Convert.ToBoolean(FrmMainNEW.CurrentUser["FrmClientAccountsBtn"].Stringify());
                    pButton5.Visible = Convert.ToBoolean(FrmMainNEW.CurrentUser["Services"].Stringify());
                    pButton6.Enabled = Convert.ToBoolean(FrmMainNEW.CurrentUser["FormClient5Btn"].Stringify());
                    dateTimePicker1.Enabled = Convert.ToBoolean(FrmMainNEW.CurrentUser["EditDate"].Stringify());
                    RebheaLbl.Visible = ProSetting.Rebhea;
                    btnClientsPointEshar.Visible =
                        Convert.ToBoolean(FrmMainNEW.CurrentUser["FrmClientPointBtn"].Stringify()) &&
                        ProSetting.Edition != EditionType.Silver;
                    btnUnderdelevebill.Visible = Convert.ToBoolean(FrmMainNEW.CurrentUser["FUnderDelevBill"].Stringify());
                    btnUnderdeleveitem.Visible = Convert.ToBoolean(FrmMainNEW.CurrentUser["FrmUnderDeliveryBtn"].Stringify());

                    try
                    {
                        RebheaLbl.Visible = Convert.ToBoolean(FrmMainNEW.CurrentUser["EarningSales"].Stringify());
                        RebheaText.Visible = Convert.ToBoolean(FrmMainNEW.CurrentUser["EarningSales"].Stringify());
                    }
                    catch
                    {
                    }

                    TxtProfitGuiding.Visible
                        = ProSetting.ProfitGuidingInSales;
                }
                catch { }

                decimal pointsNo = 0M, pointPrice = 0M;
                try
                {
                    var dtPointCalculations =
                        Codes.Search2("select Isnull(PointNo,0),Isnull(PointPrice,0) from ProSetting");
                    pointsNo = dtPointCalculations.Rows[0][0].ToDecimal().RoundBy(ProSetting.Round);
                    pointPrice = dtPointCalculations.Rows[0][1].ToDecimal().RoundBy(ProSetting.Round);
                }
                catch
                {
                }

                ChkAddBillPointsAsDiscount.Visible = pointsNo > 0 && pointPrice > 0;

                var displayedCount = dataGridView1.DisplayedColumnCount(true);
                int displayedWidth = dataGridView1.Width / displayedCount;
                int columnWidth = displayedCount <= 10 ? displayedWidth - 20 : displayedWidth;

                dataGridView1.RowTemplate.Height = 25;
                dataGridView1.Columns[1].Width = columnWidth;
                dataGridView1.Columns[2].Width = columnWidth + 180;
                dataGridView1.Columns[2].MinimumWidth = columnWidth + 180;
                dataGridView1.Columns[5].Width = columnWidth - 10;
                dataGridView1.Columns[6].Width = columnWidth - 10;
                dataGridView1.Columns[7].Width = columnWidth - 10;
                dataGridView1.Columns[8].Width = columnWidth - 10;
                dataGridView1.Columns["TotalPrice"].Width = columnWidth - 10;
                dataGridView1.Columns["qntStore"].Width = columnWidth - 10;
                dataGridView1.Columns["ItemStoreCode"].Width = columnWidth - 10;
                dataGridView1.Columns["UnderDelevItem"].Width = columnWidth - 10;
                dataGridView1.Columns["Image"].Width = columnWidth - 10;
                dataGridView1.Columns["Image"].MinimumWidth = columnWidth - 20;
                dataGridView1.Columns["ItemTax"].Width = columnWidth - 10;
                dataGridView1.Columns["countItemmain"].Width = columnWidth - 10;
                dataGridView1.Columns["MainUnitPrice"].Width = columnWidth - 10;

                dataGridView1.Columns["Printlabel"].Width = columnWidth - 10;
                try
                {
                    if (!ProSetting.ShowItemImage)
                    {
                        CalculatePreferredWidthForColumns();
                        //dataGridView1.AutoResizeColumns(DataGridViewAutoSizeColumnsMode.AllCells);
                    }
                    else
                    {

                        CalculatePreferredWidthForColumns();
                        //dataGridView1.AutoResizeColumns(DataGridViewAutoSizeColumnsMode.AllCells);

                        //dataGridView1.AutoResizeColumn(dataGridView1.Columns["Image"].Index,
                        //    DataGridViewAutoSizeColumnMode.AllCells);
                    }
                }
                catch
                {
                }
                if (ProSetting.ShowItemImage == false)
                {
                    dataGridView1.Columns["Image"].Visible = false;
                    pictureBox1.Visible = false;
                }

                //inrease datagrid font size
                try
                {
                    foreach (DataGridViewColumn c in dataGridView1.Columns)
                    {
                        c.DefaultCellStyle.Font = new Font("Arial", 18.5F, GraphicsUnit.Pixel);
                        c.SortMode = DataGridViewColumnSortMode.NotSortable;
                        c.FillWeight = 100 / dataGridView1.DisplayedColumnCount(true);
                        //c.AutoSizeMode = c.Name == "Image"
                        //    ? DataGridViewAutoSizeColumnMode.AllCells
                        //    : DataGridViewAutoSizeColumnMode.Fill;

                    }
                }
                catch
                {
                }

                try
                {
                    if (FrmMainNEW.HideTarget == false)
                    {
                        panel11.Visible = true;
                    }
                }
                catch { }
                if (!reload)
                {
                    try
                    {
                        if (!ProSetting.ChooseClient)
                        {
                            _OnLoad = false;
                            try
                            {
                                if (dtClients.Rows.Count > 0)
                                {
                                    ClientCombo.Focus();
                                    if (ClientCombo.SelectedValue.ToInt32() == 0
                                        || ClientCombo.SelectedValue.ToInt32() != dtClients.Rows[0]["Id"].ToInt32())
                                        ClientCombo.SelectedValue = dtClients.Rows[0]["Id"].ToInt32();
                                    else
                                    {
                                        ClientCombo_SelectedValueChanged(ClientCombo, e);
                                        LoadClientRassed();
                                    }

                                    try
                                    {
                                        if (ProSetting.SalesAutoSaveEnabled)
                                        {
                                            if (CurrentAutoSaveModel == null)
                                            {
                                                CurrentAutoSaveModel = new AutoSaveSalesModel
                                                {
                                                    TempId = _autoSaveManager.TempBillsList.Count == 0
                                                        ? 1
                                                        : _autoSaveManager.TempBillsList.Max(tb => tb.TempId) + 1,
                                                    ClientId = Convert.ToInt32(ClientCombo.SelectedValue),
                                                    OldClientId = 0,
                                                    ItemsCount = 0
                                                };
                                                _autoSaveManager.OpenningSalesScreens.Add(CurrentAutoSaveModel, this);
                                            }
                                        }
                                    }
                                    catch (Exception ex)
                                    {
                                    }

                                    //ClientCombo_SelectedIndexChanged(sender, e);
                                    if (ProSetting.SalesAutoSaveEnabled && !LoadingUnsavedBill)
                                        CheckClientUnsavedWork();
                                }
                            }
                            catch
                            {
                            }

                            try
                            {
                                if (ProSetting.BarcodeOrItem == "كود الصنف")
                                {
                                    dataGridView1.CurrentCell = dataGridView1.Rows[0].Cells[1];
                                    dataGridView1.CellEndEdit -= dataGridView1_CellEndEdit;
                                    dataGridView1.CellBeginEdit -= dataGridView1_CellBeginEdit;
                                    dataGridView1.CellFormatting -= dataGridView1_CellFormatting;
                                    dataGridView1.CellValidating -= dataGridView1_CellValidating;
                                    try
                                    {

                                        dataGridView1.BeginEdit(true);
                                    }
                                    catch
                                    {
                                    }

                                    dataGridView1.CellEndEdit += dataGridView1_CellEndEdit;
                                    dataGridView1.CellBeginEdit += dataGridView1_CellBeginEdit;
                                    dataGridView1.CellFormatting += dataGridView1_CellFormatting;
                                    dataGridView1.CellValidating += dataGridView1_CellValidating;
                                }
                                else if (ProSetting.BarcodeOrItem == "اسم الصنف")
                                {
                                    dataGridView1.Focus();
                                    dataGridView1.CurrentCell = dataGridView1.Rows[0].Cells[2];
                                    dataGridView1.CurrentCell.Selected = true;
                                    //dataGridView1.BeginEdit(true);
                                }
                                else
                                {
                                    if (!ProSetting.ChooseClient)
                                    {
                                        dataGridView1.Focus();
                                        dataGridView1.CurrentCell = dataGridView1.Rows[0].Cells[_lastAddItemColumnIndex];
                                        dataGridView1.CurrentCell.Selected = true;
                                    }
                                    else
                                    {
                                        ClientCombo.SelectAll();
                                        ClientCombo.Focus();
                                    }
                                }
                            }
                            catch
                            {
                            }
                        }
                    }
                    catch { }


                    try
                    {
                        CmbBillPaperSize.Text = Properties.Settings.Default.SizePrinter;
                    }
                    catch
                    {
                        CmbBillPaperSize.SelectedIndex = 0;
                    }
                }
                try
                {
                    if (ProSetting.ColorOrSerial != "السيريال")
                        AutomaticColorTextInSales = ProSetting.ColorText && Convert.ToBoolean(Codes.Search2("Select isnull(AutomaticColorTextInSales,0) From ProSetting").Rows[0][0].Stringify());
                }
                catch
                {
                }
                if (ProSetting.ChooseClient)
                {
                    ClientCombo.SelectAll();
                    ClientCombo.Focus();
                }

                try
                {
                    var dtUsershortucts = Codes.Search2(@"
Select [KeyShortcuts] From UserFormsKeyShortcuts Where UserId=" + ProSetting.UserIdLo + @" 
and FormName = '" + _formName + @"'");

                    var defaultShortcutsSettings = new BindingList<KeyShortcut>()
                    {
                        new KeyShortcut(button3) {ShortcutKeys = new[] {Keys.F1}},
                        new KeyShortcut(button4) {ShortcutKeys = new[] {Keys.F2}},
                        new KeyShortcut(button2) {ShortcutKeys = new[] {Keys.F3}},
                        new KeyShortcut(button1) {ShortcutKeys = new[] {Keys.F4}},
                        new KeyShortcut(button5) {ShortcutKeys = new[] {Keys.F5}},
                        new KeyShortcut(button6) {ShortcutKeys = new[] {Keys.F6}},
                        new KeyShortcut(button7) {ShortcutKeys = new[] {Keys.F7}},
                        new KeyShortcut(button8) {ShortcutKeys = new[] {Keys.F8}},
                        new KeyShortcut(button13) {ShortcutKeys = new[] {Keys.F9}},
                        new KeyShortcut(button14) {ShortcutKeys = new[] {Keys.F10}},
                        new KeyShortcut
                        {
                            Text = "البحث عن صنف F11", ShortcutKeys = new[] {Keys.F11}, ShortcutVisible = true,
                            Active = true,
                            ShortcutEnabled = true
                        },
                        new KeyShortcut(button12) {ShortcutKeys = new[] {Keys.F12}},
                        new KeyShortcut(BtnPayViaTerminal)
                        {
                            Text = BtnPayViaTerminal.Text.Replace('\n', ' ').Replace('\r', ' ').Trim(),
                            ShortcutKeys = new[] {Keys.Control | Keys.F9, Keys.Control | Keys.F1}

                        },
                        new KeyShortcut(BtnPrint)
                        {
                            Text = BtnPrint.Text.Replace('\n', ' ').Replace('\r', ' ').Trim(),
                            ShortcutKeys = new[] {Keys.Control | Keys.P}

                        },
                        new KeyShortcut(btnClientsPointEshar)
                        {
                            Text = btnClientsPointEshar.Text.Replace('\n', ' ').Replace('\r', ' ').Trim(),
                            ShortcutKeys = new[] {Keys.Control | Keys.R}
                        },
                        new KeyShortcut(btnBean)
                        {
                            Text = btnBean.Text.Replace('\n', ' ').Replace('\r', ' ').Trim(),
                            ShortcutKeys = new[] {Keys.Control | Keys.B}
                        }
                    };
                    _keyshortcuts = dtUsershortucts.Rows.Count == 0
                        ? defaultShortcutsSettings
                        : JsonConvert.DeserializeObject<BindingList<KeyShortcut>>(dtUsershortucts.Rows[0][0].Stringify());
                    if (dtUsershortucts.Rows.Count > 0)
                        CompareShortcutProperties(defaultShortcutsSettings);

                    UpdateShortcutControls();
                }
                catch (Exception exception)
                {
                }
            }
            catch (Exception ex)
            {
                ex.WriteLog("SalesQuicklyLoad");
            }
            finally
            {
                Codes.EndQueryBatch();
                _OnLoad = false;
            }
        }
        private void CompareShortcutProperties(BindingList<KeyShortcut> defaultShortcuts)
        {
            try
            {
                foreach (var shortcut in _keyshortcuts)
                {
                    var defaultShortcut = defaultShortcuts.FirstOrDefault(shrt => shrt.Text == shortcut.Text && shrt.ShortcutControlName == shortcut.ShortcutControlName);
                    if (defaultShortcut != null)
                    {
                        shortcut.ShortcutEnabled = defaultShortcut.ShortcutEnabled;
                        shortcut.ShortcutVisible = defaultShortcut.ShortcutVisible;
                    }
                }
            }
            catch (Exception exc)
            {
            }
        }
        // Helper for showing a message and clearing/focusing a textbox (used in textBox13_Leave and similar places)
        private void ShowMessageAndResetTextBox(string message, TextBox textBox)
        {
            MessageBox.Show(message);
            textBox.Clear();
            textBox.Focus();
        }

        private void SetTextBoxEnabled(TextBox textBox, bool enabled)
        {
            textBox.Enabled = enabled;
        }

        private void SetTextBoxText(TextBox textBox, string text)
        {
            textBox.Text = text;
        }

        private void SetControlVisible(Control control, bool visible)
        {
            control.Visible = visible;
        }

        private void SetControlSize(Control control, int width, int height)
        {
            control.Size = new System.Drawing.Size(width, height);
        }

        private void SetControlFocus(Control control)
        {
            control.Focus();
        }

        // نفدى أم آجل
        private void SetPayTypeSettings()
        {
            try
            {
                var nakdi = false;
                try
                {
                    nakdi = Convert.ToBoolean(FrmMainNEW.CurrentUser["NakdiOnly"].Stringify());
                }
                catch (Exception ex)
                {
                    try
                    {
                        nakdi = Convert.ToBoolean(
                                        Codes.Search2("select NakdiOnly from users where ID = '" + ProSetting.UserIdLo + "'")
                                            .Rows[0][0].Stringify());
                    }
                    catch
                    {
                    }
                }

                if (ProSetting.LinkBilltypeWithCashFromClient)
                {
                    PnlClientPayement.Visible = true;
                }
                else
                {
                    if ((ProSetting.NakdiClient == ClientCombo.SelectedValue.ToInt32() || nakdi)
                         && !ChkDelivery.Checked)
                    {
                        PayedKindCom.Enabled = false;
                        PayedKindCom.SelectedIndex = 0;
                    }
                    else if (ProSetting.CancelMadfo && !ChkDelivery.Checked)
                    {
                        PayedKindCom.Enabled = false;
                        PayedKindCom.SelectedIndex = 0;
                    }
                    else if ((ProSetting.NakdiClient == ClientCombo.SelectedValue.ToInt32() ||
                              nakdi ||
                              (ProSetting.CancelMadfoForNakdi == true && ProSetting.NakdiClient == ClientCombo.SelectedValue.ToInt32()))
                              && !ChkDelivery.Checked)
                    {
                        PayedKindCom.Enabled = false;
                        PayedKindCom.SelectedIndex = 0;
                    }
                    else
                    {
                        PayedKindCom.Enabled = true;
                        PayedKindCom.SelectedIndex = ProSetting.MadfooSafey && !ChkDelivery.Checked ? 0 : 1;
                    }
                }
            }
            catch { }
        }
        private void timer1_Tick(object sender, EventArgs e)
        {
            GetCurrentBillNum();
        }

        private void GetCurrentBillNum()
        {

            try
            {
                //dateTimePicker2.Value = DateTime.Today;
                if (ProSetting.SaleBillNum == true)
                {
                    BillNoT.Enabled = true;
                }
                else
                {
                    BillNoT.Enabled = false;

                    if (ProSetting.DailyBill == true)
                    {
                        DataTable dt88 = new DataTable();
                        dt = Codes.Search2("select top 1( cast(billno as int)) from ClientMove where Date ='" + DateTime.Today.ToShortDateString() + "'  order by cast(billno as int) desc");
                        int pp = Convert.ToInt32(dt.Rows[0][0].Stringify()) + 1;
                        BillNoT.Text = pp.Stringify();
                    }
                    else
                    {
                        DataTable dt88 = new DataTable();
                        dt = Codes.Search2("select top 1( cast(billno as int)) from ClientMove order by cast(billno as int) desc");
                        int pp = Convert.ToInt32(dt.Rows[0][0].Stringify()) + 1;
                        BillNoT.Text = pp.Stringify();
                    }
                }
            }
            catch { BillNoT.Text = "1"; }
        }
        private void button9_Click(object sender, EventArgs e)
        {
            try
            {
                FrmClients f = new FrmClients();
                f.ShowDialog();
                dt = new DataTable();
                DataTable dtSellers = Codes.Search2(@"
SELECT Sellers.ID, Sellers.Name, UserSeller.Status 
FROM  UserSeller INNER JOIN Sellers 
ON UserSeller.SellerId = Sellers.ID 
where UserSeller.Status='True' and UserId='" + ProSetting.UserIdLo + "' and Sellers.Active=1");

                if (ProSetting.ClientSeller && dtSellers.Rows.Count > 0)
                {
                    if (ProSetting.OrderClientsByName)
                    {
                        dt = ClientCombo.BindComboBox("select ID,Name from Clients WHERE Status='True' and SellerID in (select SellerId from UserSeller where UserSeller.Status='True' and UserId='" + ProSetting.UserIdLo + "')" + (orderClients == "" ? " order by Id desc" : orderClients));
                    }
                    else
                    {
                        dt = ClientCombo.BindComboBox("select ID,Name from Clients WHERE Status='True' and SellerID in (select SellerId from UserSeller where UserSeller.Status='True' and UserId='" + ProSetting.UserIdLo + "') " + "order by ID Desc");
                    }
                }
                else
                {
                    if (ProSetting.OrderClientsByName)
                    {
                        dt = ClientCombo.BindComboBox("select ID,Name from Clients WHERE Status='True'" + (orderClients == "" ? " order by Id desc" : orderClients));
                    }
                    else
                    {
                        dt = ClientCombo.BindComboBox("select ID,Name from Clients WHERE Status='True' " + "order by ID Desc");
                    }
                }

                ClientCombo.Focus();
                ClientCombo.Select(0, ClientCombo.Text.Length);

                ClientCombo_SelectedValueChanged(sender, e);
                ClientCombo_SelectedIndexChanged(sender, e);
            }
            catch { }
        }
        private void button10_Click(object sender, EventArgs e)
        {
            try
            {
                FrmSeller f = new FrmSeller();
                f.ShowDialog();
                sc.SellerWithout(SellerCombo, false);
            }
            catch { }
        }

        private void textBox4_TextChanged(object sender, EventArgs e)
        {
            try
            {
                if (textBox4.Focused || discountChanged)
                {
                    var discountPercentage = 0M;
                    if (!decimal.TryParse(textBox4.Text, out discountPercentage))
                    {
                        textBox4.Text = "0";
                        return;
                    }

                    if (discountPercentage > ProSetting.BillMaxDiscount && ProSetting.BillMaxDiscount > 0)
                    {
                        MessageBox.Show(Tr.M1.m0257);
                        textBox4.Text = "0";
                        return;
                    }

                    x = discountPercentage;

                    if (x > 100)
                    {
                        MessageBox.Show(Tr.M1.m0156);
                        textBox4.Text = "0";
                        return;
                    }

                    y = textBox5.Text.ToDecimal().RoundBy(ProSetting.Round);
                    decimal Trans = TransportValue.Text.ToDecimal().RoundBy(ProSetting.Round);
                    c = (y * x / 100).RoundBy(ProSetting.Round);
                    if (ProSetting.DarebaAfterDiscount)
                    {
                        TotAfter = ((y - c) + (((y - c) * DarebaText.Text.ToDecimal()) / 100)).RoundBy(ProSetting.Round);
                    }
                    else
                    {
                        TotAfter = ((y - c) + ((y * DarebaText.Text.ToDecimal()) / 100)).RoundBy(ProSetting.Round);
                    }

                    textBox11.Text = ((TotAfter + ((TotAfter / 100) * textBox20.Text.ToDecimal()) + Trans)).ToString("F" + ProSetting.Round);
                    discountChanged = false;
                    textBox3.Text = c
                            .ToString("F" + ProSetting.Round);


                    NesbaLblsNew.Text = textBox4.Text;
                }

                //textBox11_TextChanged_2(sender, e);
            }
            catch
            {
                NesbaLblsNew.Text = "0";
            }
        }

        private void textBox3_TextChanged(object sender, EventArgs e)
        {
            try
            {
                if (textBox3.Focused || discountChanged)
                {

                    var discountValue = 0M;
                    if (!decimal.TryParse(textBox3.Text, out discountValue))
                    {
                        textBox3.Text = "0";
                        return;
                    }
                    var discountPercentage = ((discountValue / textBox5.Text.ToDecimal()) * 100).RoundBy(ProSetting.Round);
                    if (discountPercentage > ProSetting.BillMaxDiscount && ProSetting.BillMaxDiscount > 0)
                    {
                        //new FrmMessageDialog(language == "en"
                        //    ? "You have exceeded the maximum invoice discount rate"
                        //    : "لقد تجاوزت أقصى نسبة خصم للفاتورة", Tr.M1.error, this, DialogResult.OK).ShowDialog(this);

                        MessageBox.Show(this, Tr.M1.m0257, Tr.M1.error, MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                        textBox3.Text = "0";
                        return;
                    }
                    if (discountValue <= textBox5.Text.ToDecimal())
                    {
                        x = discountValue;
                        y = Math.Round((Convert.ToDecimal((textBox5.Text).Stringify())), ProSetting.Round, MidpointRounding.AwayFromZero);
                        decimal transport = Math.Round((Convert.ToDecimal(TransportValue.Text)), ProSetting.Round, MidpointRounding.AwayFromZero);
                        if (ProSetting.DarebaAfterDiscount)
                        {
                            TotAfter = (Math.Round((y - x) + (((y - x) * Convert.ToDecimal(DarebaText.Text)) / 100), ProSetting.Round, MidpointRounding.AwayFromZero));
                        }
                        else
                        {
                            TotAfter = (Math.Round((y - x) + ((y * Convert.ToDecimal(DarebaText.Text)) / 100), ProSetting.Round, MidpointRounding.AwayFromZero));
                        }
                        textBox11.Text = Math.Round(((TotAfter + ((TotAfter / 100) * Convert.ToDecimal(textBox20.Text)) + transport)), ProSetting.Round, MidpointRounding.AwayFromZero).ToString("F" + ProSetting.Round);
                    }
                    else
                    {
                        MessageBox.Show(Tr.M1.m0157);
                        textBox3.Text = "0";
                        return;
                    }
                    try
                    {
                        x = discountValue;
                        y = Math.Round((Convert.ToDecimal((textBox5.Text).Stringify())), ProSetting.Round, MidpointRounding.AwayFromZero);
                        NesbaLblsNew.Text = Math.Round(((x * 100) / y), ProSetting.Round, MidpointRounding.AwayFromZero).ToString("F" + ProSetting.Round);
                        discountChanged = false;
                        textBox4.Text = NesbaLblsNew.Text;
                    }
                    catch { NesbaLblsNew.Text = textBox4.Text = "0"; }
                }
                try
                {
                    if (totalrebh == 0)
                    {
                        decimal Rebhea = 0;
                        for (int i = 1; i < dataGridView1.Rows.Count; i++)
                        {
                            Rebhea += dataGridView1.Rows[i - 1].Cells["Rebhea"].Value.ToDecimal().RoundBy(ProSetting.Round);
                            //Dis += Convert.ToDecimal(dataGridView1.Rows[i - 1].Cells[7].Value.Stringify());

                            totalrebh = Rebhea;
                        }
                    }
                    RebheaText.Text = Math.Round((totalrebh - Convert.ToDecimal(textBox3.Text)), ProSetting.Round, MidpointRounding.AwayFromZero).ToString("F" + ProSetting.Round);
                }
                catch { NesbaLblsNew.Text = textBox4.Text = "0"; }
            }
            catch
            {
            }
        }
        private void textBox10_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (char.IsLetter(e.KeyChar))
                e.Handled = true;
        }

        private void textBox10_MouseLeave(object sender, EventArgs e)
        {
            if (((TextBox)sender).Text == "")
                ((TextBox)sender).Text = "0";
        }


        void clear()
        {


            if (!keepbillDateChecked)
            {
                dateTimePicker1.ValueChanged -= dateTimePicker1_ValueChanged;
                dateTimePicker1.Value = DateTime.Today;
                dateTimePicker1.ValueChanged += dateTimePicker1_ValueChanged;
            }
            dateTimePicker1.Checked = keepbillDateChecked;
            billDateChecked = dateTimePicker1.Checked;

            AID = ""; AQty = "";
            CHKSendSms.Checked = false;
            panel13.Visible = false;
            try
            {
                ChkDelivery.Checked = false;

                ItemCombo.SelectedIndex = 0;
            }
            catch { }
            //button3.Visible = false;
            //button6.Visible = false;
            try
            {
                dtServices.Rows.Clear();
            }
            catch { }
            //BillNoT.Text = "";
            ChkAddBillPointsAsDiscount.Checked = false;
            textBox1.Text = "";
            textBox3.Text = "0";
            if (BeanKindCom.SelectedIndex == 0)
            {
                textBox4.Text = NesbaLblsNew.Text = ProSetting.Discount.Stringify();
            }
            else
            {
                textBox4.Text = NesbaLblsNew.Text = "0.00";
            }

            DarebaText.Text = ProSetting.ItemsTax ? "0.00" : ProSetting.Dareba.Stringify();
            textBox5.Text = "0";
            textBox11.Text = "0";
            RebheaText.Text = "0";
            //ClientCombo.SelectedItem = ClientCombo.Items[0];
            //BillKindCom.SelectedItem = BillKindCom.Items[1];
            //DarebaText.Text = "0";
            try
            {
                if (dataGridView1.Rows.Count == 0)
                {
                    dataGridView1.Rows.Add();
                }
            }
            catch
            {
            }
            textBox19.Text = "0";

            textBox14.Text = "0";
            try
            {
                _dcItemComponents.Clear();
            }
            catch
            {
            }
            ItemsVATTotalValue = 0;
            TransportValue.Text = "0";
            textBox20.Text = "0";
            dateTimePicker2.Value = DateTime.Today;
            try
            {
                if (!ProSetting.PinDataAfterSave)
                {
                    if (ProSetting.ChooseClient)
                    {
                        sc.LoadUserStores3(StoreCombo);
                    }
                    else
                        sc.LoadUserStores(StoreCombo);

                    SellerCombo.SelectedIndex = 0;

                    try
                    {
                        if (!ProSetting.OrderClientsByName)
                        {
                            ClientCombo.OrderAsc();
                            ClientCombo.SelectedIndex = 0;
                        }
                        else
                            ClientCombo.SelectedValue = dtClients.Rows[0]["Id"].ToInt32();


                    }
                    catch
                    {
                        ClientCombo.SelectedIndex = 0;
                    }
                }
                StoreCombo.SelectedIndex = ProSetting.PinDataAfterSave ? StoreCombo.SelectedIndex : 0;
            }
            catch
            {
            }

            ClientCombo.Focus();


            LoadClientRassed();
            //listBox2.Visible = false;

            try
            {
                dataGridView1.Focus();
                if (ProSetting.BarcodeOrItem == "كود الصنف")
                {
                    dataGridView1.Focus();
                    dataGridView1.CurrentCell = dataGridView1.Rows[0].Cells[1];
                    dataGridView1.CellEndEdit -= dataGridView1_CellEndEdit;
                    dataGridView1.CellBeginEdit -= dataGridView1_CellBeginEdit;
                    dataGridView1.CellFormatting -= dataGridView1_CellFormatting;
                    dataGridView1.CellValidating -= dataGridView1_CellValidating;
                    try
                    {

                        dataGridView1.BeginEdit(true);
                    }
                    catch
                    {
                    }

                    dataGridView1.CellEndEdit += dataGridView1_CellEndEdit;
                    dataGridView1.CellBeginEdit += dataGridView1_CellBeginEdit;
                    dataGridView1.CellFormatting += dataGridView1_CellFormatting;
                    dataGridView1.CellValidating += dataGridView1_CellValidating;
                }
                else if (ProSetting.BarcodeOrItem == "اسم الصنف")
                {
                    dataGridView1.Focus();
                    dataGridView1.CurrentCell = dataGridView1.Rows[0].Cells[2];
                    dataGridView1.CurrentCell.Selected = true;
                    //dataGridView1.BeginEdit(true);
                }
                else
                {
                    if (!ProSetting.ChooseClient)
                    {
                        dataGridView1.Focus();
                        dataGridView1.CurrentCell = dataGridView1.Rows[0].Cells[_lastAddItemColumnIndex];
                        dataGridView1.CurrentCell.Selected = true;
                    }
                    else
                    {
                        ClientCombo.SelectAll();
                        ClientCombo.Focus();
                    }
                }
            }
            catch
            {
            }

            try
            {

                if (ProSetting.LinkBilltypeWithCashFromClient)
                {
                    TxtDeliveredAmountFromClient.Text = "0.00";
                }
                else
                {
                    SetPayTypeSettings();
                }
            }
            catch
            {
            }

            ChkAddBillPointsAsDiscount.Checked = ChkDetect.Checked =
                RBKeepListSalesAsSaved.Checked = RBUpdateListSalesToNewOne.Checked = false;
        }
        struct Items
        {
            public Byte[] Photo;
            public string Barcode;
            public string ItemName;
            public string ClientName;
            public string BillNo;
        }

        private void button3_Click(object sender, EventArgs e)
        {
            saveBill(true, false);
        }

        private void textBox11_TextChanged(object sender, EventArgs e)
        {
            try
            {
                //x = Convert.ToDecimal((textBox10.Text).Stringify());
                //y = Convert.ToDecimal((textBox11.Text).Stringify());

                //textBox10.Text = textBox11.Text;
            }
            catch
            {
            }
        }

        private void textBox5_TextChanged(object sender, EventArgs e)
        {
            try
            {

                decimal Trans = Math.Round((Convert.ToDecimal(TransportValue.Text)), ProSetting.Round, MidpointRounding.AwayFromZero);

                TotAfter = (Math.Round(Trans + Convert.ToDecimal(textBox5.Text), ProSetting.Round, MidpointRounding.AwayFromZero));
                textBox11.Text = Math.Round(((TotAfter + ((TotAfter / 100) * Convert.ToDecimal(textBox20.Text)))), ProSetting.Round, MidpointRounding.AwayFromZero).ToString("F" + ProSetting.Round);
                DarebaText_TextChanged(sender, e);
                if (ChkAddBillPointsAsDiscount.Checked)
                    ChkAddBillPointsAsDiscount_CheckedChanged(sender, e);
            }
            catch { }
        }

        private void button2_Click(object sender, EventArgs e)
        {
            if (dataGridView1.Rows.Count > 1)
            {
                if (MessageBox.Show(Tr.M1.m0259, Tr.M1.alert, MessageBoxButtons.OKCancel, MessageBoxIcon.Exclamation) == DialogResult.OK)
                {

                    try
                    {
                        dataGridView1.Rows.Clear();
                    }
                    catch { }
                    clear();
                }
            }
            else
            {


                try
                {
                    dataGridView1.Rows.Clear();
                }
                catch { }
                clear();

            }
        }

        private void button1_Click_1(object sender, EventArgs e)
        {
            if (dataGridView1.Rows.Count > 1)
            {
                if (MessageBox.Show(Tr.M2.m522, Tr.M1.alert, MessageBoxButtons.OKCancel, MessageBoxIcon.Exclamation) == DialogResult.OK)
                {
                    this.Close();
                }
            }
            else
            {
                this.Close();
            }
        }

        private void button4_Click(object sender, EventArgs e)
        {
            try
            {
                if (dataGridView1.SelectedCells.Count > 0)
                {
                    if (MessageBox.Show(Tr.M2.m542, Tr.M1.sure, MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
                    {
                        try
                        {
                            if (ProSetting.SkipQuantityAssemblingOfAnItem)
                            {
                                var currentitemID = dataGridView1.Rows[dataGridView1.CurrentRow.Index]
                                                .Cells["ItemID"].Value.ToInt32();
                                var currentitemStoreID = dataGridView1.Rows[dataGridView1.CurrentRow.Index]
                                   .Cells["StoreID"].Value.ToInt32();
                                var deletedItem = new KeyValuePair<int, int>(currentitemID, currentitemStoreID);

                                _dcItemComponents.Remove(deletedItem);
                            }
                        }
                        catch (Exception ex)
                        {
                        }
                        dataGridView1.Rows.Remove(dataGridView1.CurrentRow);

                        dataGridView1.CurrentCell = dataGridView1.Rows[dataGridView1.Rows.Count - 1].Cells["Barcode"];
                        if (ProSetting.BarcodeOrItem == "كود الصنف")
                        {
                            dataGridView1.CurrentCell = dataGridView1.Rows[dataGridView1.Rows.Count - 1].Cells["Barcode"];
                            dataGridView1.CellEndEdit -= dataGridView1_CellEndEdit;
                            dataGridView1.CellBeginEdit -= dataGridView1_CellBeginEdit;
                            dataGridView1.CellFormatting -= dataGridView1_CellFormatting;
                            dataGridView1.CellValidating -= dataGridView1_CellValidating;
                            try
                            {

                                dataGridView1.BeginEdit(true);
                            }
                            catch
                            {
                            }

                            dataGridView1.CellEndEdit += dataGridView1_CellEndEdit;
                            dataGridView1.CellBeginEdit += dataGridView1_CellBeginEdit;
                            dataGridView1.CellFormatting += dataGridView1_CellFormatting;
                            dataGridView1.CellValidating += dataGridView1_CellValidating;
                        }
                        else if (ProSetting.BarcodeOrItem == "اسم الصنف")
                        {
                            dataGridView1.CurrentCell = dataGridView1.Rows[dataGridView1.Rows.Count - 1].Cells[2];
                        }
                        else
                        {
                            var index = dataGridView1.CurrentRow.Index + 1 >= dataGridView1.RowCount
                                            ? dataGridView1.RowCount - 1
                                            : dataGridView1.CurrentRow.Index + 1;

                            var colIndex = index == dataGridView1.RowCount - 1
                                ? _lastAddItemColumnIndex
                                : dataGridView1.CurrentCell.ColumnIndex;

                            dataGridView1.CurrentCell = dataGridView1.Rows[index].Cells[colIndex];
                            dataGridView1.CurrentCell.Selected = true;
                        }
                        ItemIDbyBarcode = ""; ItemBarcode = ""; underDelev = false; Qnt = 1;
                    }
                }
            }
            catch { }
        }

        public static string ItemBarcode = "";
        private void FrmSalesPiont_KeyDown(object sender, KeyEventArgs e)
        {
            try
            {
                var keyPressed = e.Control ? (Keys.Control | e.KeyCode) : e.KeyCode;
                var shortcut = _keyshortcuts.FirstOrDefault(shrt => shrt.ShortcutKeys.FirstOrDefault(kshrt => kshrt == keyPressed) == keyPressed);
                if (shortcut != null && !shortcut.Active)
                    return;
            }
            catch (Exception exc)
            {
            }
            if (!e.Control && e.KeyCode == Keys.F1)
            {

                try
                {
                    dataGridView1.CurrentCell = dataGridView1.Rows[0].Cells[1];
                }
                catch { }
                button3_Click(sender, e);
            }
            else if (e.KeyCode == Keys.F2)
            {

                if (ProSetting.DeleteSale)
                {
                    button4_Click(sender, e);
                }
            }
            else if (e.KeyCode == Keys.F3)
            {
                if (ProSetting.BackSale)
                {
                    button2_Click(sender, e);
                }
            }
            else if (e.KeyCode == Keys.F4)
            {
                button1_Click_1(sender, e);
            }
            else if (e.KeyCode == Keys.F5)
            {
                button5_Click(sender, e);
            }
            else if (e.KeyCode == Keys.F6)
            {
                button6_Click(sender, e);
            }
            else if (e.KeyCode == Keys.F7)
            {
                button7_Click(sender, e);
                //string x = textBox9.Text;
                //textBox9.Text = textBox12.Text;
                //textBox12.Text = x;
            }
            else if (e.KeyCode == Keys.F8)
            {
                button8_Click(sender, e);
            }
            else if (!e.Control && e.KeyCode == Keys.F9)
            {
                button13_Click(sender, e);
            }
            else if (e.KeyCode == Keys.Space)
            {
                //if (dataGridView1.CurrentCell.ColumnIndex == 2)
                //{

                //    FrmSearchItem f = new FrmSearchItem();
                //    f.ShowDialog();

                //    dataGridView1.CurrentRow.Cells[1].Value = dataClass.Baracode;
                //}
            }
            else if (e.KeyCode == Keys.F10)
            {
                if (panel1.Enabled)
                {
                    button14_Click(sender, e);
                }

            }
            else if (e.KeyCode == Keys.F11 && !dataGridView1.IsCurrentCellInEditMode)
            {
                if (dataGridView1.Enabled)
                {
                    FrmMainNEW.Selected = false; FrmMainNEW.ItemName = "";
                    _lastAddItemColumnIndex = 2;
                    FrmItemContainSearch f = new FrmItemContainSearch(
                        StoreCombo.SelectedValue.Stringify(),
                        ClientCombo.SelectedValue.Stringify()
                        , BillKindCom.Text, StoreCombo.Text);
                    f.ShowDialog(this);

                    if (FrmMainNEW.Selected && FrmMainNEW.ItemName != "")
                    {
                        if (dataGridView1.CurrentRow == null)
                        {
                            dataGridView1.CurrentCell = dataGridView1.Rows[dataGridView1.Rows.Count - 1].Cells[2];
                        }
                        int xIndex = dataGridView1.CurrentRow.Index;
                        dataGridView1.CurrentRow.Cells["ItemName"].Value = FrmMainNEW.ItemName;

                        dataGridView1.NotifyCurrentCellDirty(false);
                        dataGridView1.EndEdit();
                        dataGridView1.NotifyCurrentCellDirty(true);
                        if (xIndex > 0)
                        {
                            try
                            {
                                if (dataGridView1.Rows[dataGridView1.Rows.Count - 2].Cells[2].Value == null)
                                {
                                    dataGridView1.Rows.Remove(dataGridView1.Rows[dataGridView1.Rows.Count - 2]);
                                }
                            }
                            catch { }
                        }
                        dataGridView1.NotifyCurrentCellDirty(false);

                        try
                        {
                            decimal TB = 0;
                            decimal Rebhea = 0;

                            for (int i = 1; i < dataGridView1.Rows.Count; i++)
                            {
                                TB += Math.Round((Convert.ToDecimal(dataGridView1.Rows[i - 1].Cells["TotalPrice"].Value.Stringify())), ProSetting.Round, MidpointRounding.AwayFromZero);
                                Rebhea += Math.Round((Convert.ToDecimal(dataGridView1.Rows[i - 1].Cells["Rebhea"].Value.Stringify())), ProSetting.Round, MidpointRounding.AwayFromZero);
                                //Dis += Convert.ToDecimal(dataGridView1.Rows[i - 1].Cells[7].Value.Stringify());

                                Total = TB;
                                totalrebh = Rebhea;
                                amu = false;
                            }
                            textBox5.Text = Math.Round(Total
                                , ProSetting.Round
                                , MidpointRounding.AwayFromZero)
                                .ToString("F" + ProSetting.Round);

                            RebheaText.Text = Math.Round(totalrebh - Convert.ToDecimal(textBox3.Text), ProSetting.Round, MidpointRounding.AwayFromZero).ToString("F" + ProSetting.Round);
                        }
                        catch { }
                        try
                        {
                            if (ProSetting.OnQuantity)
                            {
                                dataGridView1.CurrentCell = dataGridView1.Rows[dataGridView1.Rows.Count - 2].Cells["Quantity"];
                                dataGridView1.CellEndEdit -= dataGridView1_CellEndEdit;
                                dataGridView1.CellBeginEdit -= dataGridView1_CellBeginEdit;
                                dataGridView1.CellFormatting -= dataGridView1_CellFormatting;
                                dataGridView1.CellValidating -= dataGridView1_CellValidating;
                                try
                                {

                                    dataGridView1.BeginEdit(true);
                                }
                                catch
                                {
                                }

                                dataGridView1.CellEndEdit += dataGridView1_CellEndEdit;
                                dataGridView1.CellBeginEdit += dataGridView1_CellBeginEdit;
                                dataGridView1.CellFormatting += dataGridView1_CellFormatting;
                                dataGridView1.CellValidating += dataGridView1_CellValidating;
                            }
                            else
                            {
                                if (ProSetting.BarcodeOrItem == "كود الصنف")
                                {
                                    dataGridView1.CurrentCell = dataGridView1.Rows[dataGridView1.Rows.Count - 1].Cells["Barcode"];
                                    SendKeys.Send("{ESC}");

                                }
                                else if (ProSetting.BarcodeOrItem == "اسم الصنف")
                                {
                                    dataGridView1.CurrentCell = dataGridView1.Rows[dataGridView1.Rows.Count - 1].Cells[2];
                                    SendKeys.Send("{ESC}");
                                }
                                else
                                {
                                    var index = dataGridView1.CurrentRow.Index + 1 >= dataGridView1.RowCount
                                           ? dataGridView1.RowCount - 1
                                           : dataGridView1.CurrentRow.Index + 1;

                                    var colIndex = index == dataGridView1.RowCount - 1
                                        ? _lastAddItemColumnIndex
                                        : dataGridView1.CurrentCell.ColumnIndex;

                                    dataGridView1.CurrentCell = dataGridView1.Rows[index].Cells[colIndex];
                                    dataGridView1.CurrentCell.Selected = true;

                                    SendKeys.Send("{ESC}");
                                }

                            }
                        }
                        catch { }
                    }

                }

            }
            else if (e.KeyCode == Keys.F12)
            {
                if (ProSetting.SearchSale)
                {
                    button12_Click(sender, e);
                }
            }
            else if (e.Control && e.KeyCode == Keys.F1 && ProSetting.TerminalPackage)
            {
                if (ProSetting.TerminalSettings == null)
                {
                    MessageBox.Show(Tr.M1.m0249, Tr.M1.error, MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return;
                }
                PayViaTerminal();
                saveBill(true, true);
            }
            else if (e.Control && e.KeyCode == Keys.F9 && ProSetting.TerminalPackage)
            {
                if (ProSetting.TerminalSettings == null)
                {
                    MessageBox.Show(Tr.M1.m0249, Tr.M1.error, MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return;
                }
                PayViaTerminal();
                saveBill(false, true);
            }
            else if (e.KeyCode == Keys.Add)
            {
                try
                {
                    e.Handled = true;
                    dataGridView1.CurrentCell = dataGridView1.Rows[dataGridView1.Rows.Count - 2].Cells["Quantity"];
                    dataGridView1.Rows[dataGridView1.Rows.Count - 2].Cells["Quantity"].Selected = true;
                    dataGridView1.BeginEdit(true);
                }
                catch { }
            }
            else if (e.KeyCode == Keys.Enter)
            {
                try
                {
                    //if (string.IsNullOrEmpty(ActiveControl.Name))
                    //    dataGridView1.Focus();

                    if (dataGridView1.Focused || string.IsNullOrEmpty(ActiveControl.Name))
                    {
                        if ((dataGridView1.CurrentCell.OwningColumn.Name == "ItemName"))
                        {
                            e.SuppressKeyPress = true;
                            if (dataGridView1.CurrentRow.Cells[2].Value != null)
                            {
                                if (ProSetting.OnQuantity)
                                {
                                    dataGridView1.CurrentCell = dataGridView1.Rows.Count == 2 ? dataGridView1.Rows[0].Cells["Quantity"] : dataGridView1.Rows[dataGridView1.Rows.Count - 2].Cells["Quantity"];
                                    dataGridView1.CellEndEdit -= dataGridView1_CellEndEdit;
                                    dataGridView1.CellBeginEdit -= dataGridView1_CellBeginEdit;
                                    dataGridView1.CellFormatting -= dataGridView1_CellFormatting;
                                    dataGridView1.CellValidating -= dataGridView1_CellValidating;
                                    try
                                    {

                                        dataGridView1.BeginEdit(true);
                                    }
                                    catch
                                    {
                                    }

                                    dataGridView1.CellEndEdit += dataGridView1_CellEndEdit;
                                    dataGridView1.CellBeginEdit += dataGridView1_CellBeginEdit;
                                    dataGridView1.CellFormatting += dataGridView1_CellFormatting;
                                    dataGridView1.CellValidating += dataGridView1_CellValidating;
                                }
                            }
                        }
                        else
                        {
                            if (dataGridView1.CurrentCell.OwningColumn.Name == "Barcode")
                            {
                                if (ProSetting.Barcode)
                                {
                                    try
                                    {
                                        if (StoreCombo.Text == "<-اختر->")
                                        {
                                            MessageBox.Show(Tr.M1.m0299);
                                        }
                                        else
                                        {
                                            e.SuppressKeyPress = true;
                                            ItemIDbyBarcode = ""; decimal Buy = 0; ItemBarcode = "";
                                            _lastAddItemColumnIndex = 1;
                                            FrmSearchBarcode f = new FrmSearchBarcode(StoreCombo.SelectedValue.Stringify());
                                            f.ShowDialog();
                                            if (ItemIDbyBarcode == "")
                                            {
                                                return;
                                            }
                                            if (ItemBarcode == "")
                                            {
                                                return;
                                            }
                                            itemAdded = true;
                                            var viewCount = dataGridView1.RowCount - 1;
                                            dataGridView1.Rows[viewCount].Cells["Barcode"].Value = ItemBarcode;
                                            itemAdded = viewCount < dataGridView1.RowCount - 1;
                                            dataGridView1.NotifyCurrentCellDirty(false);
                                            dataGridView1.EndEdit();
                                            dataGridView1.NotifyCurrentCellDirty(true);
                                            dataGridView1.NotifyCurrentCellDirty(false);

                                            try
                                            {
                                                if (!ProSetting.ShowItemImage)
                                                {
                                                    CalculatePreferredWidthForColumns();
                                                    //dataGridView1.AutoResizeColumns(DataGridViewAutoSizeColumnsMode.AllCells);
                                                }
                                            }
                                            catch
                                            {
                                            }
                                            try
                                            {
                                                if (ProSetting.OnQuantity && itemAdded)
                                                {
                                                    dataGridView1.CurrentCell =
                                                        dataGridView1.Rows[dataGridView1.Rows.Count - 2].Cells["Quantity"];
                                                    dataGridView1.CellEndEdit -= dataGridView1_CellEndEdit;
                                                    dataGridView1.CellBeginEdit -= dataGridView1_CellBeginEdit;
                                                    dataGridView1.CellFormatting -= dataGridView1_CellFormatting;
                                                    dataGridView1.CellValidating -= dataGridView1_CellValidating;
                                                    try
                                                    {

                                                        dataGridView1.BeginEdit(true);
                                                    }
                                                    catch
                                                    {
                                                    }

                                                    dataGridView1.CellEndEdit += dataGridView1_CellEndEdit;
                                                    dataGridView1.CellBeginEdit += dataGridView1_CellBeginEdit;
                                                    dataGridView1.CellFormatting += dataGridView1_CellFormatting;
                                                    dataGridView1.CellValidating += dataGridView1_CellValidating;
                                                }
                                                else
                                                {
                                                    if (ProSetting.BarcodeOrItem == "كود الصنف")
                                                    {
                                                        dataGridView1.CurrentCell = dataGridView1.Rows[dataGridView1.Rows.Count - 1].Cells["Barcode"];
                                                        if (!itemAdded && !ProSetting.OnQuantity)
                                                            SendKeys.Send("{ENTER}");
                                                        dataGridView1.CellEndEdit -= dataGridView1_CellEndEdit;
                                                        dataGridView1.CellBeginEdit -= dataGridView1_CellBeginEdit;
                                                        dataGridView1.CellFormatting -= dataGridView1_CellFormatting;
                                                        dataGridView1.CellValidating -= dataGridView1_CellValidating;
                                                        try
                                                        {

                                                            dataGridView1.BeginEdit(true);
                                                        }
                                                        catch
                                                        {
                                                        }

                                                        dataGridView1.CellEndEdit += dataGridView1_CellEndEdit;
                                                        dataGridView1.CellBeginEdit += dataGridView1_CellBeginEdit;
                                                        dataGridView1.CellFormatting += dataGridView1_CellFormatting;
                                                        dataGridView1.CellValidating += dataGridView1_CellValidating;

                                                    }
                                                    else if (ProSetting.BarcodeOrItem == "اسم الصنف")
                                                    {
                                                        dataGridView1.CurrentCell = dataGridView1.Rows[dataGridView1.Rows.Count - 1].Cells[2];
                                                    }
                                                    else
                                                    {

                                                        var index = dataGridView1.CurrentRow.Index + 1 >= dataGridView1.RowCount
                                                            ? dataGridView1.RowCount - 1
                                                            : dataGridView1.CurrentRow.Index + 1;

                                                        var colIndex = index == dataGridView1.RowCount - 1
                                                            ? _lastAddItemColumnIndex
                                                            : dataGridView1.CurrentCell.ColumnIndex;

                                                        dataGridView1.CurrentCell = dataGridView1.Rows[index].Cells[colIndex];
                                                        dataGridView1.CurrentCell.Selected = true;
                                                    }
                                                }
                                            }
                                            catch { }
                                            //dataGridView1.CurrentCell = dataGridView1.CurrentRow.Cells["Quantity"];
                                            //dataGridView1.BeginEdit(true);
                                            try
                                            {
                                                decimal TB = 0;
                                                decimal Rebhea = 0;
                                                for (int i = 1; i < dataGridView1.Rows.Count; i++)
                                                {
                                                    TB += Math.Round((Convert.ToDecimal(dataGridView1.Rows[i - 1].Cells["TotalPrice"].Value.Stringify()))
                                                        , ProSetting.Round
                                                        , MidpointRounding.AwayFromZero);
                                                    Rebhea += Math.Round((Convert.ToDecimal(dataGridView1.Rows[i - 1].Cells["Rebhea"].Value.Stringify())), ProSetting.Round, MidpointRounding.AwayFromZero);

                                                    Total = TB;
                                                    totalrebh = Rebhea;
                                                    amu = false;
                                                }
                                                textBox5.Text = Math.Round(Total
                                                    , ProSetting.Round
                                                    , MidpointRounding.AwayFromZero).ToString("F" + ProSetting.Round);
                                                RebheaText.Text = Math.Round(totalrebh - Convert.ToDecimal(textBox3.Text), ProSetting.Round, MidpointRounding.AwayFromZero).ToString("F" + ProSetting.Round);
                                                Total = 0;
                                                totalrebh = 0;
                                            }
                                            catch { }
                                            try
                                            {
                                                decimal weight = 0;
                                                for (int i = 0; i < dataGridView1.Rows.Count - 1; i++)
                                                {
                                                    decimal Qnt = Convert.ToDecimal(dataGridView1.Rows[i].Cells[5].Value.Stringify());
                                                    decimal UnitWeight = Convert.ToDecimal(Codes.Search2("select isnull(Weight,0) from Units where Name='" + dataGridView1.Rows[i].Cells[4].Value.Stringify() + "'").Rows[0][0].Stringify());
                                                    weight += Qnt * UnitWeight;
                                                }
                                                textBox2.Text = Math.Round(weight, ProSetting.Round, MidpointRounding.AwayFromZero).ToString("F" + ProSetting.Round);
                                            }
                                            catch { }
                                        }
                                    }
                                    catch { }
                                    try
                                    {
                                        decimal weight = 0;
                                        for (int i = 0; i < dataGridView1.Rows.Count - 1; i++)
                                        {
                                            decimal Qnt = Math.Round((Convert.ToDecimal(dataGridView1.Rows[i].Cells[5].Value.Stringify())), ProSetting.Round, MidpointRounding.AwayFromZero);
                                            decimal UnitWeight = Math.Round((Convert.ToDecimal(Codes.Search2("select isnull(Weight,0) from Units where Name='" + dataGridView1.Rows[i].Cells[4].Value.Stringify() + "'").Rows[0][0].Stringify())), ProSetting.Round, MidpointRounding.AwayFromZero);
                                            weight += Qnt * UnitWeight;
                                        }
                                        textBox2.Text = Math.Round(weight, ProSetting.Round, MidpointRounding.AwayFromZero).ToString("F" + ProSetting.Round);
                                    }
                                    catch { }
                                }
                                else
                                {
                                    e.SuppressKeyPress = true;
                                    if (ProSetting.BarcodeOrItem == "كود الصنف")
                                    {
                                        dataGridView1.CellEndEdit -= dataGridView1_CellEndEdit;
                                        dataGridView1.CellBeginEdit -= dataGridView1_CellBeginEdit;
                                        dataGridView1.CellFormatting -= dataGridView1_CellFormatting;
                                        dataGridView1.CellValidating -= dataGridView1_CellValidating;
                                        try
                                        {

                                            dataGridView1.BeginEdit(true);
                                        }
                                        catch
                                        {
                                        }

                                        dataGridView1.CellEndEdit += dataGridView1_CellEndEdit;
                                        dataGridView1.CellBeginEdit += dataGridView1_CellBeginEdit;
                                        dataGridView1.CellFormatting += dataGridView1_CellFormatting;
                                        dataGridView1.CellValidating += dataGridView1_CellValidating;
                                    }

                                    //if (ProSetting.OnQuantity && newRowbyBarcode)
                                    //{
                                    //    newRowbyBarcode = false;
                                    //    e.SuppressKeyPress = true;
                                    //    dataGridView1.CurrentCell = dataGridView1.Rows[dataGridView1.Rows.Count - 2].Cells["Quantity"];
                                    //    dataGridView1.BeginEdit(true);
                                    //}
                                    //else if (dataGridView1.CurrentRow.Cells[0].Value == null)
                                    //{
                                    //    try
                                    //    {
                                    //        if (ProSetting.BarcodeOrItem == "كود الصنف")
                                    //        {
                                    //            dataGridView1.CurrentCell = dataGridView1.Rows[dataGridView1.Rows.Count - 1].Cells["Barcode"];

                                    //        }
                                    //        else if (ProSetting.BarcodeOrItem == "اسم الصنف")
                                    //        {
                                    //            dataGridView1.CurrentCell = dataGridView1.Rows[dataGridView1.Rows.Count - 1].Cells["ItemName"];
                                    //            dataGridView1.Rows[dataGridView1.Rows.Count - 1].Cells["ItemName"].Selected = true;

                                    //        }
                                    //        else
                                    //        {
                                    //            var index = dataGridView1.CurrentRow.Index + 1 >= dataGridView1.RowCount ? dataGridView1.CurrentRow.Index : dataGridView1.CurrentRow.Index + 1;
                                    //            dataGridView1.CurrentCell = dataGridView1.Rows[index].Cells[dataGridView1.CurrentCell.ColumnIndex];
                                    //        }
                                    //    }
                                    //    catch { }
                                    //}
                                }
                            }
                            else if (dataGridView1.CurrentCell.OwningColumn.Name == "Quantity")
                            {
                                if (!ProSetting.Qnt && ProSetting.OnQuantity)
                                {
                                    e.SuppressKeyPress = true;
                                    dataGridView1.CellEndEdit -= dataGridView1_CellEndEdit;
                                    dataGridView1.CellBeginEdit -= dataGridView1_CellBeginEdit;
                                    try
                                    {

                                        dataGridView1.BeginEdit(true);
                                    }
                                    catch
                                    {
                                    }
                                    dataGridView1.CellEndEdit += dataGridView1_CellEndEdit;
                                    dataGridView1.CellBeginEdit += dataGridView1_CellBeginEdit;
                                }
                            }
                            else if (dataGridView1.CurrentCell.RowIndex == dataGridView1.RowCount - 1)
                            {
                                e.SuppressKeyPress = true;
                                try
                                {
                                    if (ProSetting.BarcodeOrItem == "كود الصنف")
                                    {
                                        dataGridView1.CurrentCell = dataGridView1.Rows[dataGridView1.Rows.Count - 1].Cells["Barcode"];

                                    }
                                    else if (ProSetting.BarcodeOrItem == "اسم الصنف")
                                    {
                                        dataGridView1.CurrentCell = dataGridView1.Rows[dataGridView1.Rows.Count - 1].Cells[2];
                                    }
                                    else
                                    {
                                        var index = dataGridView1.CurrentRow.Index + 1 >= dataGridView1.RowCount
                                                            ? dataGridView1.RowCount - 1
                                                            : dataGridView1.CurrentRow.Index + 1;
                                        var colIndex = index == dataGridView1.RowCount - 1
                                            ? _lastAddItemColumnIndex
                                            : dataGridView1.CurrentCell.ColumnIndex;

                                        dataGridView1.CurrentCell = dataGridView1.Rows[index].Cells[colIndex];
                                        dataGridView1.CurrentCell.Selected = true;
                                    }
                                }
                                catch { }
                            }
                            else
                            {
                                e.SuppressKeyPress = true;
                                //try
                                //{
                                //    if (ProSetting.BarcodeOrItem == "كود الصنف")
                                //    {
                                //        dataGridView1.CurrentCell = dataGridView1.Rows[dataGridView1.Rows.Count - 1].Cells["Barcode"];

                                //    }
                                //    else if (ProSetting.BarcodeOrItem == "اسم الصنف")
                                //    {
                                //        dataGridView1.CurrentCell = dataGridView1.Rows[dataGridView1.Rows.Count - 1].Cells["ItemName"];
                                //        dataGridView1.Rows[dataGridView1.Rows.Count - 1].Cells["ItemName"].Selected = true;

                                //    }
                                //    else
                                //    {
                                //        var index = dataGridView1.CurrentRow.Index + 1 >= dataGridView1.RowCount ? dataGridView1.CurrentRow.Index : dataGridView1.CurrentRow.Index + 1;
                                //        dataGridView1.CurrentCell = dataGridView1.Rows[index].Cells[dataGridView1.CurrentCell.ColumnIndex];
                                //    }
                                //}
                                //catch { }
                            }
                        }
                    }
                    else
                    {
                        if (!ClientCombo.Focused
                            && !listBox1.Focused
                            && !listBox2.Focused
                            && !StoreCombo.Focused
                            && !ItemCombo.Focused
                            && !TxtClientCode.Focused
                            && !numericUpDown2.Focused)
                        {
                            e.SuppressKeyPress = true;
                        }
                    }
                    //if (ChkAddBillPointsAsDiscount.Checked)
                    //    ChkAddBillPointsAsDiscount_CheckedChanged(sender, e);
                }
                catch { }
            }
            else if (e.Control && e.KeyCode == Keys.R)
            {
                if (btnClientsPointEshar.Visible)
                    btnClientsPointEshar.PerformClick();
            }
            else if (e.Control && e.KeyCode == Keys.B)
            {
                if (btnBean.Visible)
                    btnBean.PerformClick();
            }
            else if (e.Control && e.KeyCode == Keys.P)
            {
                BtnPrint.PerformClick();
            }
        }

        private void button5_Click(object sender, EventArgs e)
        {
            RBDiscountValue.Checked = true;
            textBox3.Focus();
            textBox9.SelectAll();
        }

        private void button6_Click(object sender, EventArgs e)
        {
            RBDiscountPercentage.Checked = true;
            textBox4.Focus();
            textBox9.SelectAll();
        }

        private string lastPaymentFocus = "";
        private void button7_Click(object sender, EventArgs e)
        {
            // textBox9.Focus();
            // textBox9.SelectAll();

            this.textBox9.TextChanged -= new System.EventHandler(this.textBox9_TextChanged);
            this.textBox12.TextChanged -= new System.EventHandler(this.textBox9_TextChanged);
            if (string.IsNullOrEmpty(lastPaymentFocus)
                || (lastPaymentFocus == "V" && !textBox9.Focused))
            {
                if (lastPaymentFocus == "V"
                    || (lastPaymentFocus == ""
                        && Convert.ToDecimal(textBox12.Text) > 0))
                {
                    var change = textBox12.Text;
                    textBox12.Text = textBox9.Text;
                    textBox9.Text = change;
                }

                lastPaymentFocus = "C";
                textBox9.Focus();
                textBox9.SelectAll();
            }
            else
            {
                lastPaymentFocus = "V";
                var change = textBox9.Text;
                textBox9.Text = textBox12.Text;
                textBox12.Text = change;

                textBox12.Focus();
                textBox12.SelectAll();

            }

            textBox9.TextChanged += new System.EventHandler(this.textBox9_TextChanged);
            textBox12.TextChanged += new System.EventHandler(this.textBox9_TextChanged);
            textBox9_TextChanged(sender, e);
        }

        string discount = "0";
        string profit = "0";
        string MaxQty = "0";
        private void comboBox3_SelectedIndexChanged(object sender, EventArgs e)
        {
            //if (comboBox3.Focused)
            {
                try
                {
                    textBox8.Text = "";
                    LoadUnits(ItemCombo.SelectedValue.Stringify());
                    LoadWithUnits(UnitsCom.SelectedValue.Stringify(), ItemCombo.SelectedValue.Stringify());


                }
                catch { }
            }
        }

        public static string ItemIDbyBarcode;
        private void button11_Click(object sender, EventArgs e)
        {
            DataTable dti = new DataTable();
            dti = Codes.Search2("select ItemID,Quantity from Sales where BillNo ='" + BillNoT.Text + "'");
            for (int i = 1; i < dti.Rows.Count; i++)
            {
                dt = new DataTable();
                dt = Codes.Search("select * from Store where ItemID=" + dti.Rows[i][0].Stringify());

                if (dt.Rows.Count > 0)
                {
                    Codes.Edit2("update Store set Quantity=" + (Convert.ToDecimal(dt.Rows[0]["Quantity"].Stringify()) + Convert.ToDecimal(dti.Rows[i]["Quantity"].Stringify())).Stringify() + " where ItemID=" + dti.Rows[i][0].Stringify());
                }
                else if (dt.Rows.Count == 0)
                {
                    MessageBox.Show(Tr.M1.m0193, Tr.M1.error, MessageBoxButtons.OK, MessageBoxIcon.Warning);
                }

            }
            Codes.Delete2("delete from Sales where BillNo ='" + BillNoT.Text + "'");
            Codes.Delete2("delete from Bills where BillNo ='" + BillNoT.Text + "'");
            Codes.Delete2("delete from ClientMove where BillNo ='" + BillNoT.Text + "'");
            Codes.Delete2("delete from sss where BillNo ='" + BillNoT.Text + "'");
            button11.Visible = false;
        }

        private void textBox3_KeyPress(object sender, KeyPressEventArgs e)
        {
            try
            {
                if (((int)e.KeyChar >= 48 && (int)e.KeyChar <= 57) || (int)e.KeyChar == 46 || (int)e.KeyChar == 8)
                {
                    if ((int)e.KeyChar == 46)
                    {
                        if (textBox3.Text.Contains("."))
                            e.Handled = true;
                    }
                }
                else
                    e.Handled = true;
            }
            catch { }
        }

        private void textBox3_Leave(object sender, EventArgs e)
        {
            try
            {
                if (textBox3.Text == "")
                    textBox3.Text = "0";
            }
            catch { }
        }

        private void textBox4_KeyPress(object sender, KeyPressEventArgs e)
        {
            try
            {
                if (((int)e.KeyChar >= 48 && (int)e.KeyChar <= 57) || (int)e.KeyChar == 46 || (int)e.KeyChar == 8)
                {
                    if ((int)e.KeyChar == 46)
                    {
                        if (textBox4.Text.Contains("."))
                            e.Handled = true;
                    }

                }
                else
                {
                    //if ((ModifierKeys & Keys.Control) != Keys.Control)
                    e.Handled = true;
                }
            }
            catch { }
        }

        private void textBox4_Leave(object sender, EventArgs e)
        {
            try
            {
                if (textBox4.Text == "")
                    textBox4.Text = "0";
            }
            catch { }
        }

        private void textBox5_KeyPress(object sender, KeyPressEventArgs e)
        {
            try
            {
                if (((int)e.KeyChar >= 48 && (int)e.KeyChar <= 57) || (int)e.KeyChar == 46 || (int)e.KeyChar == 8)
                {
                    if ((int)e.KeyChar == 46)
                    {
                        if (textBox5.Text.Contains("."))
                            e.Handled = true;
                    }
                }
                else
                    e.Handled = true;
            }
            catch { }
        }

        private void textBox5_Leave(object sender, EventArgs e)
        {
            try
            {
                if (textBox5.Text == "")
                    textBox5.Text = "0";
            }
            catch { }
        }

        private void textBox10_Leave(object sender, EventArgs e)
        {
            try
            {
                if (textBox10.Text == "")
                    textBox10.Text = "0";
            }
            catch { }
        }

        private void button8_Click(object sender, EventArgs e)
        {
            FrmSalesQuickly f = new FrmSalesQuickly();
            f.Show();
        }

        string AddItemToUnderDelivery(DataGridViewRow dgvRow)
        {
            return @"
insert into UnderDelivery (BillNum,ItemID,Amount,Date,Stutes,StoreID,UnitName,ItMains,ItemName,LastBuyPrice,LastDeliverdAmount)
values('" + BillNu + @"',
" + dgvRow.Cells[0].Value + @",
" + Convert.ToDecimal(dgvRow.Cells[5].Value.Stringify()) + @",
'" + dateTimePicker1.Value.ToString("yyyy-MM-dd") + @"',
'" + false + @"',
" + dgvRow.Cells["StoreID"].Value + @",
'" + dgvRow.Cells[4].Value + @"',
" + dgvRow.Cells["mainIt"].Value + @",
'" + dgvRow.Cells["ItemName"].Value + " " + dgvRow.Cells["ItemColor"].Value + @"','0','0');";
        }
        string SetItemStoreQnt(string queryitems, DataGridViewRow dgvRow
            , object selledItemStoreId
            , object selledItemId)
        {
            return @"
Set @AddedUnderDelivery=0;
Set @StoreQuanity=(Select  Quantity From Store  where StoreID = '" + selledItemStoreId + @"' and ItemID='" + selledItemId + @"')
Set @ItemStoreQnt = @StoreQuanity
Set @SelledQnt = " + (dgvRow.Cells[5].Value.ToDecimal() * dgvRow.Cells["mainIt"].Value.ToDecimal()).NormalizeDecimalPlaces().Stringify();

        }
        string ValidateCollectedItemComponentsQnt(DataGridViewRow dgvRow,
            object selledItemStoreId,
            object selledItemId,
            string ClientMoveID)
        {
            return @" 
---------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------

IF OBJECT_ID('tempdb..#ItemComponents_" + ClientMoveID + "_" + dgvRow.Index + @"') IS NOT NULL 
DROP TABLE #ItemComponents_" + ClientMoveID + "_" + dgvRow.Index + @";

select ItemsColleting.* ,
ItemsUnit.ItemID, 
Items.Barcode, 
Items.Name as ItemName ,
(Select Name From Units Where ID =ItemsUnit.UnitId) as UnitName ,
(Select Count(*) From Store Where ItemID =ItemsUnit.ItemID 
and StoreId =  '" + selledItemStoreId + @"')  as AddedToStore
into #ItemComponents_" + ClientMoveID + "_" + dgvRow.Index + @" 
from ItemsColleting 
Join ItemsUnit 
on ItemsColleting.ChildItemUnitID = ItemsUnit.Id 
Join Items 
On ItemsUnit.ItemID= Items.ID
where ParentItemID='" + selledItemId + @"';
---------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------

IF OBJECT_ID('tempdb..#ItemComponentStoreQnt_" + ClientMoveID + "_" + dgvRow.Index + @"') IS NOT NULL 
DROP TABLE #ItemComponentStoreQnt_" + ClientMoveID + "_" + dgvRow.Index + @";

WITH ItemComponentsCTE_" + ClientMoveID + "_" + dgvRow.Index + @" AS (
SELECT Row_Number() Over (Order by Store.ItemId) as Rn ,
Store.ItemID,
Items.Name as ItemName,
Isnull((Select Price From Store Where ItemID = ParentItemID 
and StoreId =  '" + selledItemStoreId + @"'),0) as ItemBuyPrice,
Isnull(dbo.Store.Quantity,0) as OriginalComponentStoreQuantity ,
Qnt * ItMain as ComponentAssemblingQuantity,
(
(Case When ItemsUnit.ItMain = 1 
Then Isnull(dbo.Store.Price,0) Else ItemsUnit.BuyPrice END )
" + (!ProSetting.salesByList ? "" : @" * (1 - ((case when Isnull(IsInDiscountList,0) = 0 then 0 
else isnull(discountincoming,0) end) /100))") + @"
)
as ComponentBuyPrice,
FLOOR(Quantity/(Qnt * ItMain)) as ItemLargestAssembledQuantity,
Case When Sum(Qnt * ItMain) over (partition by store.ItemID) > Quantity then 0 else 1 end as QuantityAvailableStatus,
ItemsUnit.ItMain as ComponentItMain,
Isnull(ModifyBuyprice,1) as ModifyBuyprice ,
Isnull(masnyea,0) as masnyea,
Items.Khadamy
FROM dbo.ItemsColleting 
INNER JOIN ItemsUnit 
ON ItemsColleting.ChildItemUnitID = ItemsUnit.Id 
Join dbo.Store 
ON dbo.ItemsUnit.ItemID = dbo.Store.ItemID 
Join Items ON ItemsUnit.ItemID = Items.ID
where ParentITemID = '" + selledItemId + @"' 
and Store.StoreID = '" + selledItemStoreId + @"'
),
ValidItemComponentsCTE_" + ClientMoveID + "_" + dgvRow.Index + @" AS (
    SELECT
        Rn,
        ItemID,
        ItemName,
        ItemBuyPrice,
        OriginalComponentStoreQuantity -
            (SELECT SUM(ComponentAssemblingQuantity)
             FROM ItemComponentsCTE_" + ClientMoveID + "_" + dgvRow.Index + @" AS innerCTE
             WHERE innerCTE.ItemID = outerCTE.ItemID
               AND innerCTE.Rn <= outerCTE.Rn) 
            + ComponentAssemblingQuantity AS ComponentStoreQuantity,
        ComponentAssemblingQuantity,
        ComponentBuyPrice,
        ItemLargestAssembledQuantity,
        ComponentItMain,
        ModifyBuyprice,
        masnyea,
        Khadamy
    FROM ItemComponentsCTE_" + ClientMoveID + "_" + dgvRow.Index + @" AS outerCTE
)
SELECT
    Rn,
    ItemID,
    ItemName,
    ItemBuyPrice,
    ComponentStoreQuantity,
    ComponentAssemblingQuantity,
    ComponentBuyPrice,
    CASE 
        WHEN ComponentStoreQuantity < ComponentAssemblingQuantity THEN 0
        ELSE ItemLargestAssembledQuantity end as ItemLargestAssembledQuantity,
    CASE 
        WHEN ComponentStoreQuantity < ComponentAssemblingQuantity THEN 0
        ELSE 1
    END AS QuantityAvailableStatus,
    ComponentItMain,
    ModifyBuyprice,
    masnyea,
    Khadamy
into #ItemComponentStoreQnt_" + ClientMoveID + "_" + dgvRow.Index + @"
FROM ValidItemComponentsCTE_" + ClientMoveID + "_" + dgvRow.Index + @"
ORDER BY Rn;
---------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------
Set @IterCount = (Select Count(*) From #ItemComponentStoreQnt_" + ClientMoveID + "_" + dgvRow.Index + @")
Set @Iter=1;
if(@IterCount > 0)
Begin
    set @AssembledQnt =case when @StoreQuanity <=0 then  @SelledQnt else
    case when @StoreQuanity >= @SelledQnt  then 0 else  @SelledQnt - @StoreQuanity end end ;
    if(@AssembledQnt > 0)
    begin
        Set  @notAvailbleItems = null;
     
        select  @notAvailbleItems =stuff( 
        (select  char(10)  + '['+ ItemName + ']' 
        from #ItemComponents_" + ClientMoveID + "_" + dgvRow.Index + @"
        Where AddedToStore = 0
        for xml path ('')
         ), 1, 1, ''
        );

        if(isnull(@notAvailbleItems,'-') <> '-' or @notAvailbleItems <> '')
        Begin" + (ProSetting.UniderDelevItem
        ? /* IF */ @"
            set @AddedUnderDelivery=1;
            set @AddedUnderDeliveryItems = @AddedUnderDeliveryItems + '
            ' + 'عذراً , بعض مكونات هذا الصنف -> " + dgvRow.Cells["ItemName"].Value + @"
غير موجوده بالمخزن المضاف منه الصنف -> '+ (Select Name From Stores Where Id= '" + selledItemStoreId + @"')+ '
'
        + 'التفاصيل' + '
' +
            @notAvailbleItems;"
        :  /* Else */@"
            Select 'عذراً , بعض مكونات هذا الصنف -> " + dgvRow.Cells["ItemName"].Value + @" 
غير موجوده بالمخزن المضاف منه الصنف -> '+ (Select Name From Stores Where Id= '" + selledItemStoreId + @"')+ '
'
        + 'التفاصيل' + '
' + @notAvailbleItems," + dgvRow.Index + @",@ItemStoreQnt;
            return;    ") + @"
         
        END
    End
";
        }
        string ValidateCollectedItemQnt(DataGridViewRow dgvRow,
            string clientMoveID)
        {
            return (!ProSetting.StoreMinus
                ?  /*IF 1*/ @"
    if(@AddedUnderDelivery=0)
    Begin
        Set  @notAvailbleItems = null;
        Set @StoreQuanity = Case When @StoreQuanity >= 0 
        Then @StoreQuanity + (Select Min(ItemLargestAssembledQuantity) 
        From #ItemComponentStoreQnt_" + clientMoveID + "_" + dgvRow.Index + @" WHERE Khadamy = 0 )
        Else (Select Min(ItemLargestAssembledQuantity) From #ItemComponentStoreQnt_" + clientMoveID + "_" + dgvRow.Index + @" WHERE Khadamy = 0 ) End;
        
        select  @notAvailbleItems =stuff( 
        (select  char(10)  + '['+ ItemName + ']' +  char(10) 
        + 'الكمية المتاحة : ' + Cast(Cast((ComponentStoreQuantity/ComponentItMain) as money) as nvarchar(100)) +   char(10)  
        + 'الكمية المطلوبه : ' + Cast(Cast(((ComponentAssemblingQuantity/ComponentItMain) * @AssembledQnt)  as money) as nvarchar(100)) 
        from #ItemComponentStoreQnt_" + clientMoveID + "_" + dgvRow.Index + @"
        Where (QuantityAvailableStatus= 0 and @ItemStoreQnt <=0 and Khadamy = 0) 
or ((ComponentAssemblingQuantity* @AssembledQnt) > ComponentStoreQuantity and Khadamy =0)
            for xml path ('')
            ), 1, 1, ''
            );

        if(isnull(@notAvailbleItems,'-') <> '-' or @notAvailbleItems <> '')
        Begin" + (ProSetting.UniderDelevItem
        ? /*IF 2*/ @"
            set @AddedUnderDelivery=1;
            set @AddedUnderDeliveryItems = @AddedUnderDeliveryItems + '
' + '" + dgvRow.Cells["ItemName"].Value + @"';"

        :  /*ELSE 2*/ @"
            Select 'عذراً , الكمية المتاحه لبعض مكونات هذا الصنف [" + dgvRow.Cells["ItemName"].Value + @"] 
أقل من المطلوب  لتجميعه '+  '
التفاصيل : '  + @notAvailbleItems," + dgvRow.Index + @",
            @ItemStoreQnt;
            return; ") + @"
     
        END 
    END"
                                                                                          :  /*Else 1*/ @"");
        }
        string SetCollectedItemComponentsInsert(DataGridViewRow dgvRow,
            object selledItemStoreId,
            object selledItemId,
            string clientMoveID,
            string billDate,
            object selledItemTotalBuyPrice,
            object selledItemName,
            object selledItemUnitName,
            object selledItemTotalPrice,
            object selledItemUnitPrice)
        {
            return @"
    if( @AddedUnderDelivery=1)
    begin 
        insert into UnderDelivery (BillNum,ItemID,Amount,Date,Stutes,StoreID,UnitName,ItMains,ItemName,LastBuyPrice,LastDeliverdAmount)
        values(
        '" + BillNu + @"',
        " + dgvRow.Cells[0].Value + @",
        " + (Convert.ToDecimal(dgvRow.Cells[5].Value.Stringify())).ToString("F" + ProSetting.Round) + @",
        '" + dateTimePicker1.Value.ToString("yyyy-MM-dd") + @"',
        '" + false + "'," + dgvRow.Cells["StoreID"].Value.Stringify() + @",
        '" + dgvRow.Cells[4].Value.Stringify() + @"',
        " + dgvRow.Cells["mainIt"].Value.Stringify() + @",
        '" + dgvRow.Cells["ItemName"].Value + " " + dgvRow.Cells["ItemColor"].Value + @"','0','0'
               );
    end
    Else
    Begin
        if(@AssembledQnt > 0)
        begin            
            While (@Iter <= @IterCount)
            BEGIN
                Select @ComponentItemID =ItemID,
                @ComponentItemQnt= ComponentAssemblingQuantity * @AssembledQnt,
                @ComponentBuyPrice= ComponentBuyPrice,                
                @ComponenentoutcomePrice = ComponentBuyPrice*ComponentAssemblingQuantity* @AssembledQnt,
                @ComponentItemStoreQnt = ComponentStoreQuantity,
                @ComponentItMain = ComponentItMain,
                @KhadamyItem = Khadamy
                From #ItemComponentStoreQnt_" + clientMoveID + "_" + dgvRow.Index + @" Where Rn= @Iter;

                if(@KhadamyItem = 0 )
                beGin                            
                    INSERT INTO ItemsMove (ItemId, StoreId, IncomeQnt, IncomePrice, OutcomeQnt, 
                    OutcomePrice, LastQnt, LastIncomePrice, LastOutComePrice, Bayan, MoveDate, UserId, Time, Type)
                    Select @ComponentItemID,'" + selledItemStoreId + @"',
                    '0',0,@ComponentItemQnt, @ComponenentoutcomePrice,
                    Isnull((select Quantity from store where ItemID = @ComponentItemID and StoreID = '" +
                                                                                      selledItemStoreId + @"'),0), 
                    Isnull((select Price from store where ItemID =  @ComponentItemID and StoreID = '" +
                                                                                      selledItemStoreId +
                                                                                      @"'),0),
                    Isnull((select Price from Items where ID = @ComponentItemID and Items.Active = 1),0),
                    ('تجميع كمية لصنف [" + dgvRow.Cells[2].Value + "] فاتورة مبيعات رقم " +
                                                                                      BillNu +
                                                                                      @"' 
                    + ' تاريخ الفاتورة '  + '" + billDate + @"'
                    + ' اسم العميل " + ClientCombo.Text + @"')
                    ,Convert(varchar(10),GetDate(),101),
                    '" + ProSetting.UserIdLo + @"',Convert(varchar(10),GetDate(),108),'خروج';

                    Update Store Set Quantity = Isnull((select Quantity from store where ItemID= @ComponentItemID 
                                                 and StoreID='" + selledItemStoreId + @"'),0) - @ComponentItemQnt 
                    where StoreID = '" + selledItemStoreId + @"' and  ItemID= @ComponentItemID ;
                eNd

                if(@Iter = @IterCount)
                Begin                               
                    Select @ItemBuyPrice = Case When Max(Cast(ModifyBuyprice as smallint)) = 1  
                    then Sum(ComponentBuyPrice*ComponentAssemblingQuantity) + Max(masnyea)
                    else Max(ItemBuyPrice) end ,
                    @ItemBuyPriceInStore = Max(ItemBuyPrice)
                    From #ItemComponentStoreQnt_" + clientMoveID + "_" + dgvRow.Index + @";
                               
                    INSERT INTO ItemsMove (ItemId, StoreId, IncomeQnt, IncomePrice, OutcomeQnt, 
                    OutcomePrice, LastQnt, LastIncomePrice, LastOutComePrice, Bayan, MoveDate, UserId, Time, Type)
                    Select '" + selledItemId + @"',
                    '" + selledItemStoreId + @"',
                    @AssembledQnt,
                    @ItemBuyPrice * @AssembledQnt,
                    0,0,
                    Isnull((select Quantity from store 
                    where ItemID = '" + selledItemId + @"' and StoreID = '" + selledItemStoreId + @"'),0), 
                    Isnull((select Price from store where ItemID =  '" + selledItemId + @"' and StoreID = '" +
                                                                          selledItemStoreId + @"'),0),
                    Isnull((select Price from Items where ID = '" + selledItemId + @"' and Items.Active = 1),0),
                    ('تجميع كمية للصنف لفاتورة مبيعات رقم " + BillNu + @"' 
                    + ' تاريخ الفاتورة '  +'" + billDate + @"'
                    + ' اسم العميل " + ClientCombo.Text + @"')
                    ,Convert(varchar(10),GetDate(),101),
                    '" + ProSetting.UserIdLo + @"',Convert(varchar(10),GetDate(),108),'دخول';

                    Set @SellingItemTotalBuyPrice = (@AssembledQnt* @ItemBuyPrice) + ((@SelledQnt-@AssembledQnt) * @ItemBuyPriceInStore);

                    Update Store Set Price = @ItemBuyPrice, 
                    Quantity= Isnull((select Quantity from store where ItemID= '" + selledItemId + @"'
                    and StoreID='" + selledItemStoreId + @"'),0)
                    + @AssembledQnt
                    where StoreID = '" + selledItemStoreId + @"' and ItemID= '" + selledItemId + @"' ;

                    Update ItemsUnit Set BuyPrice = @ItemBuyPrice  where ItemID= '" + selledItemId + @"' 
                    and UnitID = (Select Top 1 Id From Units Where Name = '" + dgvRow.Cells[4].Value + @"')
                    if(@SellingItemTotalBuyPrice <> " + selledItemTotalBuyPrice + @")
                    Begin
                        if((@SellingItemTotalBuyPrice/@SelledQnt) > " + selledItemUnitPrice + @")
                        begin
                            Select 'تكلفة هذا الصنف [" + selledItemName + @"] أكبر من سعر البيع '
                            ," + dgvRow.Index + ",@ItemStoreQnt,(@SellingItemTotalBuyPrice/@SelledQnt);" + @"
                            return;
                        end

                        Update Sales Set BuyPrice = @SellingItemTotalBuyPrice
                        Where BillNo = '" + BillNu + @"' and Date = '" + dateTimePicker1.Value.ToString("yyyy-MM-dd") + @"' 
                        and ItemID = '" + selledItemId + @"' and StoreId = '" + selledItemStoreId + @"' 
                        and ItemName = '" + selledItemName + @"' and UnitName = '" + selledItemUnitName + @"'
                        and TotalPrice = " + selledItemTotalPrice + @";
                    End
                END
                Set @Iter = @Iter + 1;               
            END
        end
    End
END
";
        }
        string AddUnderDeliveryCollectedItemComponents(DataGridViewRow dgvRow)
        {
            if (!ProSetting.StoreMinus)
            {
                if (ProSetting.UniderDelevItem)
                {
                    return @"
else
Begin
    if (@StoreQuanity < @SelledQnt)
    begin
        set @AddedUnderDelivery=1;
        set @AddedUnderDeliveryItems = @AddedUnderDeliveryItems +  '
' + '" + dgvRow.Cells["ItemName"].Value + @"';
        insert into UnderDelivery (BillNum,ItemID,Amount,Date,Stutes,StoreID,UnitName,ItMains,ItemName,LastBuyPrice,LastDeliverdAmount)
        values(
        '" + BillNu + @"',
        " + dgvRow.Cells[0].Value + @",
        " + (Convert.ToDecimal(dgvRow.Cells[5].Value.Stringify()))
                                                            .ToString("F" + ProSetting.Round) + @",
        '" + dateTimePicker1.Value.ToString("yyyy-MM-dd") + @"',
        '" + false + "'," + dgvRow.Cells["StoreID"].Value.Stringify() + @",
        '" + dgvRow.Cells[4].Value.Stringify() + @"',
        " + dgvRow.Cells["mainIt"].Value.Stringify() + @",
        '" + dgvRow.Cells["ItemName"].Value + " " + dgvRow.Cells["ItemColor"].Value + @"','0','0'
        );
    end
End";
                }
                else
                {
                    return (
                (@"
Else
Begin
     if (@StoreQuanity < @SelledQnt)
     begin 
          Select 'الكمية الموجوده في المخزن لهذ الصنف  
          " + dgvRow.Cells["ItemName"].Value + @" " +
    dgvRow
        .Cells["ItemColor"].Value +
    @" لا تكفي '
          ," + dgvRow.Index + ",@StoreQuanity;" + @"
          return;
     end
End"));
                }
            }
            else
            {
                return (
                "");
            }
        }
        string AddItemToUnderDeliveryIfQntNotEnough(DataGridViewRow dgvRow)
        {
            if (!ProSetting.StoreMinus)
            {
                if (ProSetting.UniderDelevItem)
                {
                    return @"
if (@StoreQuanity < @SelledQnt)
begin
    set @AddedUnderDelivery=1;
    set @AddedUnderDeliveryItems = @AddedUnderDeliveryItems +  '
' + '" + dgvRow.Cells["ItemName"].Value + @"';
    insert into UnderDelivery (BillNum,ItemID,Amount,Date,Stutes,StoreID,UnitName,ItMains,ItemName,LastBuyPrice,LastDeliverdAmount)
    values(
    '" + BillNu + @"',
    " + dgvRow.Cells[0].Value + @",
    " + (Convert.ToDecimal(dgvRow.Cells[5].Value.Stringify()))
                                                .ToString("F" + ProSetting.Round) + @",
    '" + dateTimePicker1.Value.ToString("yyyy-MM-dd") + @"',
    '" + false + "'," + dgvRow.Cells["StoreID"].Value.Stringify() + @",
    '" + dgvRow.Cells[4].Value.Stringify() + @"',
    " + dgvRow.Cells["mainIt"].Value.Stringify() + @",
    '" + dgvRow.Cells["ItemName"].Value + " " + dgvRow.Cells["ItemColor"].Value + @"','0','0'
    );
end";
                }
                else
                {
                    return @"
if (@StoreQuanity < @SelledQnt)
begin 
Select 'الكمية الموجوده في المخزن لهذ الصنف  
" + dgvRow.Cells["ItemName"].Value + @" " +
dgvRow
.Cells["ItemColor"].Value +
@" لا تكفي '
          ," + dgvRow.Index + ",@StoreQuanity;" + @"
return;
end
";
                }
            }
            else
            {
                return ("");
            }
        }
        string UpdateItemStoreQnt(DataGridViewRow dgvRow,
            object IncomePrice,
            object OutcomePrice)
        {
            return @"
if( @AddedUnderDelivery=0)
begin
" + AddItemsMove(dgvRow.Cells["ItemID"].Value.Stringify(),
      dgvRow.Cells["StoreID"].Value.Stringify(),
      "0",
      IncomePrice.Stringify(),
      (Convert.ToDecimal(dgvRow.Cells[5].Value.Stringify()) * Convert.ToDecimal(dgvRow.Cells["mainIt"].Value.Stringify())).Stringify(),
      OutcomePrice.Stringify(),
      " فاتورة مبيعات رقم " + BillNu + " اسم العميل " + ClientCombo.Text,
      dateTimePicker1.Value.ToString("yyyy-MM-dd"),
      ProSetting.UserIdLo.Stringify(),
      DateTime.Now.ToLongTimeString(), "خروج")
  + @"
update store set Quantity= Isnull((select Quantity from store 
where ItemID='" + dgvRow.Cells["ItemID"].Value.Stringify() + @"' 
and StoreID='" + dgvRow.Cells["StoreID"].Value.Stringify() + @"'),0) - @SelledQnt 
where StoreID = '" + dgvRow.Cells["StoreID"].Value.Stringify() + @"' 
and  ItemID=" + dgvRow.Cells["ItemID"].Value.Stringify() + @";
End";
        }
        void saveBill(bool print, bool terminalPay)
        {
            try
            {
                if (!dateTimePicker1.Checked || !dateTimePicker1.Enabled)
                {
                    dateTimePicker1.ValueChanged -= dateTimePicker1_ValueChanged;
                    dateTimePicker1.Value = DateTime.Today;
                    dateTimePicker1.Checked = false;
                    dateTimePicker1.ValueChanged += dateTimePicker1_ValueChanged;

                }
                string underDeliveryMessage = Environment.NewLine;
                if (bill == false)
                {
                    MessageBox.Show(Tr.M2.m524);
                    return;
                }
                dtExpDate.Rows.Clear();
                if (ProSetting.DemoEdition)
                {
                    int Bills = Codes.Search2("select * from ClientMove").Rows.Count;
                    if (Bills >= 20)
                    {
                        MessageBox.Show(Tr.M1.m0050, Tr.M1.alert1, MessageBoxButtons.OK, MessageBoxIcon.Warning);
                        ProSetting.LogManager.ReportMessage(PioLogging.Model.Enum.RollbarLevel.Warning,
                                            "Sales exceeded Limit",
                                            new PioLogging.Model.RollbarMessage
                                            {
                                                Body = "Sales count = " + Bills + " .. ",
                                                Metadata = new Dictionary<string, object>()
                                                {
                                                    {"TrialStart",Store.Properties.Settings.Default.TrialStart.DecryptRandomText()},
                                                    {"LastOpenningDate",Store.Properties.Settings.Default.LastOpenningDateTime.DecryptRandomText()}
                                                }
                                            });
                        return;
                    }
                }

                if (ClientCombo.SelectedValue.ToInt32() == 0)
                {
                    MessageBox.Show(Tr.M1.m0250);
                }
                else if (ClientCombo.Text == "<-اختر->")
                {
                    MessageBox.Show(Tr.M1.m0250);
                }
                else if ((ProSetting.LoggedUserPosId.ToText() == "" || ProSetting.LoggedUserPosId.ToInt32() == 0) && ProSetting.Egypt_E_Receipt)
                {
                    MessageBox.Show(Tr.M2.m550);
                }
                else
                {
                    DataTable kk = Codes.Search2("select id from Clients where name='" + ClientCombo.Text + "'");
                    if (kk.Rows.Count > 0)
                    {
                        ClientCombo.SelectedValue = kk.Rows[0][0].ToInt32();
                        //if (ClientCombo.SelectedValue != kk.Rows[0][0].Stringify())
                        //{
                        //    MessageBox.Show("من فضلك اختر اسم العميل بدلا من كتابته"); return;
                        //}
                    }
                    else
                    {
                        MessageBox.Show(Tr.M1.m0360); return;
                    }
                    if (SellerCombo.SelectedItem == null)
                    {
                        MessageBox.Show(Tr.M1.m0251);
                    }
                    else if (SellerCombo.Text == "<-اختر->")
                    {
                        MessageBox.Show(Tr.M1.m0251);
                    }
                    else if (StoreCombo.Text == "<-اختر->" && dataGridView1.Rows.Count == 1)
                    {
                        MessageBox.Show(Tr.M1.m362);
                    }
                    else
                    {
                        if (BillKindCom.SelectedItem == null)
                        {
                            MessageBox.Show(Tr.M1.m0361);
                        }
                        else
                        {
                            if (BillNoT.Text != "")
                            {
                                DataTable dtSearchByBillNoIntoReturn = new DataTable();

                                if (ProSetting.SaleBillNum)
                                {
                                    dtSearchByBillNoIntoReturn = Codes.Search2("Select * from ClientsReturn where BillNo ='" + BillNoT.Text + "'");
                                    int invoiceNo = 0;
                                    if (BillNoT.Text.TrimStart().StartsWith("-"))
                                    {
                                        timer1.Enabled = true;
                                        MessageBox.Show(Tr.M2.m527, Tr.M1.error, MessageBoxButtons.OK, MessageBoxIcon.Warning);
                                        GetCurrentBillNum();
                                        return;
                                    }
                                    else if (BillNoT.Text == "بدون فاتورة" || BillNoT.Text.ToLower() == "none")
                                    {
                                        timer1.Enabled = true;
                                        MessageBox.Show(Tr.M2.m525, Tr.M1.error, MessageBoxButtons.OK, MessageBoxIcon.Warning);
                                        GetCurrentBillNum();
                                        return;
                                    }
                                    else if (BillNoT.Text.Trim() == "تقسيط قديم")
                                    {
                                        timer1.Enabled = true;
                                        MessageBox.Show(Tr.M2.m525, Tr.M1.error, MessageBoxButtons.OK, MessageBoxIcon.Warning);
                                        return;
                                    }
                                    else if (dtSearchByBillNoIntoReturn.Rows.Count > 0)
                                    {
                                        timer1.Enabled = true;
                                        MessageBox.Show(Tr.M2.m526, Tr.M1.error, MessageBoxButtons.OK, MessageBoxIcon.Warning);
                                        button11.Visible = true;
                                        return;
                                    }
                                }
                                if (ProSetting.LinkBilltypeWithCashFromClient)
                                {
                                    if (Math.Round(Convert.ToDecimal(textBox9.Text), ProSetting.Round, MidpointRounding.AwayFromZero) == 0
                                        && Math.Round(Convert.ToDecimal(TxtDeliveredAmountFromClient.Text), ProSetting.Round, MidpointRounding.AwayFromZero) > 0)
                                    {
                                        MessageBox.Show(Tr.M2.m851, Tr.M1.alert1, MessageBoxButtons.OK, MessageBoxIcon.Stop);
                                        return;

                                    }
                                    else if (Math.Round(Convert.ToDecimal(textBox10.Text), ProSetting.Round, MidpointRounding.AwayFromZero) <
                                            Math.Round(Convert.ToDecimal(textBox11.Text), ProSetting.Round, MidpointRounding.AwayFromZero))
                                    {
                                        if (PayedKindCom.Text == "نقدى")
                                        {
                                            MessageBox.Show(Tr.M2.m132);
                                            return;
                                        }
                                    }
                                    else if (Math.Round(Convert.ToDecimal(textBox9.Text), ProSetting.Round, MidpointRounding.AwayFromZero) >
                                             Math.Round(Convert.ToDecimal(TxtDeliveredAmountFromClient.Text), ProSetting.Round, MidpointRounding.AwayFromZero))
                                    {
                                        MessageBox.Show(Tr.M2.m545, Tr.M1.error, MessageBoxButtons.OKCancel, MessageBoxIcon.Stop);
                                        return;

                                    }
                                }
                                else
                                {
                                    if (ProSetting.CancelMadfo)
                                    {
                                        if (Math.Round(Convert.ToDecimal(textBox10.Text), ProSetting.Round, MidpointRounding.AwayFromZero)
                                            <
                                            Math.Round(Convert.ToDecimal(textBox11.Text), ProSetting.Round, MidpointRounding.AwayFromZero))
                                        {
                                            if (PayedKindCom.Text == "نقدى")
                                            {
                                                MessageBox.Show(Tr.M2.m132);
                                                return;
                                            }
                                        }
                                        else if (Math.Round(Convert.ToDecimal(textBox10.Text), ProSetting.Round, MidpointRounding.AwayFromZero)
                                                 >
                                                 Math.Round(Convert.ToDecimal(textBox11.Text), ProSetting.Round, MidpointRounding.AwayFromZero))
                                        {
                                            if (ProSetting.MadfooSafey && PayedKindCom.Text == "نقدى" &&
                                                !ProSetting.PayMax)
                                            {
                                                MessageBox.Show(Tr.M2.m132);
                                                return;
                                            }
                                        }
                                        else if (Convert.ToDecimal(textBox12.Text)
                                                 > Convert.ToDecimal(textBox11.Text))
                                        {
                                            MessageBox.Show(Tr.M2.m133);
                                            return;
                                        }

                                    }
                                    else if (ProSetting.CancelMadfoForNakdi
                                        && ProSetting.NakdiClient == ClientCombo.SelectedValue.ToInt32())
                                    {
                                        if (Math.Round(Convert.ToDecimal(textBox10.Text), ProSetting.Round, MidpointRounding.AwayFromZero) <
                                            Math.Round(Convert.ToDecimal(textBox11.Text), ProSetting.Round, MidpointRounding.AwayFromZero))
                                        {
                                            if (PayedKindCom.Text == "نقدى")
                                            {
                                                MessageBox.Show(Tr.M2.m132);
                                                return;
                                            }
                                        }
                                        else if (Math.Round(Convert.ToDecimal(textBox10.Text), ProSetting.Round, MidpointRounding.AwayFromZero) >
                                                 Math.Round(Convert.ToDecimal(textBox11.Text), ProSetting.Round, MidpointRounding.AwayFromZero))
                                        {
                                            if (PayedKindCom.Text == "نقدى" && !ProSetting.PayMax)
                                            {
                                                MessageBox.Show(Tr.M2.m132);
                                                return;
                                            }
                                        }
                                        else if (Convert.ToDecimal(textBox12.Text) > Convert.ToDecimal(textBox11.Text))
                                        {
                                            MessageBox.Show(Tr.M2.m133);
                                            return;
                                        }

                                    }
                                    else
                                    {
                                        if (Math.Round(Convert.ToDecimal(textBox10.Text), ProSetting.Round, MidpointRounding.AwayFromZero) <
                                            Math.Round(Convert.ToDecimal(textBox11.Text), ProSetting.Round, MidpointRounding.AwayFromZero))
                                        {
                                            if (ProSetting.MadfooSafey && PayedKindCom.Text == "نقدى")
                                            {
                                                MessageBox.Show(Tr.M2.m132);
                                                return;
                                            }
                                        }
                                        else if (Math.Round(Convert.ToDecimal(textBox10.Text), ProSetting.Round, MidpointRounding.AwayFromZero) >
                                                 Math.Round(Convert.ToDecimal(textBox11.Text), ProSetting.Round, MidpointRounding.AwayFromZero))
                                        {
                                            if (ProSetting.MadfooSafey && PayedKindCom.Text == "نقدى" &&
                                                !ProSetting.PayMax)
                                            {
                                                MessageBox.Show(Tr.M2.m132);
                                                return;
                                            }
                                        }
                                    }
                                }

                                DateTime? dat1 = null;
                                if (ProSetting.UnderDelevBill)
                                {
                                    if (checkBox1.Checked)
                                    {
                                        dat1 = dateTimePicker2.Value;
                                    }
                                }
                                if (Convert.ToDecimal(textBox5.Text) <= 0)
                                {
                                    if (MessageBox.Show(Tr.M2.m544, Tr.M1.alert1, MessageBoxButtons.YesNo) == DialogResult.No)
                                    {
                                        return;
                                    }
                                }
                                //if (Convert.ToDecimal(textBox5.Text) > 0)
                                {
                                    for (int rr = 1; rr < dataGridView1.Rows.Count; rr++)
                                    {
                                        try
                                        {
                                            var chekdata1 = Convert.ToDecimal(dataGridView1.Rows[rr - 1].Cells["Quantity"].Value.Stringify());
                                            var chekdata2 = Convert.ToDecimal(dataGridView1.Rows[rr - 1].Cells["UnitPrice"].Value.Stringify());
                                            var chekdata3 = Convert.ToDecimal(dataGridView1.Rows[rr - 1].Cells["TotalPrice"].Value.Stringify());
                                        }
                                        catch
                                        {
                                            MessageBox.Show(Tr.M2.m528, Tr.M1.alert);
                                            return;
                                        }
                                        if (ProSetting.ColorOrSerial == "السيريال")
                                        {
                                            try
                                            {
                                                if (dataGridView1.Rows[rr - 1].Cells[3].Value.ToText() != "")
                                                {
                                                    DataTable serialcheck = Codes.Search2(@"select  * from ItemsSerial 
where Exist = 0 and ItemSerial='" + dataGridView1.Rows[rr - 1].Cells["ItemColor"].Value.ToText() + "' and ItemID = " + dataGridView1.Rows[rr - 1].Cells["ItemID"].Value);
                                                    if (serialcheck.Rows.Count > 0)
                                                    {
                                                        MessageBox.Show(Tr.M2.m809 + dataGridView1.Rows[rr - 1].Cells["ItemColor"].Value.ToText() + " )", Tr.M1.alert);
                                                        return;
                                                    }
                                                }
                                            }
                                            catch { }
                                        }
                                    }

                                    //timer1.Enabled = false;
                                    BillNu = BillNoT.Text;
                                    DataTable dt1 = new DataTable();
                                    if (ProSetting.DailyBill == true)
                                    {
                                        dt1 = Codes.Search2("select BillNo from ClientMove where BillNo ='" + BillNu + "' and Date='" + DateTime.Today.ToString("yyyy-MM-dd") + "'");
                                    }
                                    else
                                    {
                                        dt1 = Codes.Search2("select BillNo from ClientMove where BillNo ='" + BillNu + "'");
                                    }
                                    if (dt1.Rows.Count == 0)
                                    {

                                        if (dataGridView1.Rows.Count > 1)
                                        {

                                            ////////////////////////////////////////////////////////
                                            ////////////////////////////////////////////////////////

                                            decimal dd = Convert.ToDecimal(Codes.Search(@"  DECLARE @RowTo int;
  
                                              SET @RowTo = " + ClientCombo.SelectedValue + @";
select(isnull((select sum(TotalPriceAfterDiscount) from ClientMove 
where ClientID = @RowTo), 0) +
isnull((select sum(Overto) from ClientNotice 
where ClientID = @RowTo),0)-isnull((select sum(Pay) from ClientAccounts where ClientID = @RowTo),0)
-isnull((select sum(Discount) from ClientNotice where ClientID = @RowTo),0))as ss").Rows[0][0].Stringify());

                                            //////
                                            DateTime dddd = dateTimePicker1.Value;
                                            //try
                                            //{
                                            //    DataTable ff = Codes.Search2("select * from ClientAccounts where ClientID = " + ClientCombo.SelectedValue);
                                            //    dddd = Convert.ToDateTime(ff.Rows[(ff.Rows.Count - 1)][4].Stringify());
                                            //}
                                            //catch
                                            //{
                                            //    dddd = DateTime.Today;
                                            //}
                                            decimal ggg;
                                            if (ProSetting.LinkBilltypeWithCashFromClient)
                                            {
                                                ggg = Convert.ToDecimal(textBox10.Text);
                                            }
                                            else
                                            {
                                                if (ProSetting.CancelMadfo)
                                                {
                                                    ggg = Convert.ToDecimal(textBox11.Text);
                                                }
                                                else if (ProSetting.CancelMadfoForNakdi &&
                                                         ProSetting.NakdiClient == ClientCombo.SelectedValue.ToInt32())
                                                {
                                                    ggg = Convert.ToDecimal(textBox11.Text);
                                                }
                                                else
                                                {
                                                    ggg = Convert.ToDecimal(textBox10.Text);
                                                }
                                            }

                                            decimal hhh = Convert.ToDecimal(textBox11.Text);
                                            decimal jjj = (hhh + dd);
                                            decimal lll = (jjj - ggg);
                                            string RestforSms = "0";
                                            /////////////////////////////////////////////////////////
                                            /////////////////////////////////////////////////////////
                                            DataTable dt55 = new DataTable();
                                            dt55 = Codes.Search2("select * from Clients where [Name]='" + ClientCombo.Text + "'");

                                            DataTable dt66 = new DataTable();
                                            dt66 = Codes.Search2("select * from Sellers where [Name]='" + SellerCombo.Text + "'");

                                            ////////////////////
                                            //DataTable fd = Codes.Search2("select * from Users where UserName='" + lblUserName.Text + "'");
                                            //int userId = Convert.ToInt32(fd.Rows[0][0].Stringify());
                                            if (dt55.Rows.Count > 0)
                                            {
                                                if (ProSetting.BillPaidAgel == true && Convert.ToDecimal(textBox10.Text) == 0)
                                                {
                                                    DialogResult dr = MessageBox.Show(Tr.M2.m786 + Environment.NewLine + Tr.M2.m787, "", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
                                                    if (dr != DialogResult.Yes)
                                                    {
                                                        return;
                                                    }
                                                }

                                                DialogResult dialog;
                                                int transactionId = 0;
                                                if (terminalPay)
                                                {
                                                    if (textBox11.Text == "0" || Convert.ToDecimal(textBox11.Text) == 0)
                                                    {
                                                        MessageBox.Show(Tr.M1.m0266 + Environment.NewLine + Tr.M1.m0267, Tr.M1.error, MessageBoxButtons.OK, MessageBoxIcon.Error);
                                                        return;
                                                    }
                                                    if (textBox12.Text == "0" || Convert.ToDecimal(textBox12.Text) == 0)
                                                    {
                                                        MessageBox.Show(Tr.M1.m0268 + Environment.NewLine + Tr.M1.m0267, Tr.M1.error, MessageBoxButtons.OK, MessageBoxIcon.Error);
                                                        return;
                                                    }
                                                    var request = new PurchaseRequest()
                                                    {
                                                        Amount = Convert.ToDecimal(textBox12.Text),
                                                        EcrReferenceNumber = _terminalProcessing.GetLastEcrRefNo(),
                                                        PrintReceipt = true
                                                    };
                                                    var description = "دفع فاتورة بيع رقم " + BillNoT.Text
                                                                                                  + " بقيمة [ " +
                                                                                                  textBox10.Text +
                                                                                                  " ] \n" +
                                                                                                  "المستخدم : " +
                                                                                                  ProSetting.UserNameLo;

                                                    var result =
                                                        _terminalProcessing.DoPurchase(request, this, description);

                                                    if (!result.Key)
                                                    {
                                                        SetPayTypeSettings();
                                                        textBox9.TextChanged -= textBox9_TextChanged;
                                                        textBox12.TextChanged -= textBox9_TextChanged;

                                                        textBox9.Text = PayedKindCom.SelectedIndex == 0
                                                            ? textBox12.Text
                                                            : "0";
                                                        textBox12.Text = "0";

                                                        textBox9.TextChanged += textBox9_TextChanged;
                                                        textBox12.TextChanged += textBox9_TextChanged;
                                                        return;
                                                    }

                                                    transactionId = result.Value;
                                                }

                                                string[] detectCmdTxt = new string[] { };
                                                string detectId = "";
                                                if (ChkDetect.Checked)
                                                {
                                                    var result =
                                                        new FrmDetect(ClientCombo.SelectedValue.Stringify(), BillNu)
                                                            .AddANewExcamination();

                                                    if (result.Value == DialogResult.Cancel)
                                                        return;
                                                    detectCmdTxt = result.Key;
                                                }

                                                //if (dt66.Rows.Count > 0)
                                                //{
                                                using (SqlConnection conn = new SqlConnection(Codes.ConnectionStr))
                                                {
                                                    conn.Open();
                                                    SqlCommand cmd = conn.CreateCommand();
                                                    SqlTransaction ST = conn.BeginTransaction();
                                                    cmd.Connection = conn;
                                                    cmd.Transaction = ST;
                                                    try
                                                    {
                                                        if (ProSetting.DailyBill == true)
                                                        {
                                                            dt1 = Search2(cmd,
                                                                "select BillNo from Sales where BillNo ='" + BillNu +
                                                                "' and Date='" + DateTime.Today.ToString("yyyy-MM-dd") +
                                                                "'");
                                                        }
                                                        else
                                                        {
                                                            dt1 = Search2(cmd,
                                                                "select BillNo from Sales where BillNo ='" + BillNu +
                                                                "'");
                                                        }

                                                        if (dt1.Rows.Count == 0)
                                                        {
                                                            string Rest = "0";
                                                            if (ProSetting.LinkBilltypeWithCashFromClient)
                                                            {
                                                                Rest = label18.Text;
                                                            }
                                                            else
                                                            {
                                                                if (ProSetting.CancelMadfo)
                                                                {
                                                                }
                                                                else if (ProSetting.CancelMadfoForNakdi &&
                                                                         ProSetting.NakdiClient == ClientCombo.SelectedValue.ToInt32())
                                                                {
                                                                }
                                                                else
                                                                {
                                                                    Rest = label18.Text;
                                                                }
                                                            }

                                                            RestforSms = Rest;
                                                            var IsitDelivery = ChkDelivery.Checked;

                                                            string ClientMoveID = "";

                                                            if (ProSetting.Egypt_E_Receipt)
                                                            {
                                                                DataTable dtDevice = Search2(cmd,
                                                                    "select * from PosDevices where id ='" + ProSetting.LoggedUserPosId.ToInt32() + "'");
                                                                if (dtDevice.Rows.Count == 0)
                                                                {
                                                                    dtDevice = Search2(cmd,
                                                                   "select * from PosDevices");
                                                                    if (dtDevice.Rows.Count > 0)
                                                                    {
                                                                        ST.Save("no pos");
                                                                        var result = FrmMessageDialog.ShowDialog(Tr.M2.m788 + dtDevice.Rows[0]["DeviceName"].ToText() + Tr.M2.m789 + dtDevice.Rows[0]["DeviceName"].ToText() + "", Tr.M1.sure, this, MessageBoxIcon.Question, DialogResult.Yes, DialogResult.No);
                                                                        if (result == DialogResult.No)
                                                                        {
                                                                            ST.Rollback();
                                                                            MessageBox.Show(Tr.M2.m529, "", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);

                                                                            return;
                                                                        }
                                                                    }
                                                                    else
                                                                    {
                                                                        ST.Rollback();
                                                                        MessageBox.Show(Tr.M2.m550, "", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                                                        return;
                                                                    }

                                                                }
                                                                ClientMoveID = Search2(cmd,
                                                                    "insert into ClientMove (BillNo,ClientID,TotalPriceBeforeDiscount,DiscoutPercent," +
                                                                    "DiscountValue,TotalPriceAfterDiscount,[Date],billtype,Darebaa,UserId,SellerId," +
                                                                    "BillCreditKind,TransportValue,StockId,dareba2,Rest,BillKind," +
                                                                    "ItemsVATTotalValue,IsitDelivery,DiscountType,documentStatus,DeviceSerialNumber,syndicateLicenseNumber,POSId,RoundDecimals,ExtraInfo1,ExtraInfo2) " +
                                                                    "values('" + BillNu + "'," +
                                                                    "" + ClientCombo.SelectedValue + "," +
                                                                    "" + textBox5.Text + "," +
                                                                    "" + textBox4.Text + "," +
                                                                    textBox3.Text + "," +
                                                                    "" + textBox11.Text + "," +
                                                                    "'" + dateTimePicker1.Value.ToString("yyyy-MM-dd") +
                                                                    "'," +
                                                                    "'" + BeanKindCom.SelectedItem + "'," +
                                                                    "'" + DarebaText.Text + "'," +
                                                                    "'" + ProSetting.UserIdLo + "'," +
                                                                    "'" + SellerCombo.SelectedValue + "'," +
                                                                    "'" + (Convert.ToDecimal(Rest) > 0
                                                                        ? "أجل"
                                                                        : "نقدى") + "'," +
                                                                    "'" + TransportValue.Text + "'," +
                                                                    "'" + StockCombo.SelectedValue + "'," +
                                                                    "'" + textBox20.Text + "','" + Rest + "'," +
                                                                    "'بيع عادى'" + "," +
                                                                    "'" + ItemsVATTotalValue + "'," +
                                                                    "'" + ChkDelivery.Checked + "'," +
                                                                    "" + (RBDiscountPercentage.Checked
                                                                        ? (byte)DiscountType.Percentage
                                                                        : (byte)DiscountType.Value) + "," +
                                                                    "'0'," +
                                                                    "'" + (dtDevice.Rows.Count == 0
                                                                        ? ""
                                                                        : dtDevice.Rows[0]["DeviceSerialNo"]) + "','" +
                                                                    (dtDevice.Rows.Count == 0
                                                                        ? ""
                                                                        : dtDevice.Rows[0]["syndicateLicenseNumber"]) +
                                                                    "','" + (dtDevice.Rows.Count == 0
                                                                        ? ""
                                                                        : dtDevice.Rows[0]["Id"]) + "'" +
                                                                        "," + ProSetting.Round +
                                                                        ",'" + TxtExtraInfo1.Text + "'" +
                                                                        ",'" + TxtExtraInfo2.Text + "'" +
                                                                        ");" +
                                                                    "Select Scope_Identity()").Rows[0][0].Stringify();
                                                            }
                                                            else
                                                            {
                                                                ClientMoveID = Search2(cmd,
                                                                    "insert into ClientMove (BillNo,ClientID,TotalPriceBeforeDiscount,DiscoutPercent," +
                                                                    "DiscountValue,TotalPriceAfterDiscount,[Date],billtype,Darebaa,UserId,SellerId," +
                                                                    "BillCreditKind,TransportValue,StockId,dareba2,Rest,BillKind," +
                                                                    "ItemsVATTotalValue,IsitDelivery,DiscountType,RoundDecimals,ExtraInfo1,ExtraInfo2) " +
                                                                    "values('" + BillNu + "'," +
                                                                    "" + ClientCombo.SelectedValue + "," +
                                                                    "" + textBox5.Text + "," +
                                                                    "" + textBox4.Text + "," +
                                                                    textBox3.Text + "," +
                                                                    "" + textBox11.Text + "," +
                                                                    "'" + dateTimePicker1.Value.ToString("yyyy-MM-dd") +
                                                                    "'," +
                                                                    "'" + BeanKindCom.SelectedItem.Stringify() + "'," +
                                                                    "'" + DarebaText.Text + "'," +
                                                                    "'" + ProSetting.UserIdLo + "'," +
                                                                    "'" + SellerCombo.SelectedValue.Stringify() + "'," +
                                                                    "'" + (Convert.ToDecimal(Rest) > 0
                                                                        ? "أجل"
                                                                        : "نقدى") + "'," +
                                                                    "'" + TransportValue.Text + "'," +
                                                                    "'" + StockCombo.SelectedValue.Stringify() + "'," +
                                                                    "'" + textBox20.Text + "','" + Rest + "'," +
                                                                    "'بيع عادى'" + "," +
                                                                    "'" + ItemsVATTotalValue + "'," +
                                                                    "'" + ChkDelivery.Checked + "'," +
                                                                    "" + (RBDiscountPercentage.Checked
                                                                        ? (byte)DiscountType.Percentage
                                                                        : (byte)DiscountType.Value) +
                                                                        "," + ProSetting.Round +
                                                                        ",'" + TxtExtraInfo1.Text + "'" +
                                                                        ",'" + TxtExtraInfo2.Text + "'" +
                                                                        ");" +
                                                                    "Select Scope_Identity()").Rows[0][0].Stringify();
                                                            }
                                                            if (ClientMoveID.ToInt32() == 0)
                                                            {
                                                                ST.Rollback();
                                                                MessageBox.Show(Tr.M2.m530, Tr.M1.error, MessageBoxButtons.OK, MessageBoxIcon.Warning);
                                                                return;
                                                            }
                                                            if (detectCmdTxt != null && detectCmdTxt.Length > 0)
                                                            {
                                                                detectId = Search2(cmd,
                                                                        detectCmdTxt[0] + ",'" + ClientMoveID + "'); " +
                                                                        "Select Scope_Identity();")
                                                                    .Rows[0][0].Stringify();
                                                                if (detectId.ToInt32() == 0)
                                                                {
                                                                    ST.Rollback();
                                                                    MessageBox.Show(Tr.M2.m551, Tr.M1.error, MessageBoxButtons.OK, MessageBoxIcon.Warning);
                                                                    return;
                                                                }

                                                            }


                                                            if (ChkAddBillPointsAsDiscount.Checked && Convert.ToDecimal(textBox3.Text) > 0)
                                                            {
                                                                cmd.CommandText = ("insert into ClientPoint " +
                                                                                   "(ClientId,Pointstake,PointsAdd,Price,Type,Bayan,Date,BillNo,ClientMoveId) "
                                                                                   + "values ('" + ClientCombo.SelectedValue + "'," +
                                                                                   "" + LblBillPoints.Text + "," +
                                                                                   "0," +
                                                                                   "" + Convert.ToDecimal(textBox3.Text) + "," +
                                                                                   "' خصم ' , " +
                                                                                   "'تم احتساب النقاط كقيمة خصم علي فاتورة رقم " + BillNoT.Text + "'," +
                                                                                   "'" + dateTimePicker1.Value.ToString("yyyy-MM-dd") + "'," +
                                                                                   "'" + BillNoT.Text + "'," +
                                                                                   "'" + ClientMoveID + "')");
                                                                cmd.ExecuteNonQuery();
                                                            }
                                                            dataSet11.Clear();

                                                            dataSet11.ClientMove.Rows.Add(ClientMoveID,
                                                                ClientCombo.SelectedValue,
                                                                BillNu,
                                                                textBox5.Text,
                                                                Convert.ToDecimal(textBox4.Text),
                                                                Convert.ToDecimal(textBox3.Text),
                                                                textBox11.Text,
                                                                Convert.ToDateTime(
                                                                    dateTimePicker1.Value.ToString("yyyy-MM-dd")),
                                                                BeanKindCom.SelectedItem.Stringify(),
                                                                DarebaText.Text,
                                                                ProSetting.UserIdLo,
                                                                SellerCombo.SelectedValue.Stringify(),
                                                                PayedKindCom.Text,
                                                                TransportValue.Text,
                                                                StockCombo.SelectedValue.Stringify(),
                                                                Convert.ToDateTime(
                                                                    dateTimePicker1.Value.ToString("yyyy-MM-dd")),
                                                                0, "", 0, 0, textBox20.Text,
                                                                Rest, "بيع عادى",
                                                                ItemsVATTotalValue, false,
                                                                RBDiscountPercentage.Checked ? 1 : 2);

                                                            string BillValue = Environment.NewLine + "المندوب : " + SellerCombo.Text;
                                                            string note = "";
                                                            string MoveType =
                                                                "فاتورة مبيعات رقم " + BillNu + " اسم العميل : " +
                                                                ClientCombo.Text + " المندوب : " + SellerCombo.Text;
                                                            if (textBox1.Text != "")
                                                            {
                                                                BillValue += Environment.NewLine + "ملاحظات / " + textBox1.Text;
                                                                note += Environment.NewLine + "ملاحظات / " + textBox1.Text;
                                                                MoveType += " ملاحظات / " + textBox1.Text;
                                                            }
                                                            MoveType += detectCmdTxt.Length == 0
                                                                ? ""
                                                                : Environment.NewLine + "تم تسجيل كشف لـ  " + detectCmdTxt[1] + " بنسبة عمولة مُسجلة [" + detectCmdTxt[2] + "%]" + Environment.NewLine;
                                                            string query1 = "";

                                                            for (int i = 1; i < dataGridView1.Rows.Count; i++)
                                                            {
                                                                //DataTable dtuname = new DataTable();
                                                                //dtuname = Search2(cmd, "select ID from Units where Name  = '" + dataGridView1.Rows[i - 1].Cells[4].Value.Stringify() + "'");

                                                                dt = Search2(cmd,
                                                                    "select Distinct ItemsUnit.Price,ItemsUnit.PriceInter,ItMain ,units.id,Units.Name," +
                                                                    "Items.ItemCode,Units.UnitCode,Items.ItemType " +
                                                                    "from   ItemsUnit inner join Items On ItemsUnit.ItemID=Items.ID  " +
                                                                    "inner join  units on ItemsUnit.unitid=units.id  " +
                                                                    "where units.name  ='" +
                                                                    dataGridView1.Rows[i - 1].Cells[4].Value
                                                                        .Stringify() + "' " +
                                                                    "and ItemID =" + dataGridView1.Rows[i - 1]
                                                                        .Cells["ItemID"].Value.Stringify());

                                                                if (dt.Rows.Count == 0)
                                                                    throw new Exception(Program.language != "en"
                                    ? "لا يوجد وحدة لهذا الصنف [" + dataGridView1.Rows[i - 1].Cells["ItemName"].Value + @"] 
بهذا الاسم [" + dataGridView1.Rows[i - 1].Cells[4].Value + @"]. 
إما تم حذف هذا الوحدة او تم تغيير الاسم"
                                    : "There is no unit for this item [" + dataGridView1.Rows[i - 1].Cells["ItemName"].Value + @"]  
with this name [" + dataGridView1.Rows[i - 1].Cells[4].Value + @"]. 
Either this unit has been deleted or the name has been changed");

                                                                var qbill = Convert.ToDecimal(dataGridView1
                                                                    .Rows[i - 1].Cells["Quantity"].Value.Stringify());
                                                                var itmain =
                                                                     Convert.ToDecimal(dt.Rows[0][2].Stringify());
                                                                if (itmain != Convert.ToDecimal(dataGridView1.Rows[i - 1]
                                                                        .Cells["mainIt"].Value.Stringify()))
                                                                {
                                                                    dataGridView1.Rows[i - 1].Cells["mainIt"].Value =
                                                                        itmain;
                                                                }

                                                                var qsales = qbill / itmain;
                                                                //******************************
                                                                query1 += (@"
INSERT INTO Bills(BillNo, Seller, BillType, Name2, Address2, 
TelNo2, Date1, ItemName1,  Quantity1,UnitPrice1, TotalPrice1, 
DiscountValue1, PreviousBalance, BillDate, Paid,
TotalPriceBeforeDiscount1, TotalPriceAfterDiscount1,
GenralTotal, PreviousBalanceWithBaqy,Discountitem,DiscountAmount,
StoreID,Darebaa,ItMain,UnitName,UserId,ReadQnt,TransportValue,
ItemId,BillTime,Notes,Serial,ItemTax)
VALUES ('" + BillNu + @"',
'" + SellerCombo.Text + @"',
'" + BillKindCom.Text + @"',
" + ClientCombo.SelectedValue + @",
'" + BeanKindCom.Text + @"',
'" + dataGridView1.Rows[i - 1].Cells[4].Value + @"',
'" + dateTimePicker1.Value.ToString("yyyy-MM-dd") + @"',
'" + dataGridView1.Rows[i - 1].Cells[2].Value + " " + dataGridView1.Rows[i - 1].Cells[3].Value + @"',
'" + dataGridView1.Rows[i - 1].Cells["Quantity"].Value + @"',
'" + Math.Round(Convert.ToDecimal(dataGridView1.Rows[i - 1].Cells["UnitPrice"].Value.Stringify()),
                                                                                   (ProSetting.Round > 4
                                                                                       ? 5
                                                                                       : ProSetting.Round),
                                                                                   MidpointRounding.AwayFromZero)
                                                                               .ToString("F" + (ProSetting.Round > 4
                                                                                             ? 5
                                                                                             : ProSetting.Round)) + @"',
'" + dataGridView1.Rows[i - 1].Cells["TotalPrice"].Value + @"',
'" + textBox3.Text + @"',
'" + dd.ToString("#0.00") + @"',
'" + dateTimePicker1.Value.ToString("yyyy-MM-dd") + @"',
'" + ggg.ToString("#0.00") + @"',
'" + textBox5.Text + @"',
'" + textBox11.Text + @"',
'" + jjj.ToString("#0.00") + @"',
'" + lll.ToString("#0.00") + @"',
'" + Math.Round(Convert.ToDecimal(dataGridView1.Rows[i - 1].Cells["Discount"].Value.Stringify()),
                                                                                   (ProSetting.Round > 4
                                                                                       ? 5
                                                                                       : ProSetting.Round)
                                                                                   , MidpointRounding.AwayFromZero)
                                                                               .ToString("F" + (ProSetting.Round > 4
                                                                                             ? 5
                                                                                             : ProSetting.Round)
                                                                               ) + @"',
'',
'" + dataGridView1.Rows[i - 1].Cells["StoreID"].Value + @"',
'" + DarebaText.Text + @"',
'" + dataGridView1.Rows[i - 1].Cells["mainIt"].Value + @"',
'" + dataGridView1.Rows[i - 1].Cells[4].Value + @"',
'" + ProSetting.UserIdLo + @"',
'" + ct.NoToTxt(Convert.ToDouble(Convert.ToDecimal(dataGridView1.Rows[i - 1].Cells["Quantity"].Value).NormalizeDecimalPlaces(ProSetting.Round)), "صحيح", "جزء") + @"',
'" + TransportValue.Text + @"',
'" + dataGridView1.Rows[i - 1].Cells["ItemID"].Value + @"',
'" + DateTime.Now.ToString("hh:mm tt", CultureInfo.InvariantCulture) + @"',
'" + textBox1.Text + @"',
'" + dataGridView1.Rows[i - 1].Cells[3].Value + @"',
'" + dataGridView1.Rows[i - 1].Cells["ItemTax"].Value + @"'
);");
                                                                //cmd.ExecuteNonQuery();
                                                                //****************************** userId**************fATOOM***
                                                                var selledItemTotalBuyPrice =
                                                                    Convert.ToDecimal(dataGridView1.Rows[i - 1]
                                                                        .Cells["TotalBuy"].Value.Stringify());
                                                                query1 +=
                                                                    @"
insert into Sales (BillNo,ClientID,ItemID,Quantity,UnitPrice,
TotalPrice,[Date],Seller,itemname,Discount,DiscountAmount,
StoreID,Darebaa,ItMain,UnitId,UnitName,BillType,AfterDiscount,
UserId,ReadQnt,TransportValue,BillTime,Notes,Serial,BuyPrice,UnderDelevDate,Barcode,ItemTax,
ItemCode,UnitCode,CodeType,DiscountValue,ItemDiscountType)
values('" + BillNu + @"',
" + dt55.Rows[0]["ID"] + @",
" + dataGridView1.Rows[i - 1].Cells["ItemID"].Value + @",
" + dataGridView1.Rows[i - 1].Cells["Quantity"].Value + @",
" + dataGridView1.Rows[i - 1].Cells["UnitPrice"].Value + @",
" + dataGridView1.Rows[i - 1].Cells["TotalPrice"].Value + @",
'" + dateTimePicker1.Value.ToString("yyyy-MM-dd") + @"',
'" + SellerCombo.SelectedValue + @"',
'" + dataGridView1.Rows[i - 1].Cells["ItemName"].Value + " " + dataGridView1.Rows[i - 1].Cells["ItemColor"].Value.ToText() +
                                                                    @"',
'" + dataGridView1.Rows[i - 1].Cells["Discount"].Value + @"',
'0',
'" + dataGridView1.Rows[i - 1].Cells["StoreID"].Value + @"',
'" + DarebaText.Text + @"',
'" + dataGridView1.Rows[i - 1].Cells["mainIt"].Value + @"',
'" + dt.Rows[0]["id"] + @"',
'" + dataGridView1.Rows[i - 1].Cells[4].Value + @"',
'" + BillKindCom.Text + @"',
'" + textBox11.Text + @"',
'" + ProSetting.UserIdLo + @"',
'" + ct.NoToTxt(Convert.ToDouble(Convert.ToDecimal(dataGridView1.Rows[i - 1].Cells["Quantity"].Value).NormalizeDecimalPlaces(ProSetting.Round)), "صحيح", "جزء") + @"',
'" + TransportValue.Text + @"',
'" + DateTime.Now.ToString("hh:mm tt", CultureInfo.InvariantCulture) + @"',
'" + textBox1.Text + @"',
'" + dataGridView1.Rows[i - 1].Cells[3].Value + @"',
'" + selledItemTotalBuyPrice.ToString("F" + ProSetting.Round) + @"',
'" + dat1 + "','" + dataGridView1.Rows[i - 1].Cells[1].Value + @"',
'" + dataGridView1.Rows[i - 1].Cells["ItemTax"].Value + @"',
'" + dt.Rows[0]["ItemCode"] + @"',
'" + dt.Rows[0]["UnitCode"] + @"',
'" + dt.Rows[0]["ItemType"] + @"',
'" + dataGridView1.Rows[i - 1].Cells["DiscountValue"].Value + @"',
'" + dataGridView1.Rows[i - 1].Cells["DiscountType"].Value + "');";


                                                                dataSet11.Sales.Rows.Add(i + 1,
                                                                    BillNu,
                                                                    dt55.Rows[0]["ID"].Stringify(),
                                                                    dataGridView1.Rows[i - 1].Cells["ItemID"].Value.Stringify(),
                                                                    dataGridView1.Rows[i - 1].Cells["Quantity"].Value.Stringify(),
                                                                    Math.Round(Convert.ToDecimal(dataGridView1.Rows[i - 1].Cells["UnitPrice"].Value.Stringify()), ProSetting.Round, MidpointRounding.AwayFromZero).ToString("F" + ProSetting.Round),
                                                                    dataGridView1.Rows[i - 1].Cells["TotalPrice"].Value.Stringify(),
                                                                    Convert.ToDateTime(dateTimePicker1.Value.ToString("yyyy-MM-dd")),
                                                                    SellerCombo.SelectedValue.Stringify(),
                                                                    dataGridView1.Rows[i - 1].Cells["ItemName"].Value
                                                                        .Stringify() + " " + dataGridView1.Rows[i - 1]
                                                                        .Cells["ItemColor"].Value,
                                                                    dataGridView1.Rows[i - 1].Cells["Discount"].Value
                                                                        .Stringify(),
                                                                    0,
                                                                    dataGridView1.Rows[i - 1].Cells["StoreID"].Value
                                                                        .Stringify(),
                                                                    DarebaText.Text,
                                                                    dataGridView1.Rows[i - 1].Cells["mainIt"].Value.Stringify(),
                                                                    dt.Rows[0]["id"].Stringify(),
                                                                    dataGridView1.Rows[i - 1].Cells[4].Value.Stringify(),
                                                                    BillKindCom.Text,
                                                                    textBox11.Text,
                                                                    ProSetting.UserIdLo,
                                                                    ct.NoToTxt(
                                                                        Convert.ToDouble(Convert.ToDecimal(dataGridView1.Rows[i - 1].Cells["Quantity"].Value).NormalizeDecimalPlaces(ProSetting.Round)),
                                                                        "صحيح", "جزء").Stringify(),
                                                                    TransportValue.Text,
                                                                    DateTime.Now.ToString("hh:mm tt",
                                                                        CultureInfo.InvariantCulture),
                                                                    selledItemTotalBuyPrice.ToString(
                                                                        "F" + (ProSetting.Round > 4
                                                                            ? 5
                                                                            : ProSetting.Round).Stringify()),
                                                                    textBox1.Text,
                                                                    dataGridView1.Rows[i - 1].Cells[3].Value.Stringify(),
                                                                    dat1,
                                                                    "",
                                                                    "",
                                                                    null,
                                                                    0,
                                                                    ProSetting.UserNameLo,
                                                                    null,
                                                                    "",
                                                                    dataGridView1.Rows[i - 1].Cells[1].Value.Stringify(),
                                                                    dataGridView1.Rows[i - 1].Cells["ItemTax"].Value
                                                                        .Stringify());


                                                                BillValue +=
                                                                     Environment.NewLine + "====================================" + Environment.NewLine
                                                                    + "اسم الصنف: " +
                                                                    dataGridView1.Rows[i - 1].Cells[2].Value
                                                                        .Stringify() + " " +
                                                                    dataGridView1.Rows[i - 1].Cells[3].Value
                                                                        .Stringify() + Environment.NewLine
                                                                    + "الوحدة: " + dataGridView1.Rows[i - 1].Cells[4]
                                                                        .Value.Stringify()
                                                                    + " / الكمية: " +
                                                                    (Math.Round(
                                                                        Convert.ToDecimal(dataGridView1.Rows[i - 1]
                                                                            .Cells[5].Value.Stringify()),
                                                                        ProSetting.Round,
                                                                        MidpointRounding.AwayFromZero))
                                                                    .ToString("F" + (ProSetting.Round > 4
                                                                                  ? 5
                                                                                  : ProSetting.Round).Stringify())
                                                                    + " / سعر الوحدة: " +
                                                                    (Math.Round(
                                                                        Convert.ToDecimal(dataGridView1.Rows[i - 1]
                                                                            .Cells[6].Value.Stringify()),
                                                                        ProSetting.Round,
                                                                        MidpointRounding.AwayFromZero))
                                                                    .ToString("F" + (ProSetting.Round > 4
                                                                                  ? 5
                                                                                  : ProSetting.Round).Stringify())
                                                                    + " / الخصم: " +
                                                                    ((Math.Round(
                                                                          Convert.ToDecimal(dataGridView1.Rows[i - 1]
                                                                              .Cells[5].Value.Stringify()),
                                                                          ProSetting.Round,
                                                                          MidpointRounding.AwayFromZero) *
                                                                      Math.Round(
                                                                          Convert.ToDecimal(dataGridView1.Rows[i - 1]
                                                                              .Cells[6].Value.Stringify()),
                                                                          ProSetting.Round,
                                                                          MidpointRounding.AwayFromZero)) -
                                                                     Math.Round(
                                                                         Convert.ToDecimal(dataGridView1.Rows[i - 1]
                                                                             .Cells["TotalPrice"].Value.Stringify()),
                                                                         ProSetting.Round,
                                                                         MidpointRounding.AwayFromZero))
                                                                    .ToString("F" + (ProSetting.Round > 4
                                                                                  ? 5
                                                                                  : ProSetting.Round).Stringify())
                                                                    + " / الإجمالي: " +
                                                                    (Math.Round(
                                                                        Convert.ToDecimal(dataGridView1.Rows[i - 1]
                                                                            .Cells["TotalPrice"].Value.Stringify()),
                                                                        ProSetting.Round,
                                                                        MidpointRounding.AwayFromZero))
                                                                    .ToString("F" + (ProSetting.Round > 4
                                                                                  ? 5
                                                                                  : ProSetting.Round).Stringify());

                                                                MoveType += "/ اسم الصنف: " +
                                                                            dataGridView1.Rows[i - 1].Cells[2].Value
                                                                                .Stringify() + " " +
                                                                            dataGridView1.Rows[i - 1].Cells[3].Value
                                                                                .Stringify()
                                                                            + "/ الوحدة: " +
                                                                            dataGridView1.Rows[i - 1].Cells[4].Value
                                                                                .Stringify() + " / الكمية: " +
                                                                            (Math.Round(
                                                                                Convert.ToDecimal(dataGridView1
                                                                                    .Rows[i - 1].Cells[5].Value
                                                                                    .Stringify()),
                                                                                (ProSetting.Round > 4
                                                                                    ? 5
                                                                                    : ProSetting.Round),
                                                                                MidpointRounding.AwayFromZero))
                                                                            .ToString("F" + (ProSetting.Round > 4
                                                                                          ? 5
                                                                                          : ProSetting.Round)
                                                                                      .Stringify())
                                                                            + " / سعر الوحدة: " +
                                                                            (Math.Round(
                                                                                Convert.ToDecimal(dataGridView1
                                                                                    .Rows[i - 1].Cells[6].Value
                                                                                    .Stringify()),
                                                                                (ProSetting.Round > 4
                                                                                    ? 5
                                                                                    : ProSetting.Round),
                                                                                MidpointRounding.AwayFromZero))
                                                                            .ToString("F" + (ProSetting.Round > 4
                                                                                          ? 5
                                                                                          : ProSetting.Round)
                                                                                      .Stringify())
                                                                            + " / الخصم: " +
                                                                            ((Math.Round(
                                                                                  Convert.ToDecimal(dataGridView1
                                                                                      .Rows[i - 1].Cells[5].Value
                                                                                      .Stringify()),
                                                                                  (ProSetting.Round > 4
                                                                                      ? 5
                                                                                      : ProSetting.Round),
                                                                                  MidpointRounding.AwayFromZero) *
                                                                              Math.Round(
                                                                                  Convert.ToDecimal(dataGridView1
                                                                                      .Rows[i - 1].Cells[6].Value
                                                                                      .Stringify()),
                                                                                  (ProSetting.Round > 4
                                                                                      ? 5
                                                                                      : ProSetting.Round),
                                                                                  MidpointRounding.AwayFromZero)) -
                                                                             Math.Round(
                                                                                 Convert.ToDecimal(dataGridView1
                                                                                     .Rows[i - 1].Cells["TotalPrice"]
                                                                                     .Value.Stringify()),
                                                                                 (ProSetting.Round > 4
                                                                                     ? 5
                                                                                     : ProSetting.Round),
                                                                                 MidpointRounding.AwayFromZero))
                                                                            .ToString("F" + (ProSetting.Round > 4
                                                                                          ? 5
                                                                                          : ProSetting.Round)
                                                                                      .Stringify())
                                                                            + " / الإجمالي: " +
                                                                            (Math.Round(
                                                                                Convert.ToDecimal(dataGridView1
                                                                                    .Rows[i - 1].Cells["TotalPrice"]
                                                                                    .Value.Stringify()),
                                                                                (ProSetting.Round > 4
                                                                                    ? 5
                                                                                    : ProSetting.Round),
                                                                                MidpointRounding.AwayFromZero))
                                                                            .ToString("F" + (ProSetting.Round > 4
                                                                                          ? 5
                                                                                          : ProSetting.Round)
                                                                                      .Stringify());

                                                                if (ProSetting.ColorOrSerial == "السيريال")
                                                                {
                                                                    if (dataGridView1.Rows[i - 1].Cells[3].Value
                                                                            .ToText() != "")
                                                                    {
                                                                        query1 += "update ItemsSerial set Exist=0 " +
                                                                                  "where  ItemSerial='" +
                                                                                  dataGridView1.Rows[i - 1]
                                                                                      .Cells["ItemColor"].Value
                                                                                      .ToText() + "';";

                                                                    }
                                                                }

                                                                if (ProSetting.UnderDelevBill)
                                                                {
                                                                    if (checkBox1.Checked)
                                                                    {
                                                                        query1 +=
                                                                            @"
INSERT INTO UnderDelevBill (BillNo, ClientName, SellerName, BillType, BillDate, DelveDate, StoreId, 
ItemName, UnitName, Qnt, UnitPrice, TotalPrice, Paid, Backey, DelveryStatus,TotalBill) "
                                                                            + "VALUES('" + BillNoT.Text + "'," +
                                                                            "'" + ClientCombo.Text + "'," +
                                                                            "'" + SellerCombo.Text + "','" +
                                                                            BillKindCom.Text + "'," +
                                                                            "'" + dateTimePicker1.Value
                                                                                .ToString("yyyy-MM-dd") + "'," +
                                                                            "'" + dateTimePicker2.Value
                                                                                .ToString("yyyy-MM-dd") + "'," +
                                                                            "'" + StoreCombo.SelectedValue + "'," +
                                                                            "'" + dataGridView1.Rows[i - 1].Cells[2]
                                                                                .Value.Stringify() + " " +
                                                                            dataGridView1.Rows[i - 1].Cells[3].Value
                                                                                .Stringify() + "'," +
                                                                            "'" + dataGridView1.Rows[i - 1].Cells[4]
                                                                                .Value.Stringify() + "'," +
                                                                            "'" + dataGridView1.Rows[i - 1]
                                                                                .Cells["Quantity"].Value.Stringify() +
                                                                            "'," +
                                                                            "'" + dataGridView1.Rows[i - 1]
                                                                                .Cells["UnitPrice"].Value.Stringify() +
                                                                            "'," +
                                                                            "'" + dataGridView1.Rows[i - 1]
                                                                                .Cells["TotalPrice"].Value.Stringify() +
                                                                            "'," +
                                                                            "'" + textBox10.Text + "'," +
                                                                            "'" + label18.Text + "'," +
                                                                            "'" + "False" + "'," +
                                                                            "'" + textBox11.Text + "');";
                                                                    }
                                                                }
                                                            }

                                                            cmd.CommandText = query1;
                                                            cmd.ExecuteNonQuery();
                                                            MoveType += " / الاجمالى قبل الخصم: " + textBox5.Text +
                                                                        " / نسبة الخصم: " + textBox4.Text +
                                                                        " / قيمة الخصم: " + textBox3.Text +
                                                                        " / نسبة ضريبة القيمة المضافة: " +
                                                                        DarebaText.Text +
                                                                        " / تكلفة النقل: " + TransportValue.Text +
                                                                        " / الضريبة المركبة: " + textBox20.Text +
                                                                        " / الاجمالى بعد الخصم: " + textBox11.Text +
                                                                        " / المدفوع: " + textBox10.Text +
                                                                        " / الباقي: " + label18.Text;

                                                            var clientOperationsQuery =
                                                                @"Declare @LastRaseed decimal(18,5);
Set @LastRaseed= Isnull((select sum(Madeen)- sum(Daen) from client5 where ClientID='" + dt55.Rows[0]["ID"].Stringify() +
                                                                "'),0);";

                                                            clientOperationsQuery += Environment.NewLine;
                                                            if (ProSetting.LinkBilltypeWithCashFromClient)
                                                            {
                                                                if (ProSetting.Itemsinbalancesheet == true)
                                                                {
                                                                    clientOperationsQuery += @"
insert into Client5 (ClientID,Daen,Madeen,Raseed,Bayan,[Date],BillNo" + (ProSetting.TerminalPackage ? ",TerminalTransactionID" : "") + @") 
values (" + dt55.Rows[0]["ID"].Stringify() + "," + textBox10.Text + "," + textBox11.Text +
                                                                                             ",(Isnull(@LastRaseed,0) + "
                                                                                             + (Convert.ToDecimal(textBox11.Text)
                                                                                                -
                                                                                                Convert.ToDecimal(textBox10.Text)) +
                                                                                             "),'مبيعات رقم '+ + '" +
                                                                                             BillNu + BillValue +
                                                                                             "'," +
                                                                                             "'" + dateTimePicker1
                                                                                                 .Value
                                                                                                 .ToString(
                                                                                                     "yyyy-MM-dd") +
                                                                                             "'," +
                                                                                             "'" + BillNu + "'"
                                                                                             + (ProSetting.TerminalPackage ? "," + transactionId : "") + ");";
                                                                }
                                                                else
                                                                {
                                                                    clientOperationsQuery += @"
insert into Client5 (ClientID,Daen,Madeen,Raseed,Bayan,[Date],BillNo" + (ProSetting.TerminalPackage ? ",TerminalTransactionID" : "") + @") 
values (" + dt55.Rows[0]["ID"].Stringify() + "," + textBox10.Text + "," + textBox11.Text +
                                                                                             ",(Isnull(@LastRaseed,0) + " +
                                                                                             (Convert.ToDecimal(
                                                                                                  textBox11.Text) -
                                                                                              Convert.ToDecimal(
                                                                                                  textBox10.Text)) +
                                                                                             ")," +
                                                                                             "'مبيعات رقم '+ + '" +
                                                                                             BillNu + note + "'," +
                                                                                             "'" + dateTimePicker1
                                                                                                 .Value
                                                                                                 .ToString("yyyy-MM-dd") +
                                                                                             "'," +
                                                                                             "'" + BillNu + "'"
                                                                                             + (ProSetting.TerminalPackage ? "," + transactionId : "") + ");";

                                                                }

                                                                //******
                                                                clientOperationsQuery += Environment.NewLine;
                                                                clientOperationsQuery +=
                                                                    @"insert into ClientAccounts (ClientID,Pay,[Date],Notes,SellerId,ClientMoveID) 
values(" + dt55.Rows[0]["ID"].Stringify() + "," + textBox10.Text + ",'" + dateTimePicker1.Value.ToString("yyyy-MM-dd") +
                                                                    "','" + "مدفوع" + "','" +
                                                                    SellerCombo.SelectedValue.Stringify() + "','" +
                                                                    ClientMoveID + "');";
                                                                clientOperationsQuery += Environment.NewLine;
                                                            }
                                                            else
                                                            {
                                                                if (ProSetting.CancelMadfo)
                                                                {
                                                                    //r = (m - d);
                                                                    if (ProSetting.Itemsinbalancesheet == true)
                                                                    {
                                                                        clientOperationsQuery += @"
insert into Client5 (ClientID,Daen,Madeen,Raseed,Bayan,[Date],BillNo
" + (ProSetting.TerminalPackage ? ",TerminalTransactionID" : "") + @") 
values (" + dt55.Rows[0]["ID"] + @",
" + textBox11.Text + @",
" + textBox11.Text + @",
Isnull(@LastRaseed,0)," + @"
'مبيعات رقم '+ + '" + BillNu + BillValue + @"',
'" + dateTimePicker1.Value.ToString("yyyy-MM-dd") + @"',
'" + BillNu + "'" + (ProSetting.TerminalPackage ? "," + transactionId : "") + "); ";
                                                                    }
                                                                    else
                                                                    {
                                                                        clientOperationsQuery += @"
insert into Client5 (ClientID,Daen,Madeen,Raseed,Bayan,[Date],BillNo" + (ProSetting.TerminalPackage ? ",TerminalTransactionID" : "") + @") 
values (" + dt55.Rows[0]["ID"].Stringify() + "," + textBox11.Text + "," + textBox11.Text +
                                                                                                 ",Isnull(@LastRaseed,0),'مبيعات رقم '+ + '" +
                                                                                                 BillNu + note + "','" +
                                                                                                 dateTimePicker1.Value
                                                                                                     .ToString("yyyy-MM-dd") +
                                                                                                 "','" + BillNu + "'" + (ProSetting.TerminalPackage ? "," + transactionId : "") + "); ";

                                                                    }

                                                                    clientOperationsQuery += Environment.NewLine;
                                                                    //******

                                                                    clientOperationsQuery +=
                                                                        "insert into ClientAccounts (ClientID,Pay,[Date],Notes,SellerId,ClientMoveID)values(" +
                                                                        dt55.Rows[0]["ID"].Stringify() + "," +
                                                                        textBox11.Text + ",'" +
                                                                        dateTimePicker1.Value.ToString("yyyy-MM-dd") +
                                                                        "','" +
                                                                        "مدفوع" + "','" +
                                                                        SellerCombo.SelectedValue.Stringify() + "','" +
                                                                        ClientMoveID + "');";
                                                                    clientOperationsQuery += Environment.NewLine;
                                                                }
                                                                else if (ProSetting.CancelMadfoForNakdi &&
                                                                         ProSetting.NakdiClient == ClientCombo.SelectedValue.ToInt32())
                                                                {
                                                                    //r = (m - d);
                                                                    if (ProSetting.Itemsinbalancesheet == true)
                                                                    {
                                                                        clientOperationsQuery += @"
insert into Client5 (ClientID,Daen,Madeen,Raseed,Bayan,[Date],BillNo" + (ProSetting.TerminalPackage ? ",TerminalTransactionID" : "") + @") 
values (" + dt55.Rows[0]["ID"].Stringify() + "," + textBox11.Text + "," + textBox11.Text +
                                                                                                 ",Isnull(@LastRaseed,0),'مبيعات رقم '+ + '" +
                                                                                                 BillNu + BillValue +
                                                                                                 "','" + dateTimePicker1
                                                                                                     .Value
                                                                                                     .ToString("yyyy-MM-dd") +
                                                                                                 "','" + BillNu + "'" + (ProSetting.TerminalPackage ? "," + transactionId : "") + "); ";
                                                                    }
                                                                    else
                                                                    {
                                                                        clientOperationsQuery += @"
insert into Client5 (ClientID,Daen,Madeen,Raseed,Bayan,[Date],BillNo" + (ProSetting.TerminalPackage ? ",TerminalTransactionID" : "") + @") 
values (" + dt55.Rows[0]["ID"].Stringify() + "," + textBox11.Text + "," + textBox11.Text +
                                                                                                 ",Isnull(@LastRaseed,0),'مبيعات رقم '+ + '" +
                                                                                                 BillNu + note + "','" +
                                                                                                 dateTimePicker1.Value
                                                                                                     .ToString("yyyy-MM-dd") +
                                                                                                 "','" + BillNu + "'" + (ProSetting.TerminalPackage ? "," + transactionId : "") + "); ";

                                                                    }

                                                                    //******
                                                                    clientOperationsQuery += Environment.NewLine;
                                                                    clientOperationsQuery +=
                                                                        "insert into ClientAccounts (ClientID,Pay,[Date],Notes,SellerId,ClientMoveID)values(" +
                                                                        dt55.Rows[0]["ID"].Stringify() + "," +
                                                                        textBox11.Text + ",'" +
                                                                        dateTimePicker1.Value.ToString("yyyy-MM-dd") +
                                                                        "','" +
                                                                        "مدفوع" + "','" +
                                                                        SellerCombo.SelectedValue.Stringify() + "','" +
                                                                        ClientMoveID + "');";
                                                                    clientOperationsQuery += Environment.NewLine;
                                                                }
                                                                else
                                                                {
                                                                    // r = ((m - d) + (Convert.ToDecimal(textBox11.Text) - Convert.ToDecimal(textBox10.Text)));

                                                                    if (ProSetting.Itemsinbalancesheet == true)
                                                                    {
                                                                        clientOperationsQuery += @"
insert into Client5 (ClientID,Daen,Madeen,Raseed,Bayan,[Date],BillNo" + (ProSetting.TerminalPackage ? ",TerminalTransactionID" : "") + @") 
values (" + dt55.Rows[0]["ID"].Stringify() + "," + textBox10.Text + "," + textBox11.Text +
                                                                                                 ",(Isnull(@LastRaseed,0) + "
                                                                                                 + (Convert.ToDecimal(
                                                                                                        textBox11
                                                                                                            .Text) -
                                                                                                    Convert.ToDecimal(
                                                                                                        textBox10.Text)
                                                                                                 ) +
                                                                                                 "),'مبيعات رقم '+ + '" +
                                                                                                 BillNu + BillValue +
                                                                                                 "'," +
                                                                                                 "'" + dateTimePicker1
                                                                                                     .Value
                                                                                                     .ToString("yyyy-MM-dd") +
                                                                                                 "'," +
                                                                                                 "'" + BillNu + "'" + (ProSetting.TerminalPackage ? "," + transactionId : "") + "); ";
                                                                    }
                                                                    else
                                                                    {
                                                                        clientOperationsQuery += @"
insert into Client5 (ClientID,Daen,Madeen,Raseed,Bayan,[Date],BillNo" + (ProSetting.TerminalPackage ? ",TerminalTransactionID" : "") + @") 
values (" + dt55.Rows[0]["ID"].Stringify() + "," + textBox10.Text + "," + textBox11.Text +
                                                                                                 ",(Isnull(@LastRaseed,0) + " +
                                                                                                 (Convert.ToDecimal(
                                                                                                      textBox11.Text) -
                                                                                                  Convert.ToDecimal(
                                                                                                      textBox10.Text)) +
                                                                                                 ")," +
                                                                                                 "'مبيعات رقم '+ + '" +
                                                                                                 BillNu + note + "'," +
                                                                                                 "'" + dateTimePicker1
                                                                                                     .Value
                                                                                                     .ToString("yyyy-MM-dd") +
                                                                                                 "'," +
                                                                                                 "'" + BillNu + "'" + (ProSetting.TerminalPackage ? "," + transactionId : "") + "); ";

                                                                    }

                                                                    //******
                                                                    clientOperationsQuery += Environment.NewLine;
                                                                    clientOperationsQuery +=
                                                                        @"insert into ClientAccounts (ClientID,Pay,[Date],Notes,SellerId,ClientMoveID) 
values(" + dt55.Rows[0]["ID"].Stringify() + "," + textBox10.Text + ",'" + dateTimePicker1.Value.ToString("yyyy-MM-dd") +
                                                                        "','" + "مدفوع" + "','" +
                                                                        SellerCombo.SelectedValue.Stringify() + "','" +
                                                                        ClientMoveID + "');";
                                                                    clientOperationsQuery += Environment.NewLine;
                                                                }
                                                            }

                                                            clientOperationsQuery +=
                                                                @"
insert into sss (BillNo,PreviousBalance,BillDate,Paid,GenralTotal,PreviousBalanceWithBaqy) 
values ('" + BillNu + "'," + dd + ",'" + dateTimePicker1.Value.ToString("yyyy-MM-dd") + "'," + ggg + "," + jjj + "," +
                                                                lll + ");";

                                                            try
                                                            {
                                                                dataSet11.sss.Rows.Add(BillNu, dd,
                                                                    dateTimePicker1.Value.ToString("yyyy-MM-dd"), ggg, jjj,
                                                                    lll);
                                                            }
                                                            catch
                                                            {
                                                                try
                                                                {
                                                                    dataSet11.sss.Rows.Add(BillNu, dd,
                                                                        dateTimePicker1.Value.ToString("yyyy-MM-dd"),
                                                                        ggg, jjj, lll);
                                                                }
                                                                catch
                                                                {
                                                                    dataSet11.sss.Rows.Add(BillNu, dd,
                                                                        dateTimePicker1.Value.ToString("dd/MM/yyyy"),
                                                                        ggg, jjj, lll);
                                                                }
                                                            }

                                                            dataSet11.Sellers.Rows.Add(SellerCombo.SelectedValue,
                                                                SellerCombo.Text);
                                                            dataSet11.Users.Rows.Add(
                                                                FrmMainNEW.CurrentUser["ID"].Stringify(),
                                                                FrmMainNEW.CurrentUser["UserName"].Stringify());


                                                            clientOperationsQuery += Environment.NewLine;

                                                            clientOperationsQuery +=
                                                                @"insert into Discounts (DiscountOut,[Date],SalesBillNo) 
values (" + textBox3.Text + ",'" + dateTimePicker1.Value.ToString("yyyy-MM-dd") + "','" + BillNoT.Text + "');";

                                                            clientOperationsQuery += Environment.NewLine;

                                                            cmd.CommandText = clientOperationsQuery;
                                                            cmd.ExecuteNonQuery();

                                                            string queryitems = "";
                                                            //string updateStore = "";
                                                            var billDate = "";
                                                            try
                                                            {
                                                                billDate = dateTimePicker1.Value
                                                                    .ToString("dd/MM/yyyy");
                                                            }
                                                            catch (Exception exc)
                                                            {
                                                                billDate = dateTimePicker1.Value
                                                                    .ToString("yyyy-MM-dd");
                                                                var dateArray = billDate.Split('/');
                                                                billDate = dateArray[1] + "/" +
                                                                           dateArray[0] + "/" +
                                                                           dateArray[2];
                                                            }

                                                            for (int i = 1; i < dataGridView1.Rows.Count; i++)
                                                            {
                                                                var selledItemId =
                                                                    dataGridView1.Rows[i - 1].Cells["ItemID"].Value;
                                                                var selledItemStoreId =
                                                                    dataGridView1.Rows[i - 1].Cells["StoreID"]
                                                                        .Value;

                                                                var selledItemBuyPrice =
                                                                    Convert.ToDecimal(dataGridView1.Rows[i - 1]
                                                                        .Cells["buyPrice"].Value.Stringify());

                                                                var selledItemTotalBuyPrice = Convert.ToDecimal(dataGridView1.Rows[i - 1]
                                                                    .Cells["TotalBuy"].Value.Stringify());

                                                                var selledItemName =
                                                                    dataGridView1.Rows[i - 1].Cells["ItemName"].Value.ToText()
                                                                    + " "
                                                                    + dataGridView1.Rows[i - 1].Cells["ItemColor"]
                                                                        .Value.ToText();

                                                                var selledItemUnitName = dataGridView1.Rows[i - 1].Cells[4].Value;
                                                                var selledItemQnt = dataGridView1.Rows[i - 1].Cells["Quantity"].Value;
                                                                var selledItemTotalPrice = dataGridView1.Rows[i - 1].Cells["TotalPrice"].Value;
                                                                var selledItemUnitPrice =
                                                                    Convert.ToDecimal(dataGridView1.Rows[i - 1]
                                                                        .Cells["UnitPrice"].Value);

                                                                DataRow dataRow;
                                                                try
                                                                {
                                                                    if (ProSetting.LoadItemsAsCache)
                                                                    {
                                                                        dataRow = FrmMainNEW.dtItems.AsEnumerable()
                                                                            .FirstOrDefault(row =>
                                                                                int.Parse(row["ID"].Stringify())
                                                                                == int.Parse(dataGridView1
                                                                                    .Rows[i - 1].Cells["ItemID"]
                                                                                    .Value.Stringify()));
                                                                    }
                                                                    else
                                                                    {
                                                                        dataRow = Search2(cmd,
                                                                                "Select Khadamy From Items Where ID='" +
                                                                                dataGridView1.Rows[i - 1]
                                                                                    .Cells["ItemID"].Value + "'")
                                                                            .Rows[0];
                                                                    }
                                                                }
                                                                catch
                                                                {
                                                                    dataRow = Search2(cmd,
                                                                        "Select Khadamy From Items Where ID='" +
                                                                        dataGridView1.Rows[i - 1].Cells["ItemID"]
                                                                            .Value + "'").Rows[0];
                                                                }

                                                                if (dataRow == null)
                                                                    dataRow = Search2(cmd,
                                                                        "Select Khadamy From Items Where ID='" +
                                                                        dataGridView1.Rows[i - 1].Cells["ItemID"]
                                                                            .Value + "'").Rows[0];
                                                                if (dataRow == null)
                                                                {
                                                                    throw new Exception(Program.language != "en"
                                    ? "تعذر العثور علي بيانات لهذا الصنف [" + dataGridView1.Rows[i - 1].Cells["ItemName"].Value + @"] ..  تأكد من وجوده و عدم حذفه أثناء عمل الفاتورة"
                                    : "Could not find data for this item [" + dataGridView1.Rows[i - 1].Cells["ItemName"].Value + @"] .. Make sure it exists and not deleted while creating the invoice");
                                                                }
                                                                if (Convert.ToBoolean(dataRow["Khadamy"]
                                                                    .Stringify()) == false)
                                                                {
                                                                    decimal PriceItem =
                                                                        Math.Round(
                                                                            (Convert.ToDecimal(dataGridView1
                                                                                 .Rows[i - 1].Cells["TotalPrice"]
                                                                                 .Value)
                                                                             / Convert.ToDecimal(dataGridView1
                                                                                 .Rows[i - 1].Cells["Quantity"]
                                                                                 .Value))
                                                                            , (ProSetting.Round > 4
                                                                                ? 5
                                                                                : ProSetting.Round)
                                                                            , MidpointRounding.AwayFromZero);

                                                                    decimal DiscountValue = Math.Round(
                                                                        (PriceItem * Convert.ToDecimal(NesbaLblsNew
                                                                             .Text) / 100)
                                                                        , (ProSetting.Round > 4
                                                                            ? 5
                                                                            : ProSetting.Round)
                                                                        , MidpointRounding.AwayFromZero);

                                                                    decimal Price = 0;
                                                                    decimal TaxRate =
                                                                        Convert.ToDecimal(DarebaText.Text);

                                                                    if (ProSetting.DarebaAfterDiscount)
                                                                    {
                                                                        Price = Math.Round(
                                                                            ((PriceItem - DiscountValue) +
                                                                             ((PriceItem - DiscountValue) *
                                                                              (TaxRate) / 100))
                                                                            , (ProSetting.Round > 4
                                                                                ? 5
                                                                                : ProSetting.Round)
                                                                            , MidpointRounding.AwayFromZero);
                                                                    }
                                                                    else
                                                                    {
                                                                        Price = Math.Round(
                                                                            ((PriceItem - DiscountValue) +
                                                                             (PriceItem * (TaxRate) / 100))
                                                                            , (ProSetting.Round > 4
                                                                                ? 5
                                                                                : ProSetting.Round)
                                                                            , MidpointRounding.AwayFromZero);
                                                                    }

                                                                    decimal IncomePrice = 0, OutcomePrice = 0;
                                                                    OutcomePrice = Math.Round((
                                                                            Price * Convert.ToDecimal(dataGridView1
                                                                                .Rows[i - 1].Cells["Quantity"]
                                                                                .Value))
                                                                        , (ProSetting.Round > 4
                                                                            ? 5
                                                                            : ProSetting.Round)
                                                                        , MidpointRounding.AwayFromZero);
                                                                    dt = new DataTable();
                                                                    //dt = Search2(cmd, "select * from Store where StoreID = '" + dataGridView1.Rows[i - 1].Cells["StoreID"].Value.Stringify() + "' and ItemID=" + dataGridView1.Rows[i - 1].Cells["ItemID"].Value.Stringify());
                                                                    if (Convert.ToBoolean(dataGridView1.Rows[i - 1]
                                                                        .Cells["UnderDelevItem"].Value))
                                                                    {
                                                                        queryitems += SetItemsInsertQueryStart(queryitems);
                                                                        queryitems += AddItemToUnderDelivery(dataGridView1.Rows[i - 1]);


                                                                        queryitems += Environment.NewLine;
                                                                    }
                                                                    else
                                                                    {
                                                                        queryitems += SetItemsInsertQueryStart(queryitems);
                                                                        /////////////////
                                                                        queryitems +=
                                                                            SetItemStoreQnt(
                                                                                queryitems,
                                                                                dataGridView1.Rows[i - 1],
                                                                                selledItemStoreId,
                                                                                selledItemId);

                                                                        var collectedItem = _dcItemComponents.FirstOrDefault(itm => itm.Key.Key ==
                              dataGridView1.Rows[i - 1].Cells["ItemID"].Value.ToInt32()
                              && itm.Key.Value == dataGridView1.Rows[i - 1].Cells["StoreID"].Value.ToInt32());

                                                                        var isItemAssembled = collectedItem.Value != null && collectedItem.Key.Key != 0;

                                                                        queryitems +=
                                                                            ProSetting.SkipQuantityAssemblingOfAnItem && isItemAssembled
                                                                            ? ValidateCollectedItemComponentsQnt(dataGridView1.Rows[i - 1],
                                                                                                                 selledItemStoreId,
                                                                                                                 selledItemId,
                                                                                                                 ClientMoveID)
                                                                                + ValidateCollectedItemQnt(dataGridView1.Rows[i - 1], ClientMoveID)

                                                                                + SetCollectedItemComponentsInsert(dataGridView1.Rows[i - 1],
                                                                                                                  selledItemStoreId,
                                                                                                                  selledItemId,
                                                                                                                  ClientMoveID,
                                                                                                                  billDate,
                                                                                                                  selledItemTotalBuyPrice,
                                                                                                                  selledItemName,
                                                                                                                  selledItemUnitName,
                                                                                                                  selledItemTotalPrice,
                                                                                                                  selledItemUnitPrice)
                                                                                + AddUnderDeliveryCollectedItemComponents(dataGridView1.Rows[i - 1])
                                                                            : AddItemToUnderDeliveryIfQntNotEnough(dataGridView1.Rows[i - 1]);

                                                                        /////////////////
                                                                        queryitems += UpdateItemStoreQnt(dataGridView1.Rows[i - 1],
                                                                                                         IncomePrice,
                                                                                                         OutcomePrice);
                                                                        /////////////////
                                                                        queryitems += @"
-----------------------------------------------------------------
----------------------------------
-----------------------------------------------------------------
";
                                                                    }
                                                                }
                                                            }

                                                            if (queryitems != "")
                                                            {
                                                                //Clipboard.SetText(queryitems);

                                                                queryitems += "Select 'Done',@AddedUnderDeliveryItems;";
                                                                queryitems += Environment.NewLine;
                                                                var dtresult = Search2(cmd, queryitems);
                                                                if (dtresult.Rows.Count == 0)
                                                                {
                                                                    queryitems.WriteLog("اصناف فاتورة رقم" + BillNu);
                                                                    throw new Exception(Tr.M2.m452);
                                                                }
                                                                else if (dtresult.Rows[0][0].ToText() != "Done")
                                                                {
                                                                    ST.Rollback();
                                                                    var message = dtresult.Rows[0][0].Stringify()
                                                                        .Replace(" char(10) ", Environment.NewLine);
                                                                    new FrmMessageDialog(message, Tr.M1.error, this,
                                                                        DialogResult.OK).ShowDialog();
                                                                    var index = int.Parse(
                                                                        dtresult.Rows[0][1].Stringify());
                                                                    var newStoreQuantity =
                                                                        !ProSetting.SkipQuantityAssemblingOfAnItem
                                                                            ? Convert.ToDecimal(dtresult.Rows[0][2])
                                                                            : Convert.ToDecimal(Search2(cmd,
                                                                                    "Select Quantity From Store " +
                                                                                    "Where ItemId='" +
                                                                                    dataGridView1.Rows[index]
                                                                                        .Cells["ItemID"].Value + "' " +
                                                                                    "and StoreId='" +
                                                                                    dataGridView1.Rows[index]
                                                                                        .Cells["StoreID"].Value + "'")
                                                                                .Rows[0][0]);

                                                                    dataGridView1.Rows[index].Cells["qntStore"].Value =
                                                                         newStoreQuantity.NormalizeDecimalPlaces().Stringify();

                                                                    dataGridView1.ClearSelection();
                                                                    dataGridView1.Rows[index].Selected = true;

                                                                    if (dtresult.Columns.Count > 3)
                                                                    {
                                                                        var newitembuyPrice =
                                                                            Convert.ToDecimal(dtresult.Rows[0][3]);

                                                                        try
                                                                        {
                                                                            HandleCellValueChanged();

                                                                            dataGridView1.Rows[index].Cells["ItemBuyPrice"].Value = newitembuyPrice.NormalizeDecimalPlaces().Stringify();

                                                                            dataGridView1.Rows[index].Cells["buyPrice"].Value =
                                                                                 newitembuyPrice.NormalizeDecimalPlaces().Stringify();

                                                                            dataGridView1.Rows[index]
                                                                                .Cells["UnitPrice"].Value = 0;
                                                                        }
                                                                        catch (Exception exccp)
                                                                        {
                                                                        }
                                                                        finally
                                                                        {
                                                                            ReleaseCellValueChanged();
                                                                        }
                                                                        dataGridView1.CurrentCell =
                                                                            dataGridView1.Rows[index]
                                                                                .Cells["UnitPrice"];
                                                                        dataGridView1.BeginEdit(true);

                                                                    }
                                                                    return;
                                                                }
                                                                else
                                                                {
                                                                    if (!string.IsNullOrEmpty(
                                                                        dtresult.Rows[0][1].Stringify()))
                                                                    {
                                                                        underDeliveryMessage += Program.language != "en"
                                                                            ? "تنبيه : كمية المخزون لبعض الأصناف المضافه للفاتورة لا تكفي " + Environment.NewLine + @" لذلك تم إضافتها تحت التسليم " + Environment.NewLine + @" التفاصيل : " + dtresult.Rows[0][1].Stringify()
                                                                            : "Attention: There are some items in the invoice which their stock is not enough " + Environment.NewLine + @" they have been added under delivery " + Environment.NewLine + @" Details : " + dtresult.Rows[0][1].Stringify();
                                                                    }
                                                                }
                                                            }

                                                            var servicesQuery = "";
                                                            for (int i = 0; i < dtServices.Rows.Count; i++)
                                                            {
                                                                servicesQuery +=
                                                                    "insert into ClientServices (ServiceID, BillNo, ClientID, Date) values ('" +
                                                                    dtServices.Rows[i][0].Stringify() + "','" + BillNu +
                                                                    "'," + dt55.Rows[0]["ID"].Stringify() + ",'" +
                                                                    dateTimePicker1.Value.ToString("yyyy-MM-dd") +
                                                                    "');";
                                                            }

                                                            if (servicesQuery != "")
                                                            {
                                                                cmd.CommandText = servicesQuery;
                                                                cmd.ExecuteNonQuery();
                                                            }

                                                            string sd = ClientCombo.Text + " لفاتوره مبيعات رقم  " +
                                                                        BillNu;
                                                            decimal StockVal = Convert.ToDecimal(textBox9.Text);
                                                            if (ProSetting.LinkBilltypeWithCashFromClient)
                                                            {
                                                                if (textBox9.Text != "0")
                                                                {
                                                                    cmd.CommandText =
                                                                        "update Stock set [Value] =  [Value] +" +
                                                                        Convert.ToDecimal(textBox9.Text) + " " +
                                                                        "where Id=" +
                                                                        StockCombo.SelectedValue.Stringify() + ";";
                                                                    cmd.CommandText += Environment.NewLine;
                                                                    cmd.CommandText +=
                                                                        "insert into StokeMove ( Type,Price,bean,[date],BillNo,StockId ) " +
                                                                        "values ('فاتورة مبيعات' ," +
                                                                        Convert.ToDecimal(textBox9.Text) + "," +
                                                                        "'" + sd + "'," +
                                                                        "'" + dateTimePicker1.Value
                                                                            .ToString("yyyy-MM-dd") + "'," +
                                                                        "'" + BillNu + "','" +
                                                                        StockCombo.SelectedValue.Stringify() + "')";
                                                                    cmd.CommandText += Environment.NewLine;

                                                                }
                                                                else
                                                                    cmd.CommandText = "";

                                                                cmd.CommandText +=
                                                                    @"INSERT INTO [dbo].[DeliveredAmountsIntoBills]
                                                                            ([BillNo]
                                                                        ,[Date]
                                                                        ,[DeliveredCachAmount]
                                                                        ,[RemainingAmount]
                                                                        ,[RemainingOfbill]
                                                                        ,[StockId]
                                                                        ,[PaidInCach]
                                                                        ,[BankId]
                                                                        ,[PaidInBank])
                                                                    VALUES(" +
                                                                    "'" + BillNu + "'," +
                                                                    "'" + dateTimePicker1.Value.ToString("yyyy-MM-dd") +
                                                                    "'," +
                                                                    "'" + TxtDeliveredAmountFromClient.Text + "'," +
                                                                    "'" + LblRemainingAmountToTheClient.Text + "'," +
                                                                    "'" + label18.Text + "'," +
                                                                    "'" + StockCombo.SelectedValue + "'," +
                                                                    "'" + textBox9.Text + "'," +
                                                                    "'" + BankCombo.SelectedValue + "'," +
                                                                    "'" + textBox12.Text + "')";
                                                                cmd.ExecuteNonQuery();


                                                                try
                                                                {
                                                                    dataSet11.DeliveredAmountsIntoBills.Rows.Add(BillNu,
                                                                        dateTimePicker1.Value.ToString("yyyy-MM-dd"),
                                                                        TxtDeliveredAmountFromClient.Text,
                                                                        LblRemainingAmountToTheClient.Text,
                                                                        label18.Text,
                                                                        StockCombo.SelectedValue.Stringify(),
                                                                        textBox9.Text,
                                                                        BankCombo.SelectedValue,
                                                                        textBox12.Text);
                                                                }
                                                                catch
                                                                {
                                                                    try
                                                                    {
                                                                        dataSet11.DeliveredAmountsIntoBills.Rows.Add(
                                                                            BillNu,
                                                                            dateTimePicker1.Value
                                                                                .ToString("yyyy-MM-dd"),
                                                                            TxtDeliveredAmountFromClient.Text,
                                                                            LblRemainingAmountToTheClient.Text,
                                                                            label18.Text,
                                                                            StockCombo.SelectedValue.Stringify(),
                                                                            textBox9.Text,
                                                                            BankCombo.SelectedValue,
                                                                            textBox12.Text);

                                                                    }
                                                                    catch
                                                                    {
                                                                        dataSet11.DeliveredAmountsIntoBills.Rows.Add(
                                                                            BillNu,
                                                                            dateTimePicker1.Value
                                                                                .ToString("dd/MM/yyyy"),
                                                                            TxtDeliveredAmountFromClient.Text,
                                                                            LblRemainingAmountToTheClient.Text,
                                                                            label18.Text,
                                                                            StockCombo.SelectedValue.Stringify(),
                                                                            textBox9.Text,
                                                                            BankCombo.SelectedValue,
                                                                            textBox12.Text);
                                                                    }
                                                                }
                                                            }
                                                            else
                                                            {

                                                                if (ProSetting.CancelMadfo)
                                                                {
                                                                    if (Convert.ToDecimal(textBox9.Text) != 0)
                                                                    {
                                                                        cmd.CommandText =
                                                                            "update Stock set [Value] =  [Value] +" +
                                                                            (Convert.ToDecimal(textBox9.Text) +
                                                                             Convert.ToDecimal(label18.Text)) + " " +
                                                                            "where Id=" +
                                                                            StockCombo.SelectedValue.Stringify() + ";";

                                                                        cmd.CommandText += Environment.NewLine;
                                                                        cmd.CommandText +=
                                                                            "insert into StokeMove ( Type,Price,bean,[date],BillNo,StockId ) " +
                                                                            "values ('فاتورة مبيعات' ," +
                                                                            "" + (Convert.ToDecimal(textBox9.Text) +
                                                                                  Convert.ToDecimal(label18.Text)) +
                                                                            ",'" +
                                                                            sd +
                                                                            "','" +
                                                                            dateTimePicker1.Value.ToString("yyyy-MM-dd") +
                                                                            "','" + BillNu + "','" +
                                                                            StockCombo.SelectedValue.Stringify() + "');";
                                                                        cmd.CommandText += Environment.NewLine;

                                                                        StockVal += Convert.ToDecimal(label18.Text);
                                                                    }
                                                                    else
                                                                        cmd.CommandText = "";


                                                                    cmd.CommandText +=
                                                                        "insert into CancelMafoBill (BillNo, Date, Madfo3, Rest)" +
                                                                        " values ('" + BillNu + "', " +
                                                                        "'" + dateTimePicker1.Value
                                                                            .ToString("yyyy-MM-dd") + "', " +
                                                                        "'" + textBox10.Text + "', " +
                                                                        "'" + label18.Text + "')";

                                                                    cmd.ExecuteNonQuery();


                                                                    try
                                                                    {
                                                                        dataSet11.CancelMafoBill.Rows.Add(BillNu,
                                                                            dateTimePicker1.Value.ToString("yyyy-MM-dd"),
                                                                            textBox10.Text, label18.Text);
                                                                    }
                                                                    catch
                                                                    {
                                                                        try
                                                                        {
                                                                            dataSet11.CancelMafoBill.Rows.Add(BillNu,
                                                                                dateTimePicker1.Value.ToString(
                                                                                    "yyyy-MM-dd"),
                                                                                textBox10.Text, label18.Text);
                                                                        }
                                                                        catch
                                                                        {
                                                                            dataSet11.CancelMafoBill.Rows.Add(BillNu,
                                                                                dateTimePicker1.Value.ToString(
                                                                                    "dd/MM/yyyy"),
                                                                                textBox10.Text, label18.Text);
                                                                        }
                                                                    }
                                                                }
                                                                else if (ProSetting.CancelMadfoForNakdi &&
                                                                          ProSetting.NakdiClient == ClientCombo.SelectedValue.ToInt32())
                                                                {
                                                                    if (Convert.ToDecimal(textBox9.Text) != 0)
                                                                    {
                                                                        cmd.CommandText =
                                                                            "update Stock set [Value] =  [Value] +" +
                                                                            (Convert.ToDecimal(textBox9.Text) +
                                                                             Convert.ToDecimal(label18.Text)) + " " +
                                                                            "where Id=" + StockCombo.SelectedValue
                                                                                .Stringify();

                                                                        cmd.CommandText += Environment.NewLine;
                                                                        cmd.CommandText +=
                                                                            "insert into StokeMove ( Type,Price,bean,[date],BillNo,StockId ) " +
                                                                            "values ('فاتورة مبيعات' ," +
                                                                            (Convert.ToDecimal(textBox9.Text) +
                                                                             Convert.ToDecimal(label18.Text)) + "," +
                                                                            "'" + sd + "','" +
                                                                            dateTimePicker1.Value.ToString("yyyy-MM-dd") +
                                                                            "'," +
                                                                            "'" + BillNu + "'," +
                                                                            "'" + StockCombo.SelectedValue.Stringify() +
                                                                            "')";
                                                                        cmd.CommandText += Environment.NewLine;
                                                                        StockVal += Convert.ToDecimal(label18.Text);
                                                                    }
                                                                    else
                                                                        cmd.CommandText = "";

                                                                    cmd.CommandText +=
                                                                        "insert into CancelMafoBill (BillNo, Date, Madfo3, Rest) " +
                                                                        "values ('" + BillNu + "', " +
                                                                        "'" + dateTimePicker1.Value
                                                                            .ToString("yyyy-MM-dd") + "', " +
                                                                        "'" + textBox10.Text + "', " +
                                                                        "'" + label18.Text + "')";
                                                                    cmd.ExecuteNonQuery();

                                                                }
                                                                else
                                                                {
                                                                    if (textBox9.Text != "0")
                                                                    {
                                                                        cmd.CommandText =
                                                                            "update Stock set [Value] =  [Value] +" +
                                                                            Convert.ToDecimal(textBox9.Text) + " " +
                                                                            "where Id=" + StockCombo.SelectedValue
                                                                                .Stringify();
                                                                        cmd.CommandText += Environment.NewLine;
                                                                        cmd.CommandText +=
                                                                            "insert into StokeMove ( Type,Price,bean,[date],BillNo,StockId ) " +
                                                                            "values ('فاتورة مبيعات' ," +
                                                                            Convert.ToDecimal(textBox9.Text) + "," +
                                                                            "'" + sd + "'," +
                                                                            "'" + dateTimePicker1.Value
                                                                                .ToString("yyyy-MM-dd") + "'," +
                                                                            "'" + BillNu + "','" +
                                                                            StockCombo.SelectedValue.Stringify() + "')";
                                                                        cmd.ExecuteNonQuery();
                                                                    }
                                                                }
                                                            }

                                                            decimal Commission = 0;
                                                            if (textBox12.Text != "0")
                                                            {
                                                                //decimal NesaCommission = Convert.ToDecimal(Search2(cmd, "").Rows[0][0]);
                                                                // Commission = (Convert.ToDecimal(textBox12.Text) * NesaCommission) / 100;

                                                                cmd.CommandText =
                                                                    @"Declare @CommissionNesba decimal(18,5),@BankID int;
Set @CommissionNesba = (select Commission from Banks where ID='" + BankCombo.SelectedValue.Stringify() + "');";
                                                                cmd.CommandText += Environment.NewLine;
                                                                cmd.CommandText +=
                                                                    @"insert into Bank (FromBank,ToBank,Notes,[Date],BankId,BillNo" + (ProSetting.TerminalPackage ? ",TerminalTransactionID" : "") + @") 
values(0,(" + Convert.ToDecimal(textBox12.Text) + " - ((" + Convert.ToDecimal(textBox12.Text) +
                                                                    "*Isnull(@CommissionNesba,0))/100)" + ")," +
                                                                    "'" + sd + "'," +
                                                                    "'" + dateTimePicker1.Value.ToString("yyyy-MM-dd") +
                                                                    "'," +
                                                                    "'" + BankCombo.SelectedValue + "'," +
                                                                    "'" + BillNu + "'" + (ProSetting.TerminalPackage ? "," + transactionId : "") + ")";
                                                                cmd.CommandText += Environment.NewLine;
                                                                cmd.CommandText += "Set @BankID=  Scope_Identity();";
                                                                cmd.CommandText += Environment.NewLine;
                                                                cmd.CommandText +=
                                                                    (@"insert into Expenses (ExpenseType,Expense,Notes,[Date],bean,Esthlak,BankID) 
values('مصروفات عامة',(((" + Convert.ToDecimal(textBox12.Text) + "*Isnull(@CommissionNesba,0))/100)" + ")," +
                                                                     "'عمولة بنك'," +
                                                                     "'" + dateTimePicker1.Value.ToString("yyyy-MM-dd") +
                                                                     "'," +
                                                                     "'عمولة بنك لفاتورة مبيعات رقم '+'" + BillNu +
                                                                     "'," +
                                                                     "'" + BillNu + "',@BankID)");
                                                                cmd.CommandText += Environment.NewLine;
                                                                //cmd.CommandText = "insert into Bank (FromBank,ToBank,Notes,[Date],BankId)values(0," + textBox12.Text + ",'" + sd + "','" + dateTimePicker1.Value.ToString("yyyy-MM-dd") + "','" + BankCombo.SelectedValue.Stringify() + "')";
                                                                //cmd.ExecuteNonQuery();
                                                            }
                                                            else
                                                                cmd.CommandText = "";

                                                            cmd.CommandText +=
                                                                @"insert into BillPaids (ClientMoveID, StockID, StockValue, BankID, BankValue)
values ('" + ClientMoveID + "', " + "'" + StockCombo.SelectedValue + "', " + "'" + StockVal + "', " +
                                                                "'" + BankCombo.SelectedValue + "', " +
                                                                "'" + (Convert.ToDecimal(textBox12.Text)) + "')";

                                                            cmd.CommandText += Environment.NewLine;
                                                            if (ProSetting.Est7qaq &&
                                                                Convert.ToDecimal(label18.Text) != 0)
                                                            {
                                                                cmd.CommandText +=
                                                                    "insert into ClientEst7qaq (ClientID, Value, Date,Notes,BillNo) values ('" +
                                                                    dt55.Rows[0]["ID"].Stringify() + "', '" +
                                                                    label18.Text + "', '" +
                                                                    dateTimePicker3.Value.ToString("yyyy-MM-dd") +
                                                                    "','فاتورة مبيعات رقم '+'" + BillNu + "','" +
                                                                    BillNu + "')";
                                                            }

                                                            cmd.CommandText += Environment.NewLine;
                                                            cmd.CommandText +=
                                                                "insert into usermove " +
                                                                "(userid,MoveType,Date," +
                                                                "BillNo,BillType) " +
                                                                "values (" +
                                                                "'" + ProSetting.UserIdLo + "', " +
                                                                "'" + MoveType + "', " +
                                                                "'" + DateTime.Now.ToString("M/d/yyyy HH:mm:ss") +
                                                                "'," +
                                                                "'" + BillNu + "'," +
                                                                "'فاتورة مبيعات')";
                                                            cmd.ExecuteNonQuery();
                                                            DataTable dtBills = new DataTable();
                                                            if (ProSetting.DailyBill == true)
                                                            {
                                                                dtBills = Search2(cmd,
                                                                    "select BillNo from ClientMove where BillNo ='" +
                                                                    BillNu + "' and Date='" +
                                                                    DateTime.Today.ToString("yyyy-MM-dd") + "'");
                                                            }
                                                            else
                                                            {
                                                                dtBills = Search2(cmd,
                                                                    "select BillNo from ClientMove where BillNo ='" + BillNu + "'");
                                                            }

                                                            if (dtBills.Rows.Count != 1)
                                                            {
                                                                Thread.Sleep(1000);
                                                                if (ProSetting.DailyBill == true)
                                                                {
                                                                    dtBills = Search2(cmd,
                                                                        "select BillNo from ClientMove " +
                                                                        "where BillNo ='" + BillNu + "' " +
                                                                        "and Date='" +
                                                                        DateTime.Today.ToString("yyyy-MM-dd") + "'");
                                                                }
                                                                else
                                                                {
                                                                    dtBills = Search2(cmd,
                                                                        "select BillNo from ClientMove where BillNo ='" +
                                                                        BillNu + "'");
                                                                }

                                                                if (dtBills.Rows.Count != 1)
                                                                {
                                                                    ST.Rollback();
                                                                    if (dtBills.Rows.Count < 1)
                                                                    {
                                                                        MessageBox.Show(Tr.M2.m532, Tr.M1.error, MessageBoxButtons.OK, MessageBoxIcon.Warning);
                                                                    }
                                                                    else
                                                                    {
                                                                        MessageBox.Show(Tr.M2.m531, Tr.M1.error, MessageBoxButtons.OK, MessageBoxIcon.Warning);
                                                                    }


                                                                    timer1.Enabled = true;
                                                                    GetCurrentBillNum();
                                                                    return;
                                                                }
                                                            }

                                                            ST.Commit();
                                                            if (ProSetting.LivePrint)
                                                            {
                                                                timer2.Interval = 2000; // to close after 2 secs
                                                                timer2.Enabled = true;
                                                            }

                                                            MessageBox.Show(Tr.M1.m0013 + underDeliveryMessage);
                                                            timer2.Enabled = false;
                                                            try
                                                            {
                                                                if (ChkDetect.Checked)
                                                                {
                                                                    if (detectCmdTxt != null && detectCmdTxt.Length > 0)
                                                                    {
                                                                        if (Convert.ToBoolean(detectCmdTxt[3]))

                                                                        {
                                                                            var f = new FrmRptDetect(detectId,
                                                                                Convert.ToBoolean(detectCmdTxt[4]));
                                                                            f.Show();
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            catch (Exception ex)
                                                            {
                                                                if (MessageBox.Show(Tr.M2.m820 + Environment.NewLine + Tr.M1.m0346, Tr.M1.error, MessageBoxButtons.OKCancel, MessageBoxIcon.Error, MessageBoxDefaultButton.Button2) == DialogResult.OK)
                                                                {
                                                                    new FrmExceptionDetails("1- " + ex.Message,
                                                                        "Trace :" + Environment.NewLine + ex.StackTrace + "" + Environment.NewLine + @"-------" + Environment.NewLine +
                                                                        "Source :" + Environment.NewLine + ex.Source).ShowDialog();

                                                                }
                                                            }

                                                            try
                                                            {
                                                                if (ProSetting.SalesAutoSaveEnabled)
                                                                {
                                                                    var found = _autoSaveManager.OpenningSalesScreens
                                                                        .FirstOrDefault(oss =>
                                                                            oss.Key.ClientId ==
                                                                            CurrentAutoSaveModel.ClientId
                                                                            && oss.Key.TempId ==
                                                                            CurrentAutoSaveModel.TempId);
                                                                    _autoSaveManager.OpenningSalesScreens.Remove(
                                                                        found.Key);

                                                                    _autoSaveManager.TempBillsList.Remove(
                                                                        CurrentAutoSaveModel);
                                                                    _autoSaveManager.UpdateUnsavedBills(
                                                                        CurrentAutoSaveModel);
                                                                }
                                                            }
                                                            catch (Exception ex)
                                                            {
                                                            }
                                                        }
                                                        else if (dt1.Rows.Count > 0)
                                                        {
                                                            timer1.Enabled = true;
                                                            MessageBox.Show(Tr.M1.m0287, Tr.M1.error,
                                                                MessageBoxButtons.OK, MessageBoxIcon.Warning);
                                                            GetCurrentBillNum();
                                                            button11.Visible = true;
                                                            return;
                                                        }
                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        ST.Rollback();
                                                        if (MessageBox.Show(Tr.M2.M342 + Environment.NewLine + Tr.M1.m0346, Tr.M1.error, MessageBoxButtons.OKCancel, MessageBoxIcon.Error, MessageBoxDefaultButton.Button2) == DialogResult.OK)
                                                        {
                                                            new FrmExceptionDetails("1- " + ex.Message,
                                                                "Trace :" + Environment.NewLine + ex.StackTrace + "" + Environment.NewLine + @"-------" + Environment.NewLine +
                                                                "Source :" + Environment.NewLine + ex.Source).ShowDialog();

                                                        }

                                                        try
                                                        {
                                                            reload = true;
                                                            string client = "",
                                                                stock = "",
                                                                bank = "",
                                                                seller = "",
                                                                store = "";
                                                            try
                                                            {
                                                                client = ClientCombo.SelectedValue.ToInt32().Stringify();
                                                                stock = StockCombo.SelectedValue.ToInt32().Stringify();
                                                                bank = BankCombo.SelectedValue.ToInt32().Stringify();
                                                                seller = SellerCombo.SelectedValue.ToInt32().Stringify();
                                                                store = StoreCombo.SelectedValue.ToInt32().Stringify();
                                                            }
                                                            catch (Exception)
                                                            {
                                                            }

                                                            this.OnLoad(new EventArgs());
                                                            reload = false;
                                                            try
                                                            {
                                                                ClientCombo.SelectedValue = client.ToInt32();
                                                                StockCombo.SelectedValue = stock;
                                                                BankCombo.SelectedValue = bank;
                                                                SellerCombo.SelectedValue = seller;
                                                                StoreCombo.SelectedValue = store;
                                                            }
                                                            catch
                                                            {
                                                            }
                                                        }
                                                        catch
                                                        {
                                                            reload = false;
                                                        }

                                                        return;

                                                    }
                                                }

                                                if (ProSetting.Shipping)
                                                {
                                                    FrmShipping f = new FrmShipping(BillNu);
                                                    f.ShowDialog();
                                                }
                                                if (print)
                                                {

                                                    ////////////////////////////////التقرير///////////////////////

                                                    var defaultPaperSize = Properties.Settings.Default.SizePrinter;
                                                    try
                                                    {
                                                        Properties.Settings.Default.SizePrinter = CmbBillPaperSize.Text;
                                                        Properties.Settings.Default.Save();
                                                    }
                                                    catch
                                                    {
                                                    }
                                                    dataClass.barcode = false;
                                                    if (ProSetting.PrintBarcode)
                                                    {
                                                        dataClass.barcode = true;
                                                    }
                                                    dataClass.Bill = true;

                                                    //if (dataClass.Bill)
                                                    {
                                                        if (ProSetting.DailyBill == true)
                                                        {
                                                            FrmReportSalesBill2 f = new FrmReportSalesBill2(BillNu, Convert.ToInt32(dt55.Rows[0]["ID"].Stringify()), 0, Convert.ToDateTime(dateTimePicker1.Value.ToString("yyyy-MM-dd")));
                                                            if (ProSetting.LivePrint == false)
                                                            {
                                                                f.ShowDialog();
                                                            }
                                                            if (ProSetting.EznSarf == true)
                                                            {
                                                                if (ProSetting.EznSarfSize == "بدون اعدادات A4")
                                                                {
                                                                    FrmRptEznSarf3 r2 = new FrmRptEznSarf3(BillNu, Convert.ToInt32(dt55.Rows[0]["ID"].Stringify()), Convert.ToDateTime(dateTimePicker1.Value.ToString("yyyy-MM-dd")));
                                                                    r2.ShowDialog();
                                                                }
                                                                else
                                                                {
                                                                    FrmReportSalesBill2 r2 = new FrmReportSalesBill2(BillNu, Convert.ToInt32(dt55.Rows[0]["ID"].Stringify()), 1, Convert.ToDateTime(dateTimePicker1.Value.ToString("yyyy-MM-dd")));
                                                                    r2.ShowDialog();
                                                                }
                                                            }
                                                        }
                                                        else
                                                        {
                                                            if (Properties.Settings.Default.SizePrinter == "ريسيت بدون اعدادات")
                                                            {
                                                                FrmReportSalesBill f = new FrmReportSalesBill(BillNu, Convert.ToInt32(dt55.Rows[0]["ID"].Stringify()), dataSet11, (ProSetting.RassedofClientsupplier && panel8.Visible ? label45.Text : label27.Text), Convert.ToDecimal(textBox11.Text), ggg);

                                                                //FrmReportSalesBill3 f = new FrmReportSalesBill3(BillNu, Convert.ToInt32(dt55.Rows[0]["ID"].Stringify()), 0);
                                                                if (ProSetting.LivePrint == false)
                                                                {
                                                                    f.ShowDialog();
                                                                }
                                                            }
                                                            else
                                                            {

                                                                FrmReportSalesBill f = new FrmReportSalesBill(BillNu, Convert.ToInt32(dt55.Rows[0]["ID"].Stringify()), 0);
                                                                if (ProSetting.LivePrint == false)
                                                                {
                                                                    f.ShowDialog();
                                                                }
                                                            }
                                                            if (ProSetting.EznSarf)
                                                            {
                                                                if (ProSetting.EznSarfSize == "بدون اعدادات A4")
                                                                {
                                                                    FrmRptEznSarf3 r2 = new FrmRptEznSarf3(BillNu, Convert.ToInt32(dt55.Rows[0]["ID"].Stringify()));
                                                                    r2.ShowDialog();
                                                                }
                                                                else
                                                                {
                                                                    FrmReportSalesBill r2 = new FrmReportSalesBill(BillNu, Convert.ToInt32(dt55.Rows[0]["ID"].Stringify()), 1);
                                                                    r2.ShowDialog();
                                                                }
                                                            }
                                                        }
                                                    }
                                                    try
                                                    {
                                                        Properties.Settings.Default.SizePrinter = defaultPaperSize;
                                                        Properties.Settings.Default.Save();
                                                    }
                                                    catch
                                                    {
                                                    }
                                                    if (dataClass.barcode)
                                                    {
                                                        Store.dataClass c = dataClass.Instance;
                                                        // dataSet11.Clear();
                                                        //Codes.Delete2("DELETE  FROM barcode2");
                                                        //Codes.Delete2("DELETE  FROM barcode");
                                                        ArrayList ar = new ArrayList();
                                                        for (int ff = 1; ff < dataGridView1.Rows.Count; ff++)
                                                        {
                                                            for (int gg = 0; gg < Convert.ToInt32(dataGridView1.Rows[ff - 1].Cells["Quantity"].Value.Stringify()); gg++)
                                                            {
                                                                Items item1;
                                                                BarcodeLabel brl = new BarcodeLabel();
                                                                brl.Symbology = Properties.Settings.Default.BarcodeSymbology;
                                                                brl.Value = dataGridView1.Rows[ff - 1].Cells["Barcode"].Value.Stringify();
                                                                brl.BarcodeMargins.Top = 25;
                                                                brl.BarcodeMargins.Bottom = 25;
                                                                brl.BarcodeMargins.Right = 25;
                                                                brl.BarcodeMargins.Left = 25;
                                                                brl.Options.IncludeText = false;

                                                                MemoryStream stream = new MemoryStream();
                                                                brl.GetImage().Save(stream, System.Drawing.Imaging.ImageFormat.Jpeg);
                                                                Byte[] image = stream.ToArray();

                                                                item1.Barcode = dataGridView1.Rows[ff - 1].Cells["Barcode"].Value.Stringify();
                                                                item1.Photo = image;
                                                                item1.ItemName = dataGridView1.Rows[ff - 1].Cells[2].Value.Stringify();
                                                                item1.ClientName = ClientCombo.Text;
                                                                item1.BillNo = BillNoT.Text;
                                                                ar.Add(item1);
                                                                if (ProSetting.OneBarcodeLbl == "1")
                                                                {
                                                                    dataSet11.SaleBarcode.Rows.Add(item1.Barcode, item1.ItemName, item1.ClientName, item1.BillNo, image, 1);
                                                                    //bool bbb = c.Update("ADDBarcode", new string[] { "barcode", "header", "itemName", "photo", "BCount", "Company", "Type", "Size", "Color", "Notes" }, item1.Barcode, AboveCode, item1.ItemName, image, 1, item1.Company, item1.Type, item1.Size, item1.Color, item1.Notes);
                                                                }
                                                                else if (ProSetting.OneBarcodeLbl == "2" && gg
                                                                         == 0)
                                                                {
                                                                    dataSet11.SaleBarcode.Rows.Add(item1.Barcode, item1.ItemName, item1.ClientName, item1.BillNo, image, 2);
                                                                    //bool bbb = c.Update("ADDBarcode", new string[] { "barcode", "header", "itemName", "photo", "BCount", "Company", "Type", "Size", "Color", "Notes" }, item1.Barcode, AboveCode, item1.ItemName, image, 2, item1.Company, item1.Type, item1.Size, item1.Color, item1.Notes);
                                                                }
                                                            }
                                                        }
                                                        if (ProSetting.OneBarcodeLbl != "1" && ProSetting.OneBarcodeLbl != "2")
                                                        {
                                                            int BarcodeCount = 0;
                                                            int RowCount = (ar.Count / 6) + 1;

                                                            if (ar.Count % 6 > 0)
                                                            {
                                                                BarcodeCount = ar.Count % 6;
                                                            }

                                                            for (int i = 0; i < RowCount; i++)
                                                            {
                                                                if (i + 1 == RowCount)
                                                                {
                                                                    try
                                                                    {
                                                                        for (int mn = 0; mn < 6 - BarcodeCount; mn++)
                                                                        {
                                                                            Items ite;
                                                                            ite.Barcode = ((Items)ar[0]).Barcode;
                                                                            ite.Photo = ((Items)ar[0]).Photo;
                                                                            ite.ItemName = ((Items)ar[0]).ItemName;
                                                                            ite.ClientName = ((Items)ar[0]).ClientName;
                                                                            ite.BillNo = ((Items)ar[0]).BillNo;
                                                                            ar.Add(ite);
                                                                        }
                                                                        dataSet11.SaleBarcode2.Rows.Add(((Items)ar[0]).Barcode, ((Items)ar[0]).ItemName, ((Items)ar[0]).ClientName, ((Items)ar[0]).BillNo, ((Items)ar[0]).Photo, BarcodeCount, ((Items)ar[1]).Barcode, ((Items)ar[1]).ItemName, ((Items)ar[1]).Photo, ((Items)ar[2]).Barcode, ((Items)ar[2]).ItemName, ((Items)ar[2]).Photo, ((Items)ar[3]).Barcode, ((Items)ar[3]).ItemName, ((Items)ar[3]).Photo, ((Items)ar[4]).Barcode, ((Items)ar[4]).ItemName, ((Items)ar[4]).Photo, ((Items)ar[5]).Barcode, ((Items)ar[5]).ItemName, ((Items)ar[5]).Photo);
                                                                        //bool bb = c.Update("ADDBarcode2", new string[] { "barcode1", "header1", "photo1", "barcode2", "header2", "photo2", "barcode3", "header3", "photo3", "barcode4", "header4", "photo4", "barcode5", "header5", "photo5", "barcode6", "header6", "photo6", "Bcount", "ItemName1", "ItemName2", "ItemName3", "ItemName4", "ItemName5", "ItemName6" }, ((Items)ar[0]).Barcode, ((Items)ar[0]).Header, ((Items)ar[0]).Photo, ((Items)ar[1]).Barcode, ((Items)ar[1]).Header, ((Items)ar[1]).Photo, ((Items)ar[2]).Barcode, ((Items)ar[2]).Header, ((Items)ar[2]).Photo, ((Items)ar[3]).Barcode, ((Items)ar[3]).Header, ((Items)ar[3]).Photo, ((Items)ar[4]).Barcode, ((Items)ar[4]).Header, ((Items)ar[4]).Photo, ((Items)ar[5]).Barcode, ((Items)ar[5]).Header, ((Items)ar[5]).Photo, BarcodeCount, ((Items)ar[0]).ItemName, ((Items)ar[1]).ItemName, ((Items)ar[2]).ItemName, ((Items)ar[3]).ItemName, ((Items)ar[4]).ItemName, ((Items)ar[5]).ItemName);
                                                                        ar.RemoveRange(0, 6);
                                                                    }
                                                                    catch { }
                                                                }
                                                                else
                                                                {
                                                                    dataSet11.SaleBarcode2.Rows.Add(((Items)ar[0]).Barcode, ((Items)ar[0]).ItemName, ((Items)ar[0]).ClientName, ((Items)ar[0]).BillNo, ((Items)ar[0]).Photo, 6, ((Items)ar[1]).Barcode, ((Items)ar[1]).ItemName, ((Items)ar[1]).Photo, ((Items)ar[2]).Barcode, ((Items)ar[2]).ItemName, ((Items)ar[2]).Photo, ((Items)ar[3]).Barcode, ((Items)ar[3]).ItemName, ((Items)ar[3]).Photo, ((Items)ar[4]).Barcode, ((Items)ar[4]).ItemName, ((Items)ar[4]).Photo, ((Items)ar[5]).Barcode, ((Items)ar[5]).ItemName, ((Items)ar[5]).Photo);
                                                                    //bool bb = c.Update("ADDBarcode2", new string[] { "barcode1", "header1", "photo1", "barcode2", "header2", "photo2", "barcode3", "header3", "photo3", "barcode4", "header4", "photo4", "barcode5", "header5", "photo5", "barcode6", "header6", "photo6", "Bcount", "ItemName1", "ItemName2", "ItemName3", "ItemName4", "ItemName5", "ItemName6" }, ((Items)ar[0]).Barcode, ((Items)ar[0]).Header, ((Items)ar[0]).Photo, ((Items)ar[1]).Barcode, ((Items)ar[1]).Header, ((Items)ar[1]).Photo, ((Items)ar[2]).Barcode, ((Items)ar[2]).Header, ((Items)ar[2]).Photo, ((Items)ar[3]).Barcode, ((Items)ar[3]).Header, ((Items)ar[3]).Photo, ((Items)ar[4]).Barcode, ((Items)ar[4]).Header, ((Items)ar[4]).Photo, ((Items)ar[5]).Barcode, ((Items)ar[5]).Header, ((Items)ar[5]).Photo, 6, ((Items)ar[0]).ItemName, ((Items)ar[1]).ItemName, ((Items)ar[2]).ItemName, ((Items)ar[3]).ItemName, ((Items)ar[4]).ItemName, ((Items)ar[5]).ItemName);
                                                                    ar.RemoveRange(0, 6);
                                                                }

                                                            }
                                                        }

                                                        Barcode.frmrptbarcode n = new Barcode.frmrptbarcode(dataSet11);
                                                    }
                                                }
                                                else
                                                {
                                                    if (ProSetting.Egypt_E_Receipt)
                                                    {
                                                        Receipt_Models.Receipt_Models.API_Helper.RequestHelper.SetEReceiptData(BillNu, "", false, true, Codes, ProSetting.SalesReceiptType, 0);
                                                    }
                                                }
                                                decimal Raseed = Math.Round(sc.GetClientAccount(ClientCombo.SelectedValue.Stringify()), ProSetting.Round, MidpointRounding.AwayFromZero);
                                                //sc.SendSMS("Sale", txtMobile.Text, " فاتورة رقم " + BillNu + " الرصيد النهائى " + Raseed);
                                                if (CHKSendSms.Checked)
                                                {
                                                    sc.SendSMS(Codes.Search2("select Mobile from Clients where ID = '" + ClientCombo.SelectedValue + "'").Rows[0][0].Stringify(),
                                                        " فاتورة " + BillNoT.Text + " - " + dateTimePicker2.Value.ToString("yyyy-MM-dd") + " مدفوع " + ggg + "متبقى " + RestforSms + " الرصيد " + Raseed);
                                                }
                                                else
                                                {
                                                    sc.SendSMS("Sale", Codes.Search2("select Mobile from Clients where ID = '" + ClientCombo.SelectedValue + "'").Rows[0][0].Stringify(),
                                                        " فاتورة " + BillNoT.Text + " الرصيد " + Raseed);
                                                }

                                                try
                                                {
                                                    dataGridView1.Rows.Clear();
                                                }
                                                catch { }
                                                dataGridView1.Refresh();
                                                textBox12.Text = "0";
                                                textBox9.Text = "0";
                                                Total = 0;
                                                textBox5.Text = Math.Round(Total, ProSetting.Round, MidpointRounding.AwayFromZero).ToString("F" + ProSetting.Round);


                                                clear();

                                                ///////////////////////////////////////////////
                                                if (ProSetting.SaleBillNum == true)
                                                {
                                                    BillNoT.Text = "";
                                                }
                                                else
                                                {
                                                    if (ProSetting.DailyBill == true)
                                                    {
                                                        DataTable dt88 = new DataTable();
                                                        dt = Codes.Search2("select top 1( cast(billno as int)) from ClientMove where Date ='" + DateTime.Today.ToString("yyyy-MM-dd") + "'  order by cast(billno as int) desc");
                                                        int pp = Convert.ToInt32(dt.Rows[0][0].Stringify()) + 1;
                                                        BillNoT.Text = pp.Stringify();
                                                    }
                                                    else
                                                    {
                                                        DataTable dt88 = new DataTable();
                                                        dt = Codes.Search2("select top 1( cast(billno as int)) from ClientMove order by cast(billno as int) desc");
                                                        int pp = Convert.ToInt32(dt.Rows[0][0].Stringify()) + 1;
                                                        BillNoT.Text = pp.Stringify();
                                                    }
                                                }
                                                try { BillKindCom.Text = ProSetting.BillType; }
                                                catch { }

                                            }
                                            else
                                            {
                                                MessageBox.Show(Tr.M1.m0351, Tr.M1.alert);
                                                GetCurrentBillNum();
                                            }
                                        }
                                        /////////////////////////////////////////////////////////
                                        /////////////////////////////////////////////////////////

                                        else
                                        {
                                            MessageBox.Show(Tr.M1.m0288, Tr.M1.error, MessageBoxButtons.OK, MessageBoxIcon.Warning);
                                            GetCurrentBillNum();
                                        }
                                    }
                                    else if (dt1.Rows.Count > 0)
                                    {

                                        timer1.Enabled = true;
                                        MessageBox.Show(Tr.M1.m0287, Tr.M1.error, MessageBoxButtons.OK, MessageBoxIcon.Warning);

                                        GetCurrentBillNum();
                                        button11.Visible = true;
                                    }
                                }
                                //else
                                //{
                                //    timer1.Enabled = true;
                                //    MessageBox.Show("من فضلك تأكد من الفاتوره", Tr.M1.error, MessageBoxButtons.OK, MessageBoxIcon.Warning);
                                //}


                            }
                            else
                            {

                                timer1.Enabled = true;
                                MessageBox.Show(Tr.M1.m0352, Tr.M1.error, MessageBoxButtons.OK, MessageBoxIcon.Warning);
                                GetCurrentBillNum();
                            }
                        }
                    }
                }
                //}
            }
            catch (Exception ex)
            {
                if (MessageBox.Show(Tr.M2.m824 + Environment.NewLine + Tr.M1.m0346, Tr.M1.error, MessageBoxButtons.OKCancel, MessageBoxIcon.Error, MessageBoxDefaultButton.Button2) == DialogResult.OK)
                {
                    new FrmExceptionDetails("2- " + ex.Message, "Trace :" + Environment.NewLine + ex.StackTrace + "" + Environment.NewLine + @"-------" + Environment.NewLine + "Source :" + Environment.NewLine + ex.Source).ShowDialog();
                }
                try
                {
                    reload = true;
                    string client = "", stock = "", bank = "", seller = "", store = "";
                    try
                    {
                        client = ClientCombo.SelectedValue.ToInt32().Stringify();
                        stock = StockCombo.SelectedValue.ToInt32().Stringify();
                        bank = BankCombo.SelectedValue.ToInt32().Stringify();
                        seller = SellerCombo.SelectedValue.ToInt32().Stringify();
                        store = StoreCombo.SelectedValue.ToInt32().Stringify();
                    }
                    catch (Exception)
                    { }
                    this.OnLoad(new EventArgs());
                    reload = false;
                    try
                    {
                        ClientCombo.SelectedValue = client.ToInt32();
                        StockCombo.SelectedValue = stock;
                        BankCombo.SelectedValue = bank;
                        SellerCombo.SelectedValue = seller;
                        StoreCombo.SelectedValue = store;
                    }
                    catch
                    {
                    }
                }
                catch
                {
                    reload = false;
                }
            }
            try
            {
                if (print == false)
                {
                    try
                    {
                        if (myCashDrawer == null)
                        {
                            CreateCasherDrawer();
                        }
                        
                        if (myCashDrawer == null)
                            return;
                        myCashDrawer.Open();
                        myCashDrawer.Claim(1000);
                        myCashDrawer.DeviceEnabled = true;
                        myCashDrawer.OpenDrawer();
                        myCashDrawer.DeviceEnabled = false;
                        myCashDrawer.Release();
                        myCashDrawer.Close();
                    }
                    catch (NullReferenceException ex)
                    {
                        //MessageBox.Show("OpenCashDrawer: " + ex.Message);
                    }
                    finally
                    {
                        DisposeCasherDrawer();
                    }
                }
            }
            catch { }
        }

        private void button13_Click(object sender, EventArgs e)
        {
            saveBill(false, false);
        }
        private void TaxNum_TextChanged(object sender, System.EventArgs e)
        {
            try
            {
                if (TaxNum.Focused)
                {
                    TaxNum.TextChanged -= TaxNum_TextChanged;
                    if (string.IsNullOrEmpty(TaxNum.Text))
                    {
                        TaxNum.Text = "0";
                    }
                    else
                    {
                        TaxNum.Text = Convert.ToDecimal(TaxNum.Text) > 100 ? "100" : TaxNum.Text;
                    }
                    TaxNum.TextChanged += TaxNum_TextChanged;

                }
            }
            catch
            {
            }
        }

        private void button14_Click(object sender, EventArgs e)
        {
            try
            {
                if (ItemCombo.SelectedItem == null || string.IsNullOrEmpty(ItemCombo.Text))
                {
                    MessageBox.Show(Tr.M1.m0045);
                    BarcodeText.Text = "";
                    PriceText.Text = "0";
                }
                else if (StoreCombo.Text == "<-اختر->" || StoreCombo.SelectedValue.ToInt32() == 0)
                {
                    MessageBox.Show(Tr.M1.m0299);
                }
                else if (UnitsCom.SelectedValue == null || string.IsNullOrEmpty(UnitsCom.Text))
                {
                    MessageBox.Show(Tr.M2.m644);
                }
                else if (PriceText.Text.ToDecimal() < 0M)
                {
                    MessageBox.Show(Tr.M2.M892);
                }

                else if (QntText.Text.ToDecimal() <= 0M)
                {
                    MessageBox.Show(Tr.M2.M893);
                }
                else if (TaxNum.Text.ToDecimal() < 0M)
                {
                    MessageBox.Show(Tr.M2.M894);
                }
                else
                {
                    for (int i = 0; i < dataGridView1.Rows.Count - 1; i++)
                    {
                        if (ItemCombo.SelectedValue.ToInt32() == dataGridView1.Rows[i].Cells[0].Value.ToInt32()
                            && StoreCombo.SelectedValue.ToInt32() == dataGridView1.Rows[i].Cells["StoreID"].Value.ToInt32()
                            && textBox8.Text.ToText() == dataGridView1.Rows[i].Cells[3].Value.ToText())
                        {
                            MessageBox.Show(Tr.M2.m645);
                            return;
                        }
                    }
                    if (ProSetting.Pieceprice && PriceText.Text.ToDecimal() < Pieceprice)
                    {
                        MessageBox.Show(Tr.M1.m0180);
                        PriceText.Text = Pieceprice.ToString("F" + ProSetting.Round);
                        return;
                    }
                    else
                    {
                        try
                        {
                            if (QntText.Text.ToDecimal() == 0)
                            {
                                MessageBox.Show(Tr.M1.m0290); return;
                            }
                        }
                        catch { MessageBox.Show(Tr.M1.m0290); return; }

                        DataTable dtItemUnit = Codes.Search2(@"
select ItemsUnit.Price,PriceInter,ItMain,CASE WHEN dbo.ItemsUnit.ItMain=1 
and IsNull((Select Price From dbo.Store Where Store.ItemID = ItemsUnit.ItemId  
and Store.StoreID='" + StoreCombo.SelectedValue + @"'),0) > 0 
THEN (Select Price From dbo.Store Where Store.ItemID = ItemsUnit.ItemId  
and Store.StoreID='" + StoreCombo.SelectedValue + @"') 
ELSE  dbo.ItemsUnit.BuyPrice End as BuyPrice,
HalfPrice,isnull(Gomla1,0) as Gomal1,
isnull(Gomla2,0) as Gomla2 
from ItemsUnit 
where ItemsUnit.ItemID='" + ItemCombo.SelectedValue + @"' 
and  UnitID ='" + UnitsCom.SelectedValue + @"' 
Order by ItemsUnit.ID");

                        if (itemMains == 0 || itemMains != dtItemUnit.Rows[0][2].ToDecimal())
                        {
                            itemMains = dtItemUnit.Rows[0][2].ToDecimal();
                            if (PayPrice == 0)
                            {
                                PayPrice = Math.Round(dtItemUnit.Rows[0][3].ToDecimal(), ProSetting.Round, MidpointRounding.AwayFromZero);
                            }
                        }

                        var qa = QntText.Text.ToDecimal();
                        var itmain = Convert.ToDecimal(itemMains);
                        bool underDelev = false;
                        if (Codes.Search2("select Khadamy from Items " +
                                                            "where ID = '" + ItemCombo.SelectedValue + "'").Rows[0][0].ToBool() == false)
                        {
                            if (UniderDelevItem.Checked == false)
                            {
                                if (ProSetting.SkipQuantityAssemblingOfAnItem)
                                {
                                    if (dtSelectedItemComponents.Rows.Count > 0)
                                    {
                                        try
                                        {
                                            var notavailbleItems = new List<DataRow>();

                                            if (dtSelectedItemStoreQuantity.Rows.Count
                                                < dtSelectedItemComponents.Rows.Count &&
                                                qa > (selectedActualItemStoreQuantity / itmain))
                                            {
                                                notavailbleItems = dtSelectedItemComponents.Rows
                                                    .OfType<DataRow>()
                                                    .Where(dr =>
                                                        dtSelectedItemStoreQuantity.Select("ItemID =" + dr["ItemID"]).Length == 0)
                                                    .ToList();
                                            }

                                            var notavailableItemsQnt = new DataTable();
                                            notavailableItemsQnt.Columns.Add("م", typeof(int));
                                            notavailableItemsQnt.Columns.Add("الباركود");
                                            notavailableItemsQnt.Columns.Add(Tr.M2.item_name);
                                            notavailableItemsQnt.Columns.Add("الوحدة");
                                            if (dtSelectedItemStoreQuantity.Rows.Count == dtSelectedItemComponents.Rows.Count)
                                            {
                                                notavailableItemsQnt.Columns.Add("الكمية المتاحة", typeof(decimal));
                                                notavailableItemsQnt.Columns.Add("الكمية المطلوبة", typeof(decimal));
                                            }

                                            if (notavailbleItems.Count > 0)
                                            {
                                                for (var index = 0; index < notavailbleItems.Count; index++)
                                                {
                                                    notavailableItemsQnt.Rows.Add((index + 1),
                                                        notavailbleItems[index]["Barcode"],
                                                        notavailbleItems[index]["ItemName"],
                                                        notavailbleItems[index]["UnitName"]);
                                                }

                                                if (new FrmMessageDialog(Tr.M1.m1098 + StoreCombo.Text + Tr.M1.m1099, Tr.M1.error,
                                                        this, DialogResult.Yes, DialogResult.No).ShowDialog() ==
                                                    DialogResult.Yes)
                                                {
                                                    var result = new FrmItemsNotFound(notavailableItemsQnt,
                                                            "مكونات الصنف الغير موجوده بالمخزن المُباع منه")
                                                        .ShowDialog();
                                                    underDelev = result == DialogResult.OK;
                                                }
                                                if (!underDelev)
                                                    return;
                                            }
                                            else
                                            {
                                                if (!ProSetting.StoreMinus)
                                                {
                                                    if (qa > (selectedAvailableQuantityOftheItem / itmain))
                                                        notavailbleItems = dtSelectedItemStoreQuantity.Rows.OfType<DataRow>()
                                                            .Where(dr => !Convert.ToBoolean(dr["QuantityAvailableStatus"]) && !Convert.ToBoolean(dr["Khadamy"]))
                                                            .ToList();

                                                    for (var index = 0; index < notavailbleItems.Count; index++)
                                                    {

                                                        notavailableItemsQnt.Rows.Add((index + 1),
                                                            notavailbleItems[index]["Barcode"],
                                                            notavailbleItems[index]["ItemName"],
                                                            notavailbleItems[index]["UnitName"],
                                                            notavailbleItems[index]["ComponentStoreQuantity"].ToDecimal().NormalizeDecimalPlaces(),
                                                            (notavailbleItems[index]["ComponentAssemblingQuantity"].ToDecimal()
                                                            * qa).NormalizeDecimalPlaces());
                                                    }

                                                    if (notavailableItemsQnt.Rows.Count > 0)
                                                    {
                                                        if (new FrmMessageDialog(
                                                                Tr.M1.m1100 + Environment.NewLine + Tr.M1.m0346,
                                                                Tr.M1.error,
                                                                this, DialogResult.Yes, DialogResult.No).ShowDialog() ==
                                                            DialogResult.Yes)
                                                        {
                                                            var result = new FrmItemsNotFound(notavailableItemsQnt,
                                                                    "كميات مكونات الصنف التي هي أقل من المطلوب لتجميع الصنف في الفاتورة")
                                                                .ShowDialog();

                                                            underDelev = result == DialogResult.OK;
                                                        }
                                                        if (!underDelev)
                                                            return;
                                                    }
                                                }
                                            }
                                        }
                                        catch (Exception exx)
                                        {
                                        }
                                    }
                                    else
                                    {
                                        if (!ProSetting.StoreMinus && qa > (selectedActualItemStoreQuantity / itmain))
                                        {
                                            if (ProSetting.UniderDelevItem)
                                            {
                                                MessageBox.Show(Tr.M1.m0366, Tr.M1.alert);
                                                underDelev = true;
                                            }
                                            else
                                            {
                                                MessageBox.Show(Tr.M2.m448);
                                                return;
                                            }

                                        }
                                    }

                                    if (Convert.ToDecimal(PriceText.Text) < PayPrice)
                                    {
                                        if (ProSetting.SaleMinBuy || ProSetting.SaleMinBuy2)
                                            MessageBox.Show(Tr.M1.m0179);
                                        if (ProSetting.SaleMinBuy2)
                                            return;
                                    }
                                }
                                else
                                {
                                    if (qa > (selectedActualItemStoreQuantity / itmain))
                                    {
                                        try
                                        {
                                            if (dtSelectedItemStoreQuantity.Rows.Count == 0)
                                            {
                                                MessageBox.Show(Tr.M1.m0256);
                                                return;
                                            }
                                        }
                                        catch
                                        {
                                        }

                                        if (!ProSetting.StoreMinus)
                                        {
                                            if (ProSetting.UniderDelevItem)
                                            {
                                                MessageBox.Show(Tr.M1.m0366, Tr.M1.alert);
                                                underDelev = true;
                                            }
                                            else
                                            {
                                                MessageBox.Show(Tr.M2.m448);
                                                return;
                                            }

                                        }
                                    }

                                    if (Convert.ToDecimal(PriceText.Text) < PayPrice)
                                    {
                                        if (ProSetting.SaleMinBuy || ProSetting.SaleMinBuy2)
                                            MessageBox.Show(Tr.M1.m0179);
                                        if (ProSetting.SaleMinBuy2)
                                            return;
                                    }
                                }
                            }
                            else
                            {
                                underDelev = true;
                            }
                        }
                        byte[] img1 = null;
                        try
                        {
                            ms = new MemoryStream();


                            dt = Codes.Search2(@"select Picture,Items.StoreCode from Items where ID = '" + ItemCombo.SelectedValue + "'");
                            if (dt.Rows[0][0].ToText() != "")
                            {
                                SqlBytes bytes = new SqlBytes((byte[])dt.Rows[0][0]);
                                img1 = (byte[])dt.Rows[0][0];
                                //pictureBox1.BackgroundImage = Image.FromStream(bytes.Stream);
                            }
                        }
                        catch (Exception ex)
                        {
                        }
                        //else
                        //{
                        //    pictureBox1.BackgroundImage = null;
                        //}
                        decimal TaxValue = 0M, itemTotal = 0M, netSale = 0M, discount_val = 0M;
                        itemTotal = Math.Round((Convert.ToDecimal(QntText.Text) * Convert.ToDecimal(PriceText.Text))
                            , ProSetting.Round
                            , MidpointRounding.AwayFromZero);

                        try
                        {
                            discount_val = Math.Round(
                                (itemTotal * (Convert.ToDecimal(discount) / 100))
                                , ProSetting.Round
                                , MidpointRounding.AwayFromZero);
                        }
                        catch { }
                        netSale = Math.Round((itemTotal - discount_val)
                            , ProSetting.Round
                            , MidpointRounding.AwayFromZero);

                        if (ProSetting.ItemsTax)
                        {
                            try
                            {
                                TaxValue = Math.Round(((ProSetting.DarebaAfterDiscount ? netSale : itemTotal)
                                                        * (Convert.ToDecimal(TaxNum.Value) / 100))
                                    , ProSetting.Round
                                    , MidpointRounding.AwayFromZero);
                            }
                            catch
                            {
                            }
                        }


                        var colorT = AutomaticColorTextInSales ? (string.IsNullOrEmpty(textBox8.Text) ? (dataGridView1.Rows.Count).ToText() : textBox8.Text) : textBox8.Text;
                        var totalPrice = Math.Round((netSale + TaxValue)
                            , ProSetting.Round
                            , MidpointRounding.AwayFromZero);

                        try
                        {
                            if (Convert.ToDecimal(QntText.Text) < 0)
                            {
                                MessageBox.Show(Tr.M1.m0254);
                                return;
                            }
                            if (Convert.ToDecimal(PriceText.Text) < 0)
                            {
                                MessageBox.Show(Tr.M1.m0252);
                                return;
                            }
                            if (totalPrice < 0)
                            {
                                MessageBox.Show(Tr.M1.m0253);
                                return;
                            }
                        }
                        catch
                        {
                        }

                        var discountRatio = Convert.ToDecimal(discount)
                            .ToString("F" + ProSetting.Round);

                        var discountV = discount_val.ToString("F" + ProSetting.Round);
                        var saleQnt = Math.Round((Convert.ToDecimal(QntText.Text) * itemMains),
                            ProSetting.Round, MidpointRounding.AwayFromZero);
                        var tprice = totalPrice.ToString("F" + ProSetting.Round);

                        var salePrice = Math.Round((Convert.ToDecimal(PriceText.Text) / itemMains),
                            ProSetting.Round, MidpointRounding.AwayFromZero);


                        var itemReb7 = Math.Round((itemTotal * ((100 - Convert.ToDecimal(discount)) / 100)
                                                   - (Convert.ToDecimal(QntText.Text) * PayPrice)),
                                ProSetting.Round, MidpointRounding.AwayFromZero)
                            .ToString("F" + ProSetting.Round);

                        var totalBPrice = Math.Round(Convert.ToDecimal(QntText.Text)
                                                     * PayPrice, ProSetting.Round,
                                MidpointRounding.AwayFromZero)
                            .ToString("F" + ProSetting.Round);

                        var itemStoreQnt = Math.Round((selectedActualItemStoreQuantity / itmain),
                                ProSetting.Round
                                , MidpointRounding.AwayFromZero)
                            .ToString("F" + ProSetting.Round);

                        dataGridView1.Rows.Add(
                             ItemCombo.SelectedValue.ToInt32(),//0
                            BarcodeText.Text,//1
                            ItemCombo.Text,//2
                            colorT,//3
                            UnitsCom.Text,//4
                            QntText.Text.ToDecimal().NormalizeDecimalPlaces(),//5
                            PriceText.Text.ToDecimal().NormalizeDecimalPlaces(ProSetting.Round),//6
                            discountRatio.ToDecimal().NormalizeDecimalPlaces(ProSetting.Round),//7
                           discountV.ToDecimal().NormalizeDecimalPlaces(ProSetting.Round),//8
                            0,//9
                            saleQnt.ToDecimal().NormalizeDecimalPlaces(),//10
                            salePrice.NormalizeDecimalPlaces(ProSetting.Round),//11
                            tprice.ToDecimal().NormalizeDecimalPlaces(ProSetting.Round),//12
                            StoreCombo.SelectedValue.ToInt32(),//13
                            itemMains.NormalizeDecimalPlaces(),//14
                            PayPrice.NormalizeDecimalPlaces(ProSetting.Round),//15
                            itemReb7.ToDecimal().NormalizeDecimalPlaces(ProSetting.Round),//16
                            totalBPrice.ToDecimal().NormalizeDecimalPlaces(ProSetting.Round),//17
                            dt.Rows[0]["StoreCode"].ToText(),//18
                            itemStoreQnt,//19
                            underDelev,//20
                            img1,//21
                            TaxNum.Value,//22
                            "طباعة",//23
                            (byte)DiscountType.Percentage,//24
                            selectedItemPoints,//25
                            selectedUnderDeliveryQnt,//26
                            selectedBuyPrice//27
                            );
                        try
                        {
                            if (ProSetting.SkipQuantityAssemblingOfAnItem || dtSelectedItemComponents.Rows.Count > 0)
                            {
                                if (!_dcItemComponents.Keys.Any(itm => itm.Key == ItemCombo.SelectedValue.ToInt32()
                                    && itm.Value == StoreCombo.SelectedValue.ToInt32())
                                    && dtSelectedItemComponents.Rows.Count > 0)
                                {
                                    

                                    _dcItemComponents.Add(new KeyValuePair<int, int>(ItemCombo.SelectedValue.ToInt32(), StoreCombo.SelectedValue.ToInt32()),
                                        dtSelectedItemComponents);
                                }
                            }
                        }
                        catch (Exception exception)
                        {
                        }
                        try
                        {
                            DataGridViewComboBoxCell dgvCmbCell;
                            dgvCmbCell = (DataGridViewComboBoxCell)dataGridView1.Rows[dataGridView1.Rows.Count - 2].Cells[4];

                            DataTable dtUnits = new DataTable();
                            dtUnits = Codes.Search2(@"SELECT     dbo.Units.ID, dbo.Units.Name
FROM         dbo.ItemsUnit INNER JOIN
                      dbo.Units ON dbo.ItemsUnit.UnitID = dbo.Units.ID where ItemsUnit.ItemID = '" + ItemCombo.SelectedValue + "' order by ItemsUnit.ID");
                            dgvCmbCell.DisplayMember = "Name";

                            dgvCmbCell.DataSource = dtUnits;
                        }
                        catch { }

                        try
                        {
                            decimal TB = 0;
                            decimal Rebhea = 0;

                            for (int i = 1; i < dataGridView1.Rows.Count; i++)
                            {
                                TB += dataGridView1.Rows[i - 1].Cells["TotalPrice"].Value.ToDecimal();
                                Rebhea += dataGridView1.Rows[i - 1].Cells["Rebhea"].Value.ToDecimal();
                                //Dis += Convert.ToDecimal(dataGridView1.Rows[i - 1].Cells[7].Value.Stringify());

                                Total = TB;
                                totalrebh = Rebhea;

                                amu = false;
                            }

                            textBox5.Text = Math.Round(Total
                                    , ProSetting.Round
                                    , MidpointRounding.AwayFromZero)
                                .ToString("F" + ProSetting.Round);

                            RebheaText.Text = Math.Round(totalrebh - Convert.ToDecimal(textBox3.Text), ProSetting.Round, MidpointRounding.AwayFromZero).ToString("F" + ProSetting.Round);
                        }
                        catch { }
                        Total = 0;
                        totalrebh = 0;
                        QntText.Text = "1";
                    }
                }
            }
            catch (Exception ex)
            {
            }
            try
            {
                decimal weight = 0;
                for (int i = 0; i < dataGridView1.Rows.Count - 1; i++)
                {
                    decimal Qnt = dataGridView1.Rows[i].Cells[5].Value.ToDecimal();
                    decimal UnitWeight = Codes.Search2("select isnull(Weight,0) from Units where Name='" + dataGridView1.Rows[i].Cells[4].Value + "'").Rows[0][0].ToDecimal();
                    weight += Qnt * UnitWeight;
                }
                textBox2.Text = Math.Round(weight, ProSetting.Round, MidpointRounding.AwayFromZero).ToString("F" + ProSetting.Round);
                ItemCombo.Focus();
            }
            catch { }
            try
            {
                if (ProSetting.BarcodeOrItem == "كود الصنف")
                {
                    dataGridView1.CurrentCell = dataGridView1.Rows[dataGridView1.Rows.Count - 1].Cells["Barcode"];
                    dataGridView1.CellEndEdit -= dataGridView1_CellEndEdit;
                    dataGridView1.CellBeginEdit -= dataGridView1_CellBeginEdit;
                    dataGridView1.CellFormatting -= dataGridView1_CellFormatting;
                    dataGridView1.CellValidating -= dataGridView1_CellValidating;
                    try
                    {

                        dataGridView1.BeginEdit(true);
                    }
                    catch
                    {
                    }

                    dataGridView1.CellEndEdit += dataGridView1_CellEndEdit;
                    dataGridView1.CellBeginEdit += dataGridView1_CellBeginEdit;
                    dataGridView1.CellFormatting += dataGridView1_CellFormatting;
                    dataGridView1.CellValidating += dataGridView1_CellValidating;
                }
                else if (ProSetting.BarcodeOrItem == "اسم الصنف")
                {
                    dataGridView1.CurrentCell = dataGridView1.Rows[dataGridView1.Rows.Count - 1].Cells["ItemName"];
                    dataGridView1.Rows[dataGridView1.Rows.Count - 1].Cells["ItemName"].Selected = true;

                }
                else
                {
                    var index = dataGridView1.CurrentRow.Index + 1 >= dataGridView1.RowCount
                                                             ? dataGridView1.RowCount - 1
                                                             : dataGridView1.CurrentRow.Index + 1;
                    var colIndex = index == dataGridView1.RowCount - 1
                        ? _lastAddItemColumnIndex
                        : dataGridView1.CurrentCell.ColumnIndex;

                    dataGridView1.CurrentCell = dataGridView1.Rows[index].Cells[colIndex];
                    dataGridView1.CurrentCell.Selected = true;
                }
            }
            catch { }
        }

        private void button15_Click(object sender, EventArgs e)
        {
            WindowState = FormWindowState.Minimized;
        }

        private bool descendingOrder = false;
        private void button16_Click(object sender, EventArgs e)
        {
            FrmItems i = new FrmItems();
            var result = i.ShowDialog();

            if (i.CustomdialogResult == DialogResult.OK)
            {
                storeID = "0";
                descendingOrder = true;
                //LoadItems();
                StoreCombo_SelectedIndexChanged(sender, e);
                button15.Enabled = true;
            }
        }

        private void UnitsCom_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (UnitsCom.Focused)
            {
                try
                {
                    LoadWithUnits(UnitsCom.SelectedValue.Stringify(), ItemCombo.SelectedValue.Stringify());
                }
                catch { }
                try
                {
                    BarcodeText.Text = Codes.Search2("select Barcode from ItemsUnit where ItemID = '" + ItemCombo.SelectedValue + "' and UnitID = '" + UnitsCom.SelectedValue + "'").Rows[0][0].Stringify();
                }
                catch { }
            }
        }

        private void DarebaText_TextChanged(object sender, EventArgs e)
        {
            try
            {

                x = (textBox3.Text).ToDecimal();
                y = (textBox5.Text).ToDecimal();
                decimal Trans = TransportValue.Text.ToDecimal();
                if (ProSetting.DarebaAfterDiscount)
                {
                    TotAfter = Math.Round(((y - x) + (((y - x) * DarebaText.Text.ToDecimal()) / 100)), ProSetting.Round, MidpointRounding.AwayFromZero);
                }
                else
                {
                    TotAfter = Math.Round(((y - x) + ((y * DarebaText.Text.ToDecimal()) / 100)), ProSetting.Round, MidpointRounding.AwayFromZero);
                }
                textBox11.Text = (TotAfter + ((TotAfter / 100) * textBox20.Text.ToDecimal()) + Trans).Stringify();

            }
            catch
            {
            }
        }

        private void DarebaText_KeyPress(object sender, KeyPressEventArgs e)
        {
            try
            {
                if (((int)e.KeyChar >= 48 && (int)e.KeyChar <= 57) || (int)e.KeyChar == 46 || (int)e.KeyChar == 8)
                {
                    if ((int)e.KeyChar == 46)
                    {
                        if (DarebaText.Text.Contains("."))
                            e.Handled = true;
                    }
                }
                else
                    e.Handled = true;
            }
            catch { }
        }

        private void DarebaText_Leave(object sender, EventArgs e)
        {
            try
            {
                if (DarebaText.Text == "")
                    DarebaText.Text = "0";
            }
            catch { }
        }

        private void textBox10_TextChanged(object sender, EventArgs e)
        {
            try
            {
                if (ProSetting.LinkBilltypeWithCashFromClient)
                {
                    x = (textBox10.Text).ToDecimal();
                    y = (textBox11.Text).ToDecimal();

                    label18.Text = (y - x).Stringify();
                }
                else
                {
                    if (ProSetting.CancelMadfo)
                    {

                        x = textBox10.Text.ToDecimal();
                        y = textBox11.Text.ToDecimal();

                        label18.Text = (y - x).Stringify();

                    }
                    else if (ProSetting.CancelMadfoForNakdi &&
                             ProSetting.NakdiClient == ClientCombo.SelectedValue.ToInt32())
                    {

                        x = textBox10.Text.ToDecimal();
                        y = textBox11.Text.ToDecimal();

                        label18.Text = (y - x).Stringify();

                    }
                    else
                    {
                        if (ProSetting.PayMax)
                        {
                            x = textBox10.Text.ToDecimal();
                            y = textBox11.Text.ToDecimal();

                            label18.Text = (y - x).Stringify();
                        }
                        else
                        {
                            x = textBox10.Text.ToDecimal();
                            y = textBox11.Text.ToDecimal();

                            if (x > y)
                            {
                                MessageBox.Show(Tr.M2.m831);

                                textBox9.Text = "0";
                            }

                            label18.Text = (y - x).ToString("F" + ProSetting.Round);
                        }
                    }
                }

                label22.Text = ProSetting.RassedofClientsupplier && panel8.Visible
                    ? (label45.Text.ToDecimal()
                    + textBox11.Text.ToDecimal()
                    - textBox10.Text.ToDecimal()).NormalizeDecimalPlaces(ProSetting.Round).Stringify()
                    : (label27.Text.ToDecimal()
                    + (textBox11.Text.ToDecimal() - textBox10.Text.ToDecimal()))
                        .NormalizeDecimalPlaces(ProSetting.Round).Stringify();
            }
            catch
            {
            }
        }

        private void textBox11_TextChanged_1(object sender, EventArgs e)
        {
            if (PayedKindCom.Text == "نقدى")
            {
                textBox9.Text = textBox11.Text;
            }
            else
            {
                try
                {
                    decimal madfo = Convert.ToDecimal(textBox10.Text);
                    decimal safey = Convert.ToDecimal(textBox11.Text);
                    label18.Text = (safey - madfo).Stringify();
                }
                catch { }
            }
        }

        private void textBox11_MouseHover(object sender, EventArgs e)
        {
            //toolTip1.SetToolTip(textBox11, "ربحية الفاتورة =" + Math.Round(Convert.ToDecimal(RebheaText.Text), 2).Stringify());
        }

        private void textBox11_TextChanged_2(object sender, EventArgs e)
        {
            try
            {
                x = Convert.ToDecimal((textBox10.Text).Stringify());
                y = Convert.ToDecimal((textBox11.Text).Stringify());
                if (PayedKindCom.Text == "نقدى")
                {
                    textBox9.Text = textBox11.Text;
                }
                else
                    textBox9.Text = "0";
                label18.Text = (y - x).Stringify();
                label22.Text = ProSetting.RassedofClientsupplier && panel8.Visible
                    ? Math.Round(
                            Convert.ToDecimal(label45.Text) + Convert.ToDecimal(textBox11.Text) -
                            Convert.ToDecimal(textBox10.Text),
                            ProSetting.Round, MidpointRounding.AwayFromZero)
                        .ToString("F" + ProSetting.Round)
                    : Math.Round(
                            Convert.ToDecimal(label27.Text) +
                            (Convert.ToDecimal(textBox11.Text) - Convert.ToDecimal(textBox10.Text)),
                            ProSetting.Round, MidpointRounding.AwayFromZero)
                        .ToString("F" + ProSetting.Round);

                if (!textBox3.Focused && RBDiscountPercentage.Checked)
                {
                    x = Convert.ToDecimal((textBox4.Text).Stringify());

                    y = Convert.ToDecimal((textBox5.Text).Stringify());
                    decimal Trans = Convert.ToDecimal(TransportValue.Text);
                    c = y * x / 100;
                    if (ProSetting.DarebaAfterDiscount)
                    {
                        TotAfter = (Math.Round((y - c) + (((y - c) * Convert.ToDecimal(DarebaText.Text)) / 100), ProSetting.Round, MidpointRounding.AwayFromZero));
                    }
                    else
                    {
                        TotAfter = (Math.Round((y - c) + ((y * Convert.ToDecimal(DarebaText.Text)) / 100), ProSetting.Round, MidpointRounding.AwayFromZero));
                    }
                    textBox11.Text = (TotAfter + ((TotAfter / 100) * Convert.ToDecimal(textBox20.Text)) + Trans).Stringify();
                    textBox3.Text = Math.Round(c, ProSetting.Round, MidpointRounding.AwayFromZero).ToString("F" + ProSetting.Round);
                }
            }
            catch
            {
            }

        }

        private void ClientCombo_SelectedIndexChanged(object sender, EventArgs e)
        {

            if (ClientCombo.SelectedIndex < 0 || ClientCombo.SelectedValue.ToInt32() == 0)
            {
                label27.Text = "-";
                return;
            }

            if (_OnLoad || reload)
                return;

            if (_lastSelectedValue == ClientCombo.SelectedValue.ToInt32())
                return;



            try
            {
                LoadClientRassed();
            }
            catch
            {
                // ignored
            }

        }

        private void ClientCombo_SelectionChangeCommitted(object sender, EventArgs e)
        {
            if (_OnLoad || reload)
                return;

            if (_lastSelectedValue == ClientCombo.SelectedValue.ToInt32())
                return;


            try
            {
                LoadClientRassed();
            }
            catch { }

        }
        DataTable dtx;
        string storeID = ""; bool g = false;
        private void StoreCombo_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (dataGridView1.Rows.Count > 1)
            {
                if (ProSetting.ItemCombo == false || ProSetting.Egypt_E_Receipt)
                {
                    StoreCombo.SelectedValue = storeID;

                    if (g)
                    {
                        MessageBox.Show(Tr.M1.m0509);
                        g = false;
                    }
                    else
                    {
                        g = true;
                    }
                }
                else
                {
                    storeID = StoreCombo.SelectedValue.ToInt32().Stringify();
                    LoadItems();

                }
            }
            else
            {
                try
                {
                    if (StoreCombo.SelectedValue.ToInt32() != 0)
                        if (storeID.ToInt32() == StoreCombo.SelectedValue.ToInt32())
                            return;
                    storeID = StoreCombo.SelectedValue.ToText();
                    LoadItems(storeID);
                    button15.Enabled = true;

                    if (ProSetting.ItemsTax == false)
                    {
                        TaxNum.Value = 0;
                    }
                    else
                    {
                        TaxNum.Value = Convert.ToDecimal(Codes.Search2("select Tax from Items where ID='" + ItemCombo.SelectedValue + "'").Rows[0][0]);
                    }
                }
                catch { }
            }
        }
        private int _lastSelectedValue = 0;
        private int _lastSelectedIndex = 0;
        private void ClientCombo_SelectedValueChanged(object sender, EventArgs e)
        {

            if (_OnLoad || reload)
                return;

            if (_lastSelectedValue == ClientCombo.SelectedValue.ToInt32())
                return;
            if (txtMobile.Focused && !selectedbymobileFilter && filterbyMobile)
                return;


            _lastSelectedValue = ClientCombo.SelectedValue.ToInt32();

            if (ClientCombo.SelectedIndex < 0 || ClientCombo.SelectedValue.ToInt32() == 0)
            {
                if (!txtMobile.Focused)
                    txtMobile.Text = "";
                if (!TxtClientCode.Focused)
                    TxtClientCode.Text = "";
                return;
            }
            bill = true;
            try
            {
                DataTable dt = Codes.Search2(@"
SELECT dbo.Sellers.ID, dbo.Sellers.Name,
Clients.Mobile,Clients.blacklist,Clients.BlockReason
FROM dbo.Clients 
INNER JOIN dbo.Sellers ON dbo.Clients.SellerID = dbo.Sellers.ID 
where Clients.ID = '" + ClientCombo.SelectedValue + "'");
                if (ProSetting.ClientSeller)
                {
                    SellerCombo.SelectedValue = dt.Rows[0]["ID"].ToInt32();


                    if (SellerCombo.DataSource != null
                        && ((DataTable)SellerCombo.DataSource).Rows.Count != 1)
                    {
                        if (SellerCombo.SelectedValue == null
                        || SellerCombo.SelectedIndex == -1)
                        {
                            MessageBox.Show(Tr.M1.m0255);
                            SellerCombo.SelectedIndex = 0;
                        }
                    }
                }
                txtMobile.Text = dt.Rows[0]["Mobile"].ToText();
                SellerCombo_SelectedIndexChanged(sender, e);
                //listBox2.Visible = false;
                if (dt.Rows[0]["blacklist"].ToBool())
                {
                    MessageBox.Show(Tr.M2.m803 + Environment.NewLine + dt.Rows[0]["BlockReason"].Stringify(), Tr.M1.alert);
                }
            }
            catch { }

            SetPayTypeSettings();

            try
            {
                if (ProSetting.SalesDayn)
                {
                    int DaynAge = Codes.Search2("select DaynAge from clients where id=" + ClientCombo.SelectedValue).Rows[0][0].ToInt32();
                    if (DaynAge != 0)
                    {
                        DateTime date = DateTime.Today;
                        date = date.AddMonths((-1) * DaynAge);
                        DataTable dta = Codes.Search2("select isnull(sum(madeen),0)- isnull(sum(daen),0)from client5 where ClientId=" + ClientCombo.SelectedValue.ToInt32().Stringify());
                        decimal val = dta.Rows[0][0].ToDecimal();
                        if (val > 0)
                        {
                            DataTable dtb = Codes.Search2("select top 1 date from client5 where clientid=" + ClientCombo.SelectedValue + " order by [date] desc");
                            if (Convert.ToDateTime(dtb.Rows[0][0].Stringify()) <= date)
                            {
                                MessageBox.Show(Tr.M1.m0359);
                                bill = false;
                            }
                        }
                    }
                }
                else if (ProSetting.SalesDayn2)
                {
                    int DaynAge = Codes.Search2("select DaynAge from clients where id=" + ClientCombo.SelectedValue).Rows[0][0].ToInt32();
                    if (DaynAge != 0)
                    {
                        if (sc.DenySales(ClientCombo.SelectedValue.Stringify(), DaynAge))
                        {
                            MessageBox.Show(Tr.M1.m0359);
                            bill = false;

                        }
                    }
                }
            }
            catch { }
            try
            {
                {
                    if (ProSetting.SalesDebtAge)
                    {
                        int DaynAge = Convert.ToInt32(Codes.Search2("select DebtAgeDays from clients where Name='" + ClientCombo.Text + "'").Rows[0][0].Stringify());
                        if (DaynAge != 0)
                        {
                            DateTime date = DateTime.Today;
                            date = date.AddDays((-1) * DaynAge);
                            DataTable dta = Codes.Search2(@"SELECT     ISNULL(SUM(dbo.Client5.Madeen), 0) - ISNULL(SUM(dbo.Client5.Daen), 0) AS Expr1
FROM         dbo.Client5 INNER JOIN
                      dbo.Clients ON dbo.Client5.ClientID = dbo.Clients.ID where Clients.Name='" + ClientCombo.Text + "'");
                            decimal val = Convert.ToDecimal(dta.Rows[0][0].Stringify());
                            if (val > 0)
                            {
                                DataTable dtb = Codes.Search2(@"SELECT     TOP (1) dbo.Client5.Date
FROM         dbo.Client5 INNER JOIN
                      dbo.Clients ON dbo.Client5.ClientID = dbo.Clients.ID where Clients.Name='" + ClientCombo.Text + "' order by Client5.Date desc");
                                if (Convert.ToDateTime(dtb.Rows[0][0].Stringify()) <= date)
                                {
                                    MessageBox.Show(Tr.M2.m683);
                                    bill = false;
                                }
                            }
                        }
                    }
                }
            }
            catch { }
            try
            {
                if (ProSetting.BillTypeClient)
                {
                    DataTable gh = Codes.Search2("select BillType from clients where id = '" + ClientCombo.SelectedValue.Stringify() + "'");
                    if (gh.Rows[0][0].ToText() == "")
                    {
                        BillKindCom.Text = ProSetting.BillType;
                    }
                    else
                    {
                        BillKindCom.Text = gh.Rows[0][0].Stringify();
                    }
                }
                //else
                //{
                //    BillKindCom.Text = ProSetting.BillType;
                //}
            }
            catch { }
            checkBox4_CheckedChanged(sender, e);
            if (ProSetting.SalesAutoSaveEnabled)
                CheckClientUnsavedWork();
            try
            {
                DataTable dtx = Codes.Search2("SELECT isnull(CreditLimit,0) FROM Clients where ID = " + ClientCombo.SelectedValue);
                decimal Credit = Math.Round((Convert.ToDecimal(dtx.Rows[0][0].Stringify())), ProSetting.Round, MidpointRounding.AwayFromZero);
                if (Credit > 0)
                {
                    if (Convert.ToDecimal(label27.Text) > Credit)
                    {
                        MessageBox.Show(Tr.M1.m0369);
                        if (!Convert.ToBoolean(FrmMainNEW.CurrentUser["skipCreditLimit"].Stringify()))
                        {
                            bill = false;
                        }
                    }
                }
            }
            catch { }

            try
            {
                TxtClientCode.Text = ClientCombo.SelectedValue.Stringify();
            }
            catch (Exception exception)
            {
                // Igonered
            }
        }

        private void CheckClientUnsavedWork()
        {
            try
            {
                if (!ProSetting.SalesAutoSaveEnabled)
                    return;

                if (Convert.ToInt32(ClientCombo.SelectedValue) == 0 || CurrentAutoSaveModel == null)
                    return;

                var oldAutoSaveModel = new AutoSaveSalesModel
                {
                    ClientId = CurrentAutoSaveModel.ClientId,
                    TempId = CurrentAutoSaveModel.TempId,
                    OldClientId = CurrentAutoSaveModel.OldClientId,
                    ItemsCount = CurrentAutoSaveModel.ItemsCount
                };

                CurrentAutoSaveModel.OldClientId =
                    CurrentAutoSaveModel.ClientId == Convert.ToInt32(ClientCombo.SelectedValue)
                        ? 0
                        : CurrentAutoSaveModel.ClientId;

                CurrentAutoSaveModel.ClientId = Convert.ToInt32(ClientCombo.SelectedValue);
                CurrentAutoSaveModel.ItemsCount = dataGridView1.RowCount - 1;

                try
                {
                    _autoSaveManager.OpenningSalesScreens.RenameKey(oldAutoSaveModel, CurrentAutoSaveModel);
                }
                catch (Exception exx)
                {
                }

                var foundUnSavedWork =
                    _autoSaveManager.CheckIfClientHaveUnSavedBills(Convert.ToInt32(ClientCombo.SelectedValue));

                if (foundUnSavedWork != null)
                {
                    if (new FrmMessageDialog(foundUnSavedWork.Count == 1 ? Tr.M1.m1101 : Tr.M1.m1102, Tr.M1.message, this, DialogResult.Yes, DialogResult.No).ShowDialog() == DialogResult.Yes)
                    {
                        try
                        {
                            _autoSaveManager.LoadUnSavedBills(this, ClientCombo.SelectedValue.Stringify());
                        }
                        catch (Exception exx)
                        {
                        }

                        CurrentAutoSaveModel.TempId = foundUnSavedWork[0].TempId;
                        CurrentAutoSaveModel.ItemsCount = foundUnSavedWork[0].ItemsCount;
                        CurrentAutoSaveModel.ItemsCount = dataGridView1.RowCount - 1;

                    }
                }
            }
            catch (Exception exception)
            {
            }
        }

        bool bill;
        private void dataGridView1_CellEndEdit(object sender, DataGridViewCellEventArgs e)
        {
            try
            {
                //if (e.ColumnIndex == 9)
                //    return;

                var rowIndex = e.RowIndex;
                if (AllBarcode.StartsWith(ProSetting.Mezan))
                {
                    foreach (DataGridViewRow row in dataGridView1.Rows)
                    {
                        if (row.Cells["Barcode"].Value.ToText() == Barcode.ToText())
                        {
                            rowIndex = dataGridView1.Rows.IndexOf(row);
                            break;
                        }
                    }
                }

                if (rowIndex >= 0 && rowIndex != dataGridView1.RowCount - 1)
                {
                    var itemtotalprice = (dataGridView1.Rows[rowIndex].Cells["Quantity"].Value.ToDecimal()
                         * dataGridView1.Rows[rowIndex].Cells["UnitPrice"].Value.ToDecimal())
                         .RoundBy(ProSetting.Round);

                    var discountPercentage = dataGridView1.Rows[rowIndex].Cells["Discount"].Value.ToDecimal().RoundBy(ProSetting.Round);

                    var itemDiscountType =
                        (DiscountType)Convert.ToByte(dataGridView1.Rows[rowIndex].Cells["DiscountType"]
                            .Value);
                    var discountValue = e.ColumnIndex == dataGridView1.Columns["DiscountValue"].Index
                                        || itemDiscountType == DiscountType.Value
                                        ? dataGridView1.Rows[rowIndex].Cells["DiscountValue"].Value.ToDecimal()
                                           .RoundBy(ProSetting.Round)
                                        : ((itemtotalprice * discountPercentage) / 100).RoundBy(ProSetting.Round);

                    var taxPercentage = dataGridView1.Rows[rowIndex].Cells["ItemTax"].Value.ToDecimal().RoundBy(ProSetting.Round);

                    var TaxValue = 0M;

                    var netSales = (itemtotalprice - discountValue).RoundBy(ProSetting.Round);
                    decimal newt = 0;
                    if (ProSetting.ItemsAdditionValue)
                    {
                        var additionValue = (dataGridView1.Rows[rowIndex].Cells["AdditionValue"].Value.ToDecimal()
                                            * dataGridView1.Rows[rowIndex].Cells["Quantity"].Value.ToDecimal());

                        netSales = netSales + additionValue;
                    }
                    else if (ProSetting.ItemsTax)
                    {
                        try
                        {
                            if (ProSetting.DarebaAfterDiscount)
                            {
                                TaxValue = (netSales * (taxPercentage / 100)).RoundBy(ProSetting.Round);

                            }
                            else
                            {
                                TaxValue = ((itemtotalprice * taxPercentage) / 100).RoundBy(ProSetting.Round);
                            }
                        }
                        catch
                        {
                        }
                    }

                    newt = (netSales + TaxValue).RoundBy(ProSetting.Round);

                    try
                    {
                        HandleCellValueChanged();

                        dataGridView1.Rows[rowIndex].Cells["DiscountValue"].Value = discountValue.NormalizeDecimalPlaces(ProSetting.Round).Stringify();

                        dataGridView1.Rows[rowIndex].Cells["TotalPrice"].Value = newt.NormalizeDecimalPlaces(ProSetting.Round).Stringify();

                        dataGridView1.Rows[rowIndex].Cells["TotalBuy"].Value =
                                (dataGridView1.Rows[rowIndex].Cells["Quantity"].Value.ToDecimal()
                                  * dataGridView1.Rows[rowIndex].Cells["buyPrice"].Value.ToDecimal())
                                  .ToString("F" + ProSetting.Round);


                        dataGridView1.Rows[e.RowIndex].Cells["Rebhea"].Value =
                                (dataGridView1.Rows[rowIndex].Cells["TotalPrice"].Value.ToDecimal()
                                - TaxValue.ToDecimal()
                                - dataGridView1.Rows[rowIndex].Cells["TotalBuy"].Value.ToDecimal())
                                .ToString("F" + ProSetting.Round);
        
                        var itemQnt = dataGridView1.Rows[rowIndex].Cells["Quantity"].Value.ToDecimal();
                        var itemFactor = dataGridView1.Rows[rowIndex].Cells["mainIt"].Value.ToDecimal();
                        var qntByMainUnit = (itemQnt * itemFactor);

                        dataGridView1.Rows[rowIndex].Cells["countItemmain"].Value = qntByMainUnit.NormalizeDecimalPlaces().Stringify();
                        var unitFactor = dataGridView1.Rows[rowIndex].Cells["mainIt"].Value.ToDecimal();

                        var itemMainUnitPrice = unitFactor == 0
                            ? 0
                            : (dataGridView1.Rows[rowIndex].Cells["UnitPrice"].Value.ToDecimal()
                            / unitFactor);

                        dataGridView1.Rows[rowIndex].Cells["MainUnitPrice"].Value = itemMainUnitPrice.NormalizeDecimalPlaces(ProSetting.Round).Stringify();
                    }
                    catch
                    {
                    }
                    finally
                    {
                        ReleaseCellValueChanged();
                    }
                }

                Total = 0;
                totalrebh = 0;
                decimal pointsNo = 0M, pointPrice = 0M, billPointsTotalAmount = 0M, billPointsCount = 0M;

                var dtPointCalculations =
                            Codes.Search2("select Isnull(PointNo,0),Isnull(PointPrice,0) from ProSetting");
                if (dtPointCalculations.Rows.Count > 0)
                {
                    pointsNo = dtPointCalculations.Rows[0][0].ToDecimal();
                    pointPrice = dtPointCalculations.Rows[0][1].ToDecimal();
                }
                else
                    pointsNo = pointPrice = 0M;



                if (dataGridView1.Rows.Count > 1)
                {
                    decimal TB = 0;
                    decimal rebhea = 0;
                    decimal vatitemsTotal = 0;

                    for (int i = 1; i < dataGridView1.Rows.Count; i++)
                    {
                        decimal taxValue = 0;
                        if (ProSetting.ItemsTax)
                        {
                            try
                            {
                                var itemtotal =
                                    (dataGridView1.Rows[i - 1].Cells["UnitPrice"].Value.ToDecimal()
                                     * dataGridView1.Rows[i - 1].Cells["Quantity"].Value.ToDecimal())
                                     .RoundBy(ProSetting.Round);


                                var currentitemDiscountType =
                                    (DiscountType)Convert.ToByte(dataGridView1.Rows[i - 1].Cells["DiscountType"]
                                        .Value);

                                var itemDiscount = currentitemDiscountType == DiscountType.Percentage
                                    ? (itemtotal * dataGridView1.Rows[i - 1].Cells["Discount"].Value.ToDecimal() / 100)
                                        .RoundBy(ProSetting.Round)
                                    : dataGridView1.Rows[i - 1].Cells["DiscountValue"].Value.ToDecimal()
                                        .RoundBy(ProSetting.Round);

                                var itemTax = dataGridView1.Rows[i - 1].Cells["ItemTax"].Value.ToDecimal();
                                var additionValue = dataGridView1.Rows[i - 1].Cells["AdditionValue"].Value.ToDecimal();

                                var netItemSales = (itemtotal - itemDiscount).RoundBy(ProSetting.Round);

                                netItemSales = netItemSales + additionValue;

                                taxValue = (ProSetting.DarebaAfterDiscount
                                        ? netItemSales * itemTax / 100
                                        : itemtotal * itemTax / 100).RoundBy(ProSetting.Round);

                                vatitemsTotal += taxValue;
                            }
                            catch
                            {
                            }
                        }

                        TB = dataGridView1.Rows[i - 1].Cells["TotalPrice"].Value.ToDecimal().RoundBy(ProSetting.Round);
                        rebhea = dataGridView1.Rows[i - 1].Cells["Rebhea"].Value.ToDecimal().RoundBy(ProSetting.Round);
                        Total += TB;
                        totalrebh += rebhea;
                        if (ChkAddBillPointsAsDiscount.Checked)
                        {
                            if (pointsNo == 0 || pointPrice == 0)
                                continue;

                            var quantity = dataGridView1.Rows[i - 1].Cells["Quantity"].Value.ToDecimal();
                            var ItMain = dataGridView1.Rows[i - 1].Cells["mainIt"].Value.ToDecimal();
                            var itemPoints = dataGridView1.Rows[i - 1].Cells["ItemPoints"].Value.ToDecimal() * quantity * ItMain;

                            billPointsTotalAmount += ((itemPoints * pointPrice) / pointsNo).RoundBy(ProSetting.Round);
                            billPointsCount += itemPoints;
                        }
                    }

                    textBox5.Text = Total.ToString("F" + ProSetting.Round);

                    if (billPointsTotalAmount > 0)
                    {
                        discountChanged = true;
                        textBox3.Text = billPointsTotalAmount.ToString("F" + ProSetting.Round);
                        LblBillPoints.Text = billPointsCount.ToString("F" + ProSetting.Round);
                    }

                    RebheaText.Text = (totalrebh - textBox3.Text.ToDecimal()).ToString("F" + ProSetting.Round);
                    ItemsVATTotalValue = vatitemsTotal;
                }
            }
            catch
            {
            }
            finally
            {
                try
                {
                    if (e.RowIndex != -1)
                    {
                        if (e.ColumnIndex != dataGridView1.Columns["Quantity"].Index)
                            CalculatePreferredWidthForColumns();
                        else
                            if (ProSetting.OnQuantity && QuantityChecked)
                            CalculatePreferredWidthForColumns();
                    }
                }
                catch
                {
                }
            }
        }
        private void CalculatePreferredWidthForColumns()
        {
            if (!_OnLoad)
            {
                foreach (DataGridViewColumn column in dataGridView1.Columns)
                {
                    try
                    {
                        if (dataGridView1.InvokeRequired)
                            dataGridView1.Invoke(
                                new MethodInvoker(
                                    () =>
                                    {
                                        SetColumnWidth(column);
                                    }));
                        else
                            SetColumnWidth(column);
                    }
                    catch (Exception ex)
                    {
                    }
                }
            }
        }
        private void SetColumnWidth(DataGridViewColumn column)
        {
            if (!column.Visible)
                return;
            if (column.Index == dataGridView1.Columns["ItemName"].Index)
            {
                var displayedCount = dataGridView1.DisplayedColumnCount(true);
                int displayedWidth = dataGridView1.Width / displayedCount;
                int columnWidth = displayedWidth - 20;

                var preferredPercentage = displayedCount > 12 ? 25 : 40;
                var preferredWidth = column.GetPreferredWidth(DataGridViewAutoSizeColumnMode.AllCells, false);

                var percentage = ((preferredWidth.ToDouble() / dataGridView1.Width.ToDouble()) * 100D);
                if (percentage.NormalizeDecimalPlaces(0) <= column.FillWeight.ToDouble().NormalizeDecimalPlaces(0) || percentage < preferredPercentage)
                    column.Width = preferredWidth + 5;
                else

                    column.Width = preferredPercentage * dataGridView1.Width / 100;
            }
            else if (column.Index == dataGridView1.Columns["Image"].Index)
            {
                column.Width = 100;
            }
            else
            {
                dataGridView1.AutoResizeColumn(column.Index, DataGridViewAutoSizeColumnMode.AllCells);
            }
            //var currentWidth = column.Width;

            //var displayedCount = dataGridView1.DisplayedColumnCount(true);
            //int displayedWidth = dataGridView1.Width / displayedCount;
            //int columnWidth = displayedWidth - 20;

            //var preferredWidth = column.GetPreferredWidth(DataGridViewAutoSizeColumnMode.AllCells, false);

            //var precentage = ((preferredWidth.ToDouble() / dataGridView1.Width.ToDouble()) * 100D);
            //if (precentage.NormalizeDecimalPlaces(0) <= column.FillWeight.ToDouble().NormalizeDecimalPlaces(0) || precentage < 10)
            //    column.Width = preferredWidth + 5;
            //else
            //    column.Width = displayedCount <= 12 ?  displayedWidth * 3 : displayedWidth * 2;


            //column.AutoSizeMode = DataGridViewAutoSizeColumnMode.None;
        }
        decimal BuyPr = 0, StoreQty = 0, Qnt = 1;
        int barcodeSearchType = 0;
        bool addRow = false;
        string AllBarcode = "", Barcode = "";
        DataTable IfMezan = new DataTable();
        bool underDelev = false;
        string ItemColor = "";
        bool itemBarcodeIsNull = false;
        decimal ItemsVATTotalValue = 0;
        bool newRowbyBarcode = false;
        bool QuantityChecked = false;
        decimal mezanQnt = 0;

        private DataTable dtItemComponent = new DataTable();
        decimal availableQuantityOftheItem = 0, BuyPrice = 0, ActualItemStoreQuantity = 0;
        DataTable dtItemStoreQnt = new DataTable();
        decimal addedQuantity = 1;
        private DataGridViewCellStyle disabledCellStyle;
        private Dictionary<KeyValuePair<int,int>, DataTable> _dcItemComponents = new Dictionary<KeyValuePair<int, int>, DataTable>();

        private bool CellValueChanged = false;
        private void dataGridView1_CellValueChanged(object sender, DataGridViewCellEventArgs e)
        {
            CellValueChanged = true;
            AllBarcode = Barcode = "";
            barcodeSearchType = 0;
            if (StoreCombo.Text == "<-اختر->" && (e.ColumnIndex == 1 || e.ColumnIndex == 2))
            {
                MessageBox.Show(Tr.M1.m0299);
                try
                {
                    dataGridView1.Rows.Remove(dataGridView1.CurrentRow);
                    if (ProSetting.BarcodeOrItem == "كود الصنف")
                    {
                        dataGridView1.CurrentCell = dataGridView1.Rows[dataGridView1.RowCount - 1].Cells[1];
                        SendKeys.Send("{ENTER}");

                    }
                    else if (ProSetting.BarcodeOrItem == "اسم الصنف")
                    {
                        dataGridView1.CurrentCell = dataGridView1.Rows[dataGridView1.RowCount - 1].Cells[2];
                        dataGridView1.CurrentCell.Selected = true;
                        SendKeys.Send("{ENTER}");
                    }
                    //else
                    //{
                    //    var index = e.RowIndex + 1 >= dataGridView1.RowCount ? e.RowIndex : e.RowIndex + 1;
                    //    dataGridView1.Rows[index].Cells[dataGridView1.CurrentCell.ColumnIndex].Selected = true;
                    //    SendKeys.Send("{ENTER}");
                    //}
                }
                catch { }
                ItemIDbyBarcode = ""; ItemBarcode = ""; underDelev = false; Qnt = 1;
            }
            else
            {
                if (e.RowIndex != -1 && e.ColumnIndex != 1 && e.ColumnIndex != 2 && e.ColumnIndex != 0)
                {
                    itemAdded = false;
                    try
                    {

                        if (dataGridView1.Rows[e.RowIndex].Cells["Barcode"].Value == null
                            || dataGridView1.Rows[e.RowIndex].Cells["ItemID"].Value == null)
                        {
                            MessageBox.Show(Tr.M2.m624);

                            try
                            {
                                HandleCellValueChanged();
                                dataGridView1.CellEndEdit -= dataGridView1_CellEndEdit;
                                dataGridView1.RowsRemoved -= dataGridView1_RowsRemoved;

                                dataGridView1.NotifyCurrentCellDirty(false);
                                dataGridView1.EndEdit();
                                dataGridView1.NotifyCurrentCellDirty(true);

                                try
                                {
                                    dataGridView1.Rows.Remove(dataGridView1.CurrentRow);
                                }
                                catch (Exception exc)
                                {
                                }
                                dataGridView1.NotifyCurrentCellDirty(false);
                                dataGridView1.Refresh();
                            }
                            catch (Exception exc)
                            {
                            }
                            finally
                            {
                                ReleaseCellValueChanged();
                                dataGridView1.CellEndEdit += dataGridView1_CellEndEdit;
                                dataGridView1.RowsRemoved += dataGridView1_RowsRemoved;
                            }


                            return;
                        }
                        else if (string.IsNullOrEmpty(dataGridView1.Rows[e.RowIndex].Cells["Barcode"].Value.Stringify())
                                 || string.IsNullOrEmpty(dataGridView1.Rows[e.RowIndex].Cells["ItemID"].Value.Stringify()))
                        {



                            MessageBox.Show(Tr.M2.m624);

                            try
                            {
                                HandleCellValueChanged();
                                dataGridView1.CellEndEdit -= dataGridView1_CellEndEdit;
                                dataGridView1.RowsRemoved -= dataGridView1_RowsRemoved;

                                dataGridView1.NotifyCurrentCellDirty(false);
                                dataGridView1.EndEdit();
                                dataGridView1.NotifyCurrentCellDirty(true);

                                try
                                {
                                    dataGridView1.Rows.Remove(dataGridView1.CurrentRow);
                                }
                                catch (Exception exc)
                                {
                                }
                                dataGridView1.NotifyCurrentCellDirty(false);
                            }
                            catch (Exception exc)
                            {
                            }
                            finally
                            {
                                ReleaseCellValueChanged();
                                dataGridView1.CellEndEdit += dataGridView1_CellEndEdit;
                                dataGridView1.RowsRemoved += dataGridView1_RowsRemoved;
                            }

                        }
                    }
                    catch (Exception ex)
                    {
                    }
                }

                if (dataGridView1.Columns[e.ColumnIndex].Name == "Barcode")
                {
                    try
                    {
                        BarcodeCellValueChanged(e);
                    }
                    catch (Exception exc) 
                    {
                        exc.WriteLog("BarcodeCellValueChanged");
                    }
                }
                else
                {
                    #region ItemName
                    if (dataGridView1.Columns[e.ColumnIndex].Name == "ItemName")
                    {
                        ItemNameCellValueChanged(e);
                    }

                    #endregion

                    #region UnitName
                    else if (dataGridView1.Columns[e.ColumnIndex].Name == "mm")
                    {
                        UnitNameCellValueChanged(e);
                    }
                    #endregion

                    #region Quantity
                    else if (dataGridView1.Columns[e.ColumnIndex].Name == "Quantity")
                    {
                        QuantityCellValueChanged(e);
                    }
                    #endregion


                    #region UnitPrice
                    else if (dataGridView1.Columns[e.ColumnIndex].Name == "UnitPrice")
                    {
                        UnitPriceCellValueChanged(e);
                    }
                    #endregion

                    #region Discount
                    else if (dataGridView1.Columns[e.ColumnIndex].Name == "Discount")
                    {
                        DiscountCellValueChanged(e);
                    }
                    #endregion

                    #region DiscountValue
                    else if (dataGridView1.Columns[e.ColumnIndex].Name == "DiscountValue")
                    {
                        DiscountValueCellValueChanged(e);
                    }
                    #endregion

                    #region UnderDelevItem
                    else if (dataGridView1.Columns[e.ColumnIndex].Name == "UnderDelevItem")
                    {
                        UnderDeliveryCellValueChanged(e);
                    }
                    #endregion

                    #region ItemColor
                    else if (dataGridView1.Columns[e.ColumnIndex].Name == "ItemColor")
                    {
                        ItemColorCellValueChanged(e);
                    }
                    #endregion

                    #region ItemTax
                    else if (dataGridView1.Columns[e.ColumnIndex].Name == "ItemTax")
                    {
                        ItemTaxCellValueChanged(e);
                    }

                    #endregion

                    #region countItemmain
                    else if (dataGridView1.Columns[e.ColumnIndex].Name == "countItemmain")
                    {
                        CountItemMainCellValueChanged(e);
                    }
                    #endregion

                    #region MainUnitPrice
                    else if (dataGridView1.Columns[e.ColumnIndex].Name == "MainUnitPrice")
                    {
                        MaintUnitPriceCellValueChanged(e);
                    }
                    #endregion

                    #region AdditionValue
                    else if (dataGridView1.Columns[e.ColumnIndex].Name == "AdditionValue")
                    {
                        AdditionValueCellValueChanged(e);
                    }
                    #endregion

                }

                try
                {
                    decimal TB = 0; decimal weight = 0;
                    decimal Rebhea = 0; decimal TotalQty = 0;


                    for (int i = 0; i < dataGridView1.Rows.Count - 1; i++)
                    {
                        decimal Qnt = Convert.ToDecimal(dataGridView1.Rows[i].Cells[5].Value.Stringify());
                        TotalQty += Convert.ToDecimal(dataGridView1.Rows[i].Cells[5].Value.Stringify());
                        decimal UnitWeight = Convert.ToDecimal(Codes.Search2("select isnull(Weight,0) from Units where Name='" + dataGridView1.Rows[i].Cells["mm"].Value.Stringify() + "'").Rows[0][0].Stringify());
                        weight += Qnt * UnitWeight;
                        TB += Math.Round((Convert.ToDecimal(dataGridView1.Rows[i].Cells["TotalPrice"].Value.Stringify())), ProSetting.Round, MidpointRounding.AwayFromZero);
                        Rebhea += Math.Round((Convert.ToDecimal(dataGridView1.Rows[i].Cells["Rebhea"].Value.Stringify())), ProSetting.Round, MidpointRounding.AwayFromZero);
                        Total = TB;
                        totalrebh = Rebhea;

                    }
                    textBox5.Text = Math.Round(Total
                        , ProSetting.Round
                        , MidpointRounding.AwayFromZero).ToString("F" + ProSetting.Round);



                    RebheaText.Text = Math.Round(totalrebh - Convert.ToDecimal(textBox3.Text), ProSetting.Round, MidpointRounding.AwayFromZero).ToString("F" + ProSetting.Round);
                    textBox2.Text = Math.Round(weight, ProSetting.Round, MidpointRounding.AwayFromZero).ToString("F" + ProSetting.Round);
                    int count = dataGridView1.Rows.Count - 1;
                    if (dataGridView1.Rows.Count == 0)
                    {
                        count = 0;
                    }
                    textBox19.Text = count.Stringify();
                    textBox14.Text = TotalQty.Stringify();
                }
                catch { }
            }

        }


        private void dataGridView1_EditingControlShowing(object sender, DataGridViewEditingControlShowingEventArgs e)
        {
            try
            {
                if (dataGridView1.CurrentCell.ColumnIndex == 1 && ProSetting.BarcodeOrItem == "كود الصنف")
                    e.Control.Focus();
            }
            catch
            {
            }
        }

        private void BarcodeCellValueChanged(DataGridViewCellEventArgs e)
        {

            _lastAddItemColumnIndex = 1;
            newRowbyBarcode = false;

            availableQuantityOftheItem = 0;
            BuyPrice = 0;
            ItemBarcode = ItemIDbyBarcode = "";
            mezanQnt = 0;
            DataTable dt = new DataTable();

            var updateBuyPriceOFCombinedItem = false;
            var barcodeIsNull = dataGridView1.CurrentRow.Cells[1].Value == null;
            var barcodeIsEmpty = dataGridView1.CurrentRow.Cells[1].Value == "";

            if (barcodeIsNull || barcodeIsEmpty)
            {
                MessageBox.Show(Tr.M1.m0478);
                try
                {
                    dataGridView1.Rows.Remove(dataGridView1.CurrentRow);
                    if (ProSetting.BarcodeOrItem == "كود الصنف")
                    {
                        dataGridView1.CurrentCell = dataGridView1.Rows[dataGridView1.RowCount - 1].Cells[1];
                        SendKeys.Send("{ENTER}");

                    }
                    else if (ProSetting.BarcodeOrItem == "اسم الصنف")
                    {
                        dataGridView1.CurrentCell = dataGridView1.Rows[dataGridView1.RowCount - 1].Cells[2];
                        dataGridView1.CurrentCell.Selected = true;
                        SendKeys.Send("{ENTER}");
                    }

                    //else
                    //{
                    //    var index = e.RowIndex + 1 >= dataGridView1.RowCount ? e.RowIndex : e.RowIndex + 1;
                    //    dataGridView1.Rows[index].Cells[dataGridView1.CurrentCell.ColumnIndex].Selected = true;
                    //    SendKeys.Send("{ENTER}");
                    //}
                    ItemIDbyBarcode = "";
                    ItemBarcode = "";
                    underDelev = false;
                    Qnt = 1;
                }
                catch
                {
                }

                return;
            }

            ItemIDbyBarcode = "";
            ItemBarcode = "";
            barcodeSearchType = 0;
            Qnt = 1;
            IfMezan = new DataTable();
            underDelev = false;
            Barcode = dataGridView1.CurrentRow.Cells[1].Value.ToText();
            try
            {
                AllBarcode = dataGridView1.CurrentRow.Cells[1].Value.Stringify();
                if (AllBarcode.StartsWith(ProSetting.Mezan))
                {
                    int barcide22 = ProSetting.Mezan.Length;
                    if (AllBarcode.Length >= 5)
                    {
                        Barcode = AllBarcode.Substring(barcide22, 5);
                        var parsedQnt = AllBarcode.Substring(Barcode.Length + barcide22, 5).ToDecimal().NormalizeDecimalPlaces();
                        if (parsedQnt != 0)
                            Qnt = parsedQnt;
                        IfMezan = Codes.Search2("SELECT dbo.Items.*,ItemsUnit.barcode " +
                                                "FROM dbo.Items INNER JOIN dbo.ItemsUnit " +
                                                "ON dbo.Items.ID = dbo.ItemsUnit.ItemID  " +
                                                "INNER JOIN dbo.ItemBarcode " +
                                                "ON dbo.Items.ID = dbo.ItemBarcode.ItemID " +
                                                "where (ItemsUnit.Barcode='" + Barcode + "' " +
                                                "or dbo.ItemBarcode.Barcode='" + Barcode + "') " +
                                                "and Items.Mezan='True' and Items.Active = 1");
                    }

                }
            }
            catch (Exception ex)
            {
            }

            if (IfMezan.Rows.Count == 0)
            {
                dt = Codes.Search2(@"SELECT     dbo.Items.ID,Items.barcode,
isnull((Select isnull(Store.Quantity,0)  
From Store Where ItemId=Items.ID and Store.StoreID = " + StoreCombo.SelectedValue + @"),0) as Quantity 
,Items.Name,Items.Khadamy
FROM         dbo.Items INNER JOIN
                      dbo.ItemBarcode ON dbo.Items.ID = dbo.ItemBarcode.ItemID where  Items.Active = 1 
and  ItemBarcode.barcode='" + dataGridView1.CurrentRow.Cells[1].Value + "'");

                if (dt.Rows.Count == 0)
                {
                    dt = Codes.Search2(@"SELECT     dbo.Items.ID,ItemsUnit.barcode,
isnull((Select isnull(Store.Quantity,0)  From Store Where ItemId=Items.ID and Store.StoreID = " +
                                       StoreCombo.SelectedValue + @"),0) as Quantity  
,Items.Name,Items.Khadamy
FROM         dbo.Items INNER JOIN
                      dbo.ItemsUnit ON dbo.Items.ID = dbo.ItemsUnit.ItemID where  Items.Active = 1 and  ItemsUnit.barcode='" +
                                       Barcode + "'");
                    barcodeSearchType = 1;
                }

            }
            else
            {
                if (string.IsNullOrEmpty(Barcode))
                    return;

                dt = Codes.Search2(@"SELECT     dbo.Items.ID,Items.barcode,
isnull((Select isnull(Store.Quantity,0)  From Store Where ItemId=Items.ID and Store.StoreID = " +
                                   StoreCombo.SelectedValue + @"),0) as Quantity 
,Items.Name,Items.Khadamy
FROM         dbo.Items INNER JOIN
                      dbo.Store ON dbo.Items.ID = dbo.Store.ItemID INNER JOIN
                      dbo.ItemBarcode ON dbo.Items.ID = dbo.ItemBarcode.ItemID where  Items.Active = 1 and  ItemBarcode.barcode='" +
                                   Barcode + "'");

                if (dt.Rows.Count == 0)
                {
                    dt = Codes.Search2(@"SELECT     dbo.Items.ID,ItemsUnit.barcode,
isnull((Select isnull(Store.Quantity,0)  From Store Where ItemId=Items.ID and Store.StoreID = " +
                                       StoreCombo.SelectedValue + @"),0) as Quantity 
,Items.Name,Items.Khadamy
FROM         dbo.Items INNER JOIN
                      dbo.Store ON dbo.Items.ID = dbo.Store.ItemID INNER JOIN
                      dbo.ItemsUnit ON dbo.Items.ID = dbo.ItemsUnit.ItemID where Items.Active = 1 and  ItemsUnit.barcode='" +
                                       Barcode + "'");
                    barcodeSearchType = 1;
                }
            }


            var addedToUnderDelivery = false;
            if (dt.Rows.Count > 0)
            {
                if (barcodeSearchType == 1)
                {
                    ItemIDbyBarcode = dt.Rows[0][0].Stringify();
                    ItemBarcode = IfMezan.Rows.Count == 0
                        ? dataGridView1.CurrentRow.Cells[1].Value.Stringify()
                        : Barcode;
                }
                else
                {
                    ItemIDbyBarcode = dt.Rows[0][0].Stringify();
                    ItemBarcode = dt.Rows[0][1].Stringify();
                }

                dtItemComponent =
                        Codes.Search2(
                            @"
select ItemsColleting.* ,
ItemsUnit.ItemID, 
Items.Barcode, 
Items.Name as ItemName ,
(Select Name From Units Where ID =ItemsUnit.UnitId) as UnitName 
from ItemsColleting 
Join ItemsUnit 
on ItemsColleting.ChildItemUnitID = ItemsUnit.Id 
Join Items 
On ItemsUnit.ItemID= Items.ID 
where ParentItemID='" + ItemIDbyBarcode + "'");
            }

            if (ProSetting.SkipQuantityAssemblingOfAnItem)
            {
                if (dtItemComponent.Rows.Count > 0)
                {
                    dtItemStoreQnt = Codes.Search2(
                        @"WITH ItemComponentsCTE AS (
SELECT  Row_Number() Over (Order by ItemsUnit.ItemId,ItemsUnit.ID) as Rn ,
ItemsUnit.ItemID,
ItemsUnit.Barcode,
(Select Name From Items Where ID =ItemsUnit.ItemID) as ItemName,
(Select Name From Units Where ID =ItemsUnit.UnitId) as UnitName,
Isnull((Select Price From Store Where ItemID =ParentITemID and StoreId =  '" + StoreCombo.SelectedValue +
                        @"'),0) as BuyPrice,
 ItemsUnit.ItMain as ComponentItMain,
(
(Case When ItemsUnit.ItMain = 1 
Then Isnull(dbo.Store.Price,0) Else ItemsUnit.BuyPrice END )
" + (!ProSetting.salesByList ? "" : @"
* (1 - ((Select case when Isnull(IsInDiscountList,0) = 0 then 0 
else isnull(discountincoming,0) end from Items Where ID = ItemsUnit.ItemID)/100))
") + @"
)
as ComponentBuyPrice,
Cast((Isnull(dbo.Store.Quantity,0)/ItemsUnit.ItMain) as money) as OriginalComponentStoreQuantity ,
Cast(Qnt as money) as ComponentAssemblingQuantity,
FLOOR(ISNULL(Quantity,0)/(Qnt * ItMain)) as ItemLargestAssembledQuantity,
Isnull((Select Quantity From Store Where ItemID = ParentItemID and StoreId =   '" + StoreCombo.SelectedValue +
                        @"'),0) as ItemStoreQuantity,
Case When Sum(Qnt * ItMain) over (partition by ItemsUnit.ItemID) > Quantity then 0 else 1 end as QuantityAvailableStatus,
Isnull(ModifyBuyprice,1) as ModifyBuyprice ,
Isnull(masnyea,0) as masnyea,
(Select Count(*) From Store Where ItemID =ParentITemID and StoreId =  '" + StoreCombo.SelectedValue + @"') as AddedToStore,
(Select Khadamy From Items Where ID =ItemsUnit.ItemID) as Khadamy
FROM dbo.ItemsColleting 
LEFT JOIN ItemsUnit 
ON ItemsColleting.ChildItemUnitID = ItemsUnit.Id 
LEFT Join dbo.Store 
ON dbo.ItemsUnit.ItemID = dbo.Store.ItemID  and Store.StoreID = '" + StoreCombo.SelectedValue + @"'
where ParentITemID = '" + ItemIDbyBarcode + @"'
),
ValidItemComponentsCTE AS (
    SELECT
        Rn,
        ItemID,
		Barcode,
		ItemName,
		UnitName,
        BuyPrice,
        ComponentBuyPrice,	
        (OriginalComponentStoreQuantity* ComponentItMain -
            (SELECT SUM(ComponentAssemblingQuantity)
             FROM ItemComponentsCTE AS innerCTE
             WHERE innerCTE.ItemID = outerCTE.ItemID
               AND innerCTE.Rn <= outerCTE.Rn) 
            + ComponentAssemblingQuantity)/ ComponentItMain AS ComponentStoreQuantity,
        ComponentAssemblingQuantity,
        ItemLargestAssembledQuantity,
		ItemStoreQuantity,
        ModifyBuyprice,
        masnyea,
		AddedToStore,
        Khadamy
    FROM ItemComponentsCTE AS outerCTE
)
SELECT
    ItemID,
	Barcode,
	ItemName,
	UnitName,
	BuyPrice,
	ComponentBuyPrice,
	ComponentStoreQuantity,
	ComponentAssemblingQuantity,
	CASE 
        WHEN ComponentStoreQuantity < ComponentAssemblingQuantity THEN 0
        ELSE ItemLargestAssembledQuantity end
    ItemLargestAssembledQuantity,
	ItemStoreQuantity,
    CASE 
        WHEN ComponentStoreQuantity < ComponentAssemblingQuantity THEN 0
        ELSE 1
    END AS QuantityAvailableStatus,
    ModifyBuyprice,
	masnyea,
	AddedToStore,
	Khadamy
FROM ValidItemComponentsCTE
ORDER BY Rn;");
                    try
                    {
                        ActualItemStoreQuantity =
                           Convert.ToDecimal(dtItemStoreQnt.Rows[0]["ItemStoreQuantity"].Stringify());
                    }
                    catch (Exception exc)
                    {
                    }

                    var itemNotFoundInStore = dtItemStoreQnt.Rows.Count == 0 ||
                                              Convert.ToInt32(dtItemStoreQnt.Rows[0]["AddedToStore"]
                                                  .Stringify()) == 0;

                    var itemNotEnounghQnt = false;
                    if (itemNotFoundInStore)
                    {
                        MessageBox.Show(Tr.M1.m0256);
                    }
                    else
                    {
                        try
                        {
                            var notavailbleItems = new List<DataRow>();

                            if (dtItemStoreQnt.Rows.Count < dtItemComponent.Rows.Count &&
                                ActualItemStoreQuantity == 0)
                            {
                                notavailbleItems = dtItemComponent.Rows
                                    .OfType<DataRow>()
                                    .Where(dr =>
                                        dtItemStoreQnt.Select("ItemID =" + dr["ItemID"]).Length == 0)
                                    .ToList();
                            }

                            var notavailableItemsQnt = new DataTable();
                            notavailableItemsQnt.Columns.Add("م", typeof(int));
                            notavailableItemsQnt.Columns.Add("الباركود");
                            notavailableItemsQnt.Columns.Add(Tr.M2.item_name);
                            notavailableItemsQnt.Columns.Add("الوحدة");
                            if (dtItemStoreQnt.Rows.Count == dtItemComponent.Rows.Count)
                            {
                                notavailableItemsQnt.Columns.Add("الكمية المتاحة", typeof(decimal));
                                notavailableItemsQnt.Columns.Add("الكمية المطلوبة", typeof(decimal));
                            }

                            if (notavailbleItems.Count > 0)
                            {
                                for (var index = 0; index < notavailbleItems.Count; index++)
                                {
                                    notavailableItemsQnt.Rows.Add((index + 1),
                                        notavailbleItems[index]["Barcode"],
                                        notavailbleItems[index]["ItemName"],
                                        notavailbleItems[index]["UnitName"]);
                                }

                                if (new FrmMessageDialog(Tr.M1.m1098 + StoreCombo.Text + Tr.M1.m1099, Tr.M1.error, this, DialogResult.Yes, DialogResult.No).ShowDialog() == DialogResult.Yes)
                                {
                                    var result = new FrmItemsNotFound(notavailableItemsQnt,
                                            "مكونات الصنف الغير موجوده بالمخزن المُباع منه")
                                        .ShowDialog();
                                    addedToUnderDelivery = result == DialogResult.OK;
                                }

                                itemNotEnounghQnt = !addedToUnderDelivery;
                            }
                            else
                            {
                                if (!ProSetting.StoreMinus)
                                {
                                    if (ActualItemStoreQuantity == 0)
                                        notavailbleItems = dtItemStoreQnt.Rows.OfType<DataRow>()
                                            .Where(dr => !Convert.ToBoolean(dr["QuantityAvailableStatus"]) && !Convert.ToBoolean(dr["Khadamy"]))
                                            .ToList();

                                    for (var index = 0; index < notavailbleItems.Count; index++)
                                    {

                                        notavailableItemsQnt.Rows.Add((index + 1),
                                            notavailbleItems[index]["Barcode"],
                                            notavailbleItems[index]["ItemName"],
                                            notavailbleItems[index]["UnitName"],
                                            notavailbleItems[index]["ComponentStoreQuantity"].ToDecimal().NormalizeDecimalPlaces(),
                                            notavailbleItems[index]["ComponentAssemblingQuantity"].ToDecimal().NormalizeDecimalPlaces());
                                    }

                                    if (notavailableItemsQnt.Rows.Count > 0)
                                    {
                                        if (new FrmMessageDialog(Tr.M1.m1100 + Environment.NewLine + Tr.M1.m0346,
                                                Tr.M1.error,
                                                this, DialogResult.Yes, DialogResult.No).ShowDialog() ==
                                            DialogResult.Yes)
                                        {
                                            var result = new FrmItemsNotFound(notavailableItemsQnt,
                                                    "كميات مكونات الصنف التي هي أقل من المطلوب لتجميع الصنف في الفاتورة")
                                                .ShowDialog();

                                            addedToUnderDelivery = result == DialogResult.OK;
                                        }
                                        itemNotEnounghQnt = !addedToUnderDelivery;
                                    }
                                }
                            }
                        }
                        catch (Exception exx)
                        {
                        }
                    }

                    if (itemNotFoundInStore || itemNotEnounghQnt)
                    {
                        try
                        {
                            try
                            {
                                var deletedItem = new KeyValuePair<int,int>(ItemIDbyBarcode.ToInt32(), StoreCombo.SelectedValue.ToInt32());
                                _dcItemComponents.Remove(deletedItem);
                            }
                            catch (Exception ex)
                            {
                            }

                            dataGridView1.NotifyCurrentCellDirty(false);
                            dataGridView1.EndEdit();
                            dataGridView1.NotifyCurrentCellDirty(true);
                            dataGridView1.Rows.Remove(dataGridView1.CurrentRow);
                            dataGridView1.NotifyCurrentCellDirty(false);


                            if (ProSetting.BarcodeOrItem == "كود الصنف")
                            {
                                dataGridView1.CurrentCell = dataGridView1.Rows[dataGridView1.RowCount - 1].Cells[1];
                                if (!ProSetting.Barcode)
                                    SendKeys.Send("{ENTER}");

                            }
                            else if (ProSetting.BarcodeOrItem == "اسم الصنف")
                            {
                                dataGridView1.CurrentCell = dataGridView1.Rows[dataGridView1.RowCount - 1].Cells[2];
                                dataGridView1.CurrentCell.Selected = true;
                                SendKeys.Send("{ENTER}");
                            }
                            else
                            {
                                var index = dataGridView1.CurrentRow.Index + 1 >= dataGridView1.RowCount
                                    ? dataGridView1.RowCount - 1
                                    : dataGridView1.CurrentRow.Index + 1;

                                var colIndex = index == dataGridView1.RowCount - 1
                                    ? _lastAddItemColumnIndex
                                    : dataGridView1.CurrentCell.ColumnIndex;

                                dataGridView1.CurrentCell = dataGridView1.Rows[index].Cells[colIndex];
                                dataGridView1.CurrentCell.Selected = true;

                            }
                            ItemIDbyBarcode = "";
                            ItemBarcode = "";
                            underDelev = false;
                            Qnt = 1;
                        }
                        catch
                        {
                        }
                        return;
                    }

                    try
                    {
                        var LargestAvailableQnt = dtItemStoreQnt.Rows.OfType<DataRow>()
                            .Where(dr => !Convert.ToBoolean(dr["Khadamy"])).Min(dr => Convert.ToDecimal(dr["ItemLargestAssembledQuantity"]));

                        updateBuyPriceOFCombinedItem =
                            Convert.ToBoolean(dtItemStoreQnt.Rows[0]["ModifyBuyprice"]);
                        var masnyea = Convert.ToDecimal(dtItemStoreQnt.Rows[0]["masnyea"]);
                        BuyPrice = updateBuyPriceOFCombinedItem && ActualItemStoreQuantity <= 0
                            ? dtItemStoreQnt.Select().Sum(dr => Convert.ToDecimal(dr["ComponentBuyPrice"]) * Convert.ToDecimal(dr["ComponentAssemblingQuantity"])) + masnyea
                            : Convert.ToDecimal(dtItemStoreQnt.Rows[0]["BuyPrice"].Stringify());

                        ActualItemStoreQuantity =
                            Convert.ToDecimal(dtItemStoreQnt.Rows[0]["ItemStoreQuantity"].Stringify());

                        availableQuantityOftheItem =
                            ((LargestAvailableQnt < 0 ? 0 : LargestAvailableQnt)
                            + (ActualItemStoreQuantity < 0 ? 0 : ActualItemStoreQuantity));
                    }
                    catch (Exception exx)
                    {
                        BuyPrice = availableQuantityOftheItem = 0;
                    }

                }
                else
                {
                    dtItemStoreQnt = Codes.Search2(
                        "SELECT dbo.Store.Price,Store.Quantity  as ItemStoreQuantity " +
                        "FROM dbo.Items INNER JOIN dbo.Store ON dbo.Items.ID = dbo.Store.ItemID " +
                        "where Items.ID = '" + ItemIDbyBarcode + "' " +
                        "and Store.StoreID = '" + StoreCombo.SelectedValue + "'");

                    if (dtItemStoreQnt.Rows.Count == 0)
                    {
                        MessageBox.Show(Tr.M1.m0256);

                        dataGridView1.NotifyCurrentCellDirty(false);
                        dataGridView1.EndEdit();
                        dataGridView1.NotifyCurrentCellDirty(true);
                        dataGridView1.Rows.Remove(dataGridView1.CurrentRow);
                        dataGridView1.NotifyCurrentCellDirty(false);


                        if (ProSetting.BarcodeOrItem == "كود الصنف")
                        {
                            dataGridView1.CurrentCell = dataGridView1.Rows[dataGridView1.RowCount - 1].Cells[1];
                            if (!ProSetting.Barcode)
                                SendKeys.Send("{ENTER}");

                        }
                        else if (ProSetting.BarcodeOrItem == "اسم الصنف")
                        {
                            dataGridView1.CurrentCell = dataGridView1.Rows[dataGridView1.RowCount - 1].Cells[2];
                            dataGridView1.CurrentCell.Selected = true;
                            SendKeys.Send("{ENTER}");
                        }
                        else
                        {
                            var index = dataGridView1.CurrentRow.Index + 1 >= dataGridView1.RowCount
                                   ? dataGridView1.RowCount - 1
                                   : dataGridView1.CurrentRow.Index + 1;

                            var colIndex = index == dataGridView1.RowCount - 1
                                ? _lastAddItemColumnIndex
                                : dataGridView1.CurrentCell.ColumnIndex;

                            dataGridView1.CurrentCell = dataGridView1.Rows[index].Cells[colIndex];
                            dataGridView1.CurrentCell.Selected = true;
                        }
                        ItemIDbyBarcode = "";
                        ItemBarcode = "";
                        underDelev = false;
                        Qnt = 1;
                        return;
                    }
                    //decimal Qty = 0;
                    try
                    {
                        BuyPrice = dtItemStoreQnt.Rows[0][0].ToDecimal().NormalizeDecimalPlaces(ProSetting.Round);
                        availableQuantityOftheItem =
                            dtItemStoreQnt.Rows[0]["ItemStoreQuantity"].ToDecimal();
                        ActualItemStoreQuantity = availableQuantityOftheItem;
                    }
                    catch (Exception exx)
                    {
                        BuyPrice = availableQuantityOftheItem = 0;
                    }
                }
            }
            //else
            //{
            //    dtItemComponent.Clear();
            //}

            if (dtItemComponent.Rows.Count == 0
                || !ProSetting.SkipQuantityAssemblingOfAnItem)
            {
                if (dt.Rows.Count > 0)
                {
                    decimal Mez = 0;
                    if (IfMezan.Rows.Count == 0)
                    {
                        Mez = Convert.ToDecimal(dt.Rows[0]["Quantity"]);
                    }
                    else
                    {
                        if (Convert.ToDecimal(dt.Rows[0]["Quantity"]) == 0)
                        {
                            if (ProSetting.StoreMinus || ProSetting.UniderDelevItem)
                            {
                                Mez = Qnt / 1000;
                            }
                            else
                            {
                                Mez = 0;
                            }
                        }
                        else
                        {
                            Mez = Qnt / 1000;
                        }
                    }

                    if (Mez > 0 || Convert.ToBoolean(dt.Rows[0]["Khadamy"]))
                    {
                        if (barcodeSearchType == 1)
                        {
                            ItemIDbyBarcode = dt.Rows[0][0].Stringify();
                            ItemBarcode = IfMezan.Rows.Count == 0
                                ? dataGridView1.CurrentRow.Cells[1].Value.Stringify()
                                : Barcode;
                        }
                        else
                        {
                            ItemIDbyBarcode = dt.Rows[0][0].Stringify();
                            ItemBarcode = dt.Rows[0][1].Stringify();
                        }
                    }
                    else
                    {
                        if (ProSetting.StoreMinus || ProSetting.UniderDelevItem)
                        {
                            if (barcodeSearchType == 1)
                            {
                                ItemIDbyBarcode = dt.Rows[0][0].Stringify();
                                ItemBarcode = IfMezan.Rows.Count == 0
                                    ? dataGridView1.CurrentRow.Cells[1].Value.Stringify()
                                    : Barcode;
                            }
                            else
                            {
                                ItemIDbyBarcode = dt.Rows[0][0].Stringify();
                                ItemBarcode = dt.Rows[0][1].Stringify();
                            }

                            var dtQtyStore =
                                Codes.Search2(
                                    @"SELECT     * FROM dbo.Items Join Store ON Store.ItemID=Items.Id  where Items.ID='" +
                                    ItemIDbyBarcode + "' and StoreID='" + StoreCombo.SelectedValue + "'");
                            if (dtQtyStore.Rows.Count == 0)
                            {
                                MessageBox.Show(Tr.M1.m0256);
                                try
                                {
                                    try
                                    {
                                        if (ProSetting.SkipQuantityAssemblingOfAnItem)
                                        {
                                            var currentitemID = dataGridView1.Rows[dataGridView1.CurrentRow.Index]
                                                .Cells["ItemID"].Value.ToInt32();
                                            var currentitemStoreID = dataGridView1.Rows[dataGridView1.CurrentRow.Index]
                                               .Cells["StoreID"].Value.ToInt32();
                                            var deletedItem = new KeyValuePair<int, int>(currentitemID, currentitemStoreID);

                                            _dcItemComponents.Remove(deletedItem);

                                        }
                                    }
                                    catch (Exception ex)
                                    {
                                    }

                                    dataGridView1.NotifyCurrentCellDirty(false);
                                    dataGridView1.EndEdit();
                                    dataGridView1.NotifyCurrentCellDirty(true);
                                    dataGridView1.Rows.Remove(dataGridView1.CurrentRow);
                                    dataGridView1.NotifyCurrentCellDirty(false);

                                    if (ProSetting.BarcodeOrItem == "كود الصنف")
                                    {
                                        dataGridView1.CurrentCell = dataGridView1.Rows[dataGridView1.RowCount - 1].Cells[1];
                                        if (!ProSetting.Barcode)
                                            SendKeys.Send("{ENTER}");

                                    }
                                    else if (ProSetting.BarcodeOrItem == "اسم الصنف")
                                    {
                                        dataGridView1.CurrentCell = dataGridView1.Rows[dataGridView1.RowCount - 1].Cells[2];
                                        dataGridView1.CurrentCell.Selected = true;
                                        SendKeys.Send("{ENTER}");
                                    }
                                    else
                                    {
                                        var index = dataGridView1.CurrentRow.Index + 1 >= dataGridView1.RowCount
                                            ? dataGridView1.RowCount - 1
                                            : dataGridView1.CurrentRow.Index + 1;

                                        var colIndex = index == dataGridView1.RowCount - 1
                                            ? _lastAddItemColumnIndex
                                            : dataGridView1.CurrentCell.ColumnIndex;

                                        dataGridView1.CurrentCell = dataGridView1.Rows[index].Cells[colIndex];
                                        dataGridView1.CurrentCell.Selected = true;
                                        SendKeys.Send("{ENTER}");
                                    }

                                    ItemIDbyBarcode = "";
                                    ItemBarcode = "";
                                    underDelev = false;
                                    Qnt = 1;
                                }
                                catch
                                {
                                }

                                return;

                            }
                        }
                        else
                        {
                            MessageBox.Show(Tr.M2.m825);
                            try
                            {
                                try
                                {
                                    if (ProSetting.SkipQuantityAssemblingOfAnItem)
                                    {
                                        var currentitemID = dataGridView1.Rows[dataGridView1.CurrentRow.Index]
                                                .Cells["ItemID"].Value.ToInt32();
                                        var currentitemStoreID = dataGridView1.Rows[dataGridView1.CurrentRow.Index]
                                           .Cells["StoreID"].Value.ToInt32();
                                        var deletedItem = new KeyValuePair<int, int>(currentitemID, currentitemStoreID);

                                        _dcItemComponents.Remove(deletedItem);
                                    }
                                }
                                catch (Exception ex)
                                {
                                }

                                dataGridView1.NotifyCurrentCellDirty(false);
                                dataGridView1.EndEdit();
                                dataGridView1.NotifyCurrentCellDirty(true);
                                dataGridView1.Rows.Remove(dataGridView1.CurrentRow);
                                dataGridView1.NotifyCurrentCellDirty(false);

                                if (ProSetting.BarcodeOrItem == "كود الصنف")
                                {
                                    dataGridView1.CurrentCell = dataGridView1.Rows[dataGridView1.RowCount - 1].Cells[1];
                                    SendKeys.Send("{ENTER}");
                                }
                                else if (ProSetting.BarcodeOrItem == "اسم الصنف")
                                {
                                    dataGridView1.CurrentCell = dataGridView1.Rows[dataGridView1.RowCount - 1].Cells[2];
                                    dataGridView1.CurrentCell.Selected = true;
                                    SendKeys.Send("{ENTER}");
                                }
                                else
                                {
                                    var index = dataGridView1.CurrentRow.Index + 1 >= dataGridView1.RowCount
                                        ? dataGridView1.RowCount - 1
                                        : dataGridView1.CurrentRow.Index + 1;

                                    var colIndex = index == dataGridView1.RowCount - 1
                                        ? _lastAddItemColumnIndex
                                        : dataGridView1.CurrentCell.ColumnIndex;

                                    dataGridView1.CurrentCell = dataGridView1.Rows[index].Cells[colIndex];
                                    dataGridView1.CurrentCell.Selected = true;
                                    SendKeys.Send("{ENTER}");
                                }

                                ItemIDbyBarcode = "";
                                ItemBarcode = "";
                                underDelev = false;
                                Qnt = 1;
                            }
                            catch
                            {
                            }

                            return;

                        }
                    }
                }
                else
                {
                    var itB = Codes.Search2("Select * from ItemsUnit " +
                                            "where Barcode ='" + Barcode + "' Order By ID").Rows.Count;
                    var itB2 = Codes.Search2("Select * from ItemBarcode " +
                                             "where Barcode ='" + Barcode + "'").Rows.Count;

                    if (itB == 0 && itB2 == 0)
                    {

                        MessageBox.Show(Tr.M1.m0478);
                    }
                    else
                    {
                        var dtQtyStore = Codes.Search2("SELECT * FROM dbo.Items Join Store " +
                                                       "ON Store.ItemID=Items.Id  " +
                                                       "where Items.ID='" + ItemIDbyBarcode + "' " +
                                                       "and StoreID='" + StoreCombo.SelectedValue + "'");
                        if (dtQtyStore.Rows.Count == 0)
                        {
                            MessageBox.Show(Tr.M1.m0256);
                        }
                        else
                            MessageBox.Show(Tr.M2.m821);
                    }

                    try
                    {
                        try
                        {
                            if (ProSetting.SkipQuantityAssemblingOfAnItem)
                            {
                                var currentitemID = dataGridView1.Rows[dataGridView1.CurrentRow.Index]
                                                .Cells["ItemID"].Value.ToInt32();
                                var currentitemStoreID = dataGridView1.Rows[dataGridView1.CurrentRow.Index]
                                   .Cells["StoreID"].Value.ToInt32();
                                var deletedItem = new KeyValuePair<int, int>(currentitemID, currentitemStoreID);

                                _dcItemComponents.Remove(deletedItem);
                            }
                        }
                        catch (Exception ex)
                        {
                        }
                        dataGridView1.NotifyCurrentCellDirty(false);
                        dataGridView1.EndEdit();
                        dataGridView1.NotifyCurrentCellDirty(true);
                        dataGridView1.Rows.Remove(dataGridView1.CurrentRow);
                        dataGridView1.NotifyCurrentCellDirty(false);


                        if (ProSetting.BarcodeOrItem == "كود الصنف")
                        {
                            dataGridView1.CurrentCell = dataGridView1.Rows[dataGridView1.RowCount - 1].Cells[1];
                            SendKeys.Send("{ENTER}");

                        }
                        else if (ProSetting.BarcodeOrItem == "اسم الصنف")
                        {
                            dataGridView1.CurrentCell = dataGridView1.Rows[dataGridView1.RowCount - 1].Cells[2];
                            dataGridView1.CurrentCell.Selected = true;
                            SendKeys.Send("{ENTER}");
                        }
                        else
                        {
                            var index = dataGridView1.CurrentRow.Index + 1 >= dataGridView1.RowCount
                                    ? dataGridView1.RowCount - 1
                                    : dataGridView1.CurrentRow.Index + 1;

                            var colIndex = index == dataGridView1.RowCount - 1
                                ? _lastAddItemColumnIndex
                                : dataGridView1.CurrentCell.ColumnIndex;

                            dataGridView1.CurrentCell = dataGridView1.Rows[index].Cells[colIndex];
                            dataGridView1.CurrentCell.Selected = true;
                            SendKeys.Send("{ENTER}");
                        }

                        ItemIDbyBarcode = "";
                        ItemBarcode = "";
                        underDelev = false;
                        Qnt = 1;
                    }
                    catch
                    {
                    }

                    return;
                }


                if (dtItemComponent.Rows.Count > 0)
                {
                    dtItemStoreQnt = Codes.Search2(
                        @"WITH ItemComponentsCTE AS (
SELECT  Row_Number() Over (Order by ItemsUnit.ItemId,ItemsUnit.ID) as Rn ,
ItemsUnit.ItemID,
ItemsUnit.Barcode,
(Select Name From Items Where ID =ItemsUnit.ItemID) as ItemName,
(Select Name From Units Where ID =ItemsUnit.UnitId) as UnitName,
Isnull((Select Price From Store Where ItemID =ParentITemID and StoreId =  '" + StoreCombo.SelectedValue +
                        @"'),0) as BuyPrice,
 ItemsUnit.ItMain as ComponentItMain,
(
(Case When ItemsUnit.ItMain = 1 
Then Isnull(dbo.Store.Price,0) Else ItemsUnit.BuyPrice END )
" + (!ProSetting.salesByList ? "" : @"
* (1 - ((Select case when Isnull(IsInDiscountList,0) = 0 then 0 
else isnull(discountincoming,0) end from Items Where ID = ItemsUnit.ItemID)/100))
") + @"
)
as ComponentBuyPrice,
Cast((Isnull(dbo.Store.Quantity,0)/ItemsUnit.ItMain) as money) as OriginalComponentStoreQuantity ,
Cast(Qnt as money) as ComponentAssemblingQuantity,
FLOOR(ISNULL(Quantity,0)/(Qnt * ItMain)) as ItemLargestAssembledQuantity,
Isnull((Select Quantity From Store Where ItemID = ParentItemID and StoreId =   '" + StoreCombo.SelectedValue +
                        @"'),0) as ItemStoreQuantity,
Case When Sum(Qnt * ItMain) over (partition by ItemsUnit.ItemID) > Quantity then 0 else 1 end as QuantityAvailableStatus,
Isnull(ModifyBuyprice,1) as ModifyBuyprice ,
Isnull(masnyea,0) as masnyea,
(Select Count(*) From Store Where ItemID =ParentITemID and StoreId =  '" + StoreCombo.SelectedValue + @"') as AddedToStore,
(Select Khadamy From Items Where ID =ItemsUnit.ItemID) as Khadamy
FROM dbo.ItemsColleting 
LEFT JOIN ItemsUnit 
ON ItemsColleting.ChildItemUnitID = ItemsUnit.Id 
LEFT Join dbo.Store 
ON dbo.ItemsUnit.ItemID = dbo.Store.ItemID  and Store.StoreID = '" + StoreCombo.SelectedValue + @"'
where ParentITemID = '" + ItemIDbyBarcode + @"'

),
ValidItemComponentsCTE AS (
    SELECT
        Rn,
        ItemID,
		Barcode,
		ItemName,
		UnitName,
        BuyPrice,
        ComponentBuyPrice,	
       (OriginalComponentStoreQuantity* ComponentItMain -
            (SELECT SUM(ComponentAssemblingQuantity)
             FROM ItemComponentsCTE AS innerCTE
             WHERE innerCTE.ItemID = outerCTE.ItemID
               AND innerCTE.Rn <= outerCTE.Rn) 
            + ComponentAssemblingQuantity)/ ComponentItMain AS ComponentStoreQuantity,
        ComponentAssemblingQuantity,
        ItemLargestAssembledQuantity,
		ItemStoreQuantity,
        ModifyBuyprice,
        masnyea,
		AddedToStore,
        Khadamy
    FROM ItemComponentsCTE AS outerCTE
)
SELECT
    ItemID,
	Barcode,
	ItemName,
	UnitName,
	BuyPrice,
	ComponentBuyPrice,
	ComponentStoreQuantity,
	ComponentAssemblingQuantity,
	CASE 
        WHEN ComponentStoreQuantity < ComponentAssemblingQuantity THEN 0
        ELSE ItemLargestAssembledQuantity end
    ItemLargestAssembledQuantity,
	ItemStoreQuantity,
    CASE 
        WHEN ComponentStoreQuantity < ComponentAssemblingQuantity THEN 0
        ELSE 1
    END AS QuantityAvailableStatus,
    ModifyBuyprice,
	masnyea,
	AddedToStore,
	Khadamy
FROM ValidItemComponentsCTE
ORDER BY Rn;");
                }
                else
                    dtItemStoreQnt = Codes.Search2("SELECT dbo.Store.Price,Store.Quantity  as ItemStoreQuantity " +
                                               "FROM dbo.Items INNER JOIN dbo.Store ON dbo.Items.ID = dbo.Store.ItemID " +
                                               "where Items.ID = '" + ItemIDbyBarcode + "' " +
                                               "and Store.StoreID = '" + StoreCombo.SelectedValue + "'");
            }

            if (dataGridView1.CurrentRow.Cells["ItemColor"].Value.ToText() == "")
            {
                var cIndex = dataGridView1.CurrentRow.Index + 1;

                ItemColor = AutomaticColorTextInSales ? cIndex.Stringify() : "";
            }
            else
            {
                ItemColor = dataGridView1.CurrentRow.Cells["ItemColor"].Value.ToText();
            }

            decimal Qty = 0, QtyStore = 0;

            QtyStore = !ProSetting.SkipQuantityAssemblingOfAnItem
                ? dtItemStoreQnt.Rows[0]["ItemStoreQuantity"].ToDecimal().NormalizeDecimalPlaces()
                : availableQuantityOftheItem;

            var dtItMain = Codes.Search2("Select ItMain From ItemsUnit Where Barcode='" + ItemBarcode +
                                         "' order by ID");
            var ItemByBarcodeItMain =
                dtItMain.Rows.Count > 0 ? Convert.ToDecimal(dtItMain.Rows[0][0].Stringify()) : 1;

            if (IfMezan.Rows.Count > 0)
            {
                mezanQnt = Qnt = (Qnt / 1000).NormalizeDecimalPlaces();

                Qty = Qnt;
            }
            else
            {
                if ((QtyStore / ItemByBarcodeItMain) < 1 && QtyStore > 0)
                {
                    Qnt = (QtyStore / ItemByBarcodeItMain).NormalizeDecimalPlaces();
                    Qty = (QtyStore / ItemByBarcodeItMain).NormalizeDecimalPlaces();
                }
                else
                {
                    Qnt = 1;
                    Qty = 1;
                }

                if (ProSetting.StoreMinus || ProSetting.UniderDelevItem)
                {
                    Qnt = 1;
                    Qty = 1;
                }
            }


            decimal q = 0;
            decimal q2 = 0;
            decimal quanbyBarc = 0;

            for (int i = 1; i < dataGridView1.Rows.Count; i++)
            {
                var quantitynotEnough = false;
                var sameitem = false;
                var itemID = dataGridView1.Rows[i - 1].Cells["ItemID"].Value.ToInt32();
                if (itemID == 0 && i > 1)
                    itemID = ItemIDbyBarcode.ToInt32();

                var storeId = dataGridView1.Rows[i - 1].Cells["StoreID"].Value.ToInt32();
                if (storeId == 0 && i > 1)
                    storeId = StoreCombo.SelectedValue.ToInt32();
                if (itemID != 0 && storeId != 0)
                {
                    if(dataGridView1.Rows[i - 1].Cells["ItemID"].Value.ToInt32() == ItemIDbyBarcode.ToInt32()
                        && dataGridView1.Rows[i - 1].Cells["StoreID"].Value.ToInt32() == StoreCombo.SelectedValue.ToInt32())
                    {
                        q += dataGridView1.Rows[i - 1].Cells["Quantity"].Value.ToDecimal();

                        q2 += dataGridView1.Rows[i - 1].Cells["Quantity"].Value.ToDecimal()
                              * dataGridView1.Rows[i - 1].Cells["mainIt"].Value.ToDecimal();
                        var sameColor = AutomaticColorTextInSales
                            ? dataGridView1.Rows[i - 1].Cells["ItemColor"].Value.ToInt32() == ItemColor.ToInt32()
                            : dataGridView1.Rows[i - 1].Cells["ItemColor"].Value.ToText() == ItemColor;
                        if (sameColor
                            && dataGridView1.Rows[i - 1].Cells["Barcode"].Value.ToText() == ItemBarcode)
                        {
                            quanbyBarc += Convert.ToDecimal(dataGridView1.Rows[i - 1].Cells["Quantity"].Value
                                .Stringify());
                        }

                        if (!Convert.ToBoolean(Codes.Search2("select Khadamy from Items " +
                                                             "where ID = '" + ItemIDbyBarcode + "' " +
                                                             "and Items.Active = 1").Rows[0][0].Stringify()))
                        {

                            if (sameColor
                                && dataGridView1.Rows[i - 1].Cells["Barcode"].Value.Stringify() == ItemBarcode
                                && dataGridView1.CurrentRow.Index != i - 1)
                            {
                                if (ProSetting.AltersameItemininvoice)
                                    MessageBox.Show(Tr.M1.m0260);
                                Qty = (dataGridView1.Rows[i - 1].Cells["ItemColor"].Value.ToText() != "")
                                    ? 0
                                    : Qty;
                                var itemQnt = (e.RowIndex > i - 1 ? quanbyBarc + Qty : quanbyBarc);
                                dataGridView1.Rows[i - 1].Cells["Quantity"].Value = itemQnt.NormalizeDecimalPlaces().Stringify();

                                sameitem = true;
                            }
                        }
                        else
                        {
                            if (sameColor
                                && dataGridView1.Rows[i - 1].Cells["Barcode"].Value.ToText() == ItemBarcode
                                && dataGridView1.CurrentRow.Index != i - 1)
                            {
                                if (ProSetting.AltersameItemininvoice)
                                    MessageBox.Show(Tr.M1.m0260);
                                var validQnt = (e.RowIndex > i - 1 ? quanbyBarc + Qty : quanbyBarc);
                                dataGridView1.Rows[i - 1].Cells["Quantity"].Value = validQnt.NormalizeDecimalPlaces().Stringify();
                                sameitem = true;
                            }
                        }

                        if (sameitem || quantitynotEnough)
                        {
                            try
                            {
                                if (ProSetting.SkipQuantityAssemblingOfAnItem)
                                {
                                    var currentitemID = dataGridView1.Rows[dataGridView1.CurrentRow.Index]
                                                .Cells["ItemID"].Value.ToInt32();
                                    var currentitemStoreID = dataGridView1.Rows[dataGridView1.CurrentRow.Index]
                                       .Cells["StoreID"].Value.ToInt32();
                                    var deletedItem = new KeyValuePair<int, int>(currentitemID, currentitemStoreID);

                                    _dcItemComponents.Remove(deletedItem);
                                }
                            }
                            catch (Exception ex)
                            {
                            }

                            dataGridView1.NotifyCurrentCellDirty(false);
                            dataGridView1.EndEdit();
                            dataGridView1.NotifyCurrentCellDirty(true);

                            try
                            {
                                dataGridView1.Rows.Remove(dataGridView1.CurrentRow);
                            }
                            catch (Exception exc)
                            {
                            }
                            dataGridView1.NotifyCurrentCellDirty(false);

                            if (ProSetting.BarcodeOrItem == "كود الصنف")
                            {
                                dataGridView1.CurrentCell = dataGridView1.Rows[dataGridView1.RowCount - 1].Cells[1];
                                if (ProSetting.OnQuantity)
                                    SendKeys.Send("{ENTER}");

                            }
                            else if (ProSetting.BarcodeOrItem == "اسم الصنف")
                            {
                                dataGridView1.CurrentCell = dataGridView1.Rows[dataGridView1.RowCount - 1].Cells[2];
                                dataGridView1.CurrentCell.Selected = true;
                                SendKeys.Send("{ENTER}");
                            }
                            else
                            {
                                var index = dataGridView1.CurrentRow.Index + 1 >= dataGridView1.RowCount
                                   ? dataGridView1.RowCount - 1
                                   : dataGridView1.CurrentRow.Index + 1;

                                var colIndex = index == dataGridView1.RowCount - 1
                                    ? _lastAddItemColumnIndex
                                    : dataGridView1.CurrentCell.ColumnIndex;

                                dataGridView1.CurrentCell = dataGridView1.Rows[index].Cells[colIndex];
                                dataGridView1.CurrentCell.Selected = true;

                                SendKeys.Send("{ENTER}");
                            }

                            ItemIDbyBarcode = "";
                            ItemBarcode = "";
                            underDelev = false;
                            Qnt = 1;
                            return;
                        }
                    }

                    //}                            
                }


                try
                {
                    HandleCellValueChanged();
                    if (dataGridView1.CurrentRow.Cells["Barcode"].Value.Stringify() != ItemBarcode)
                    {
                        dataGridView1.NotifyCurrentCellDirty(true);
                    }
                    dataGridView1.CurrentRow.Cells[1].Value = ItemBarcode;

                    dataGridView1.CurrentRow.Cells[2].Value = null;
                    dataGridView1.CurrentRow.Cells["AdditionValue"].Value = 0;

                    if (addedToUnderDelivery)
                        dataGridView1.CurrentRow.Cells["UnderDelevItem"].Value = true;
                }
                catch (Exception exception)
                {
                }
                finally
                {
                    ReleaseCellValueChanged();
                }
            }
            var rowCount = dataGridView1.RowCount;
            dataGridView1.CurrentRow.Cells[2].Value = dt.Rows[0]["Name"].Stringify();

            if (ProSetting.OnQuantity)
            {
                try
                {
                    // SendKeys.Send("{ENTER}");
                    //dataGridView1.Rows[dataGridView1.Rows.Count - 2].Cells["Quantity"].Selected = true;
                    //SendKeys.Send("{ENTER}");
                    //dataGridView1.BeginEdit(true);
                }
                catch
                {
                }

                newRowbyBarcode = itemAdded = rowCount == dataGridView1.RowCount;
            }
            else
            {
                if (ProSetting.BarcodeOrItem == "كود الصنف")
                {
                    if (dataGridView1.IsCurrentCellDirty)
                        dataGridView1.NotifyCurrentCellDirty(false);
                    dataGridView1.CurrentCell = dataGridView1.Rows[dataGridView1.RowCount - 1].Cells[1];
                    //  SendKeys.Send("{ENTER}");

                }
                else if (ProSetting.BarcodeOrItem == "اسم الصنف")
                {
                    if (dataGridView1.IsCurrentCellDirty)
                        dataGridView1.NotifyCurrentCellDirty(false);
                    dataGridView1.CurrentCell = dataGridView1.Rows[dataGridView1.RowCount - 1].Cells[2];
                    dataGridView1.CurrentCell.Selected = true;
                    SendKeys.Send("{ENTER}");
                }
                else
                {
                    var index = dataGridView1.CurrentRow.Index + 1 >= dataGridView1.RowCount
                                    ? dataGridView1.RowCount - 1
                                    : dataGridView1.CurrentRow.Index + 1;

                    var colIndex = index == dataGridView1.RowCount - 1
                        ? _lastAddItemColumnIndex
                        : dataGridView1.CurrentCell.ColumnIndex;

                    if (dataGridView1.IsCurrentCellDirty)
                        dataGridView1.NotifyCurrentCellDirty(false);

                    dataGridView1.CurrentCell = dataGridView1.Rows[index].Cells[colIndex];
                    dataGridView1.CurrentCell.Selected = true;
                    SendKeys.Send("{ENTER}");
                }
            }

        }


        private void ItemNameCellValueChanged(DataGridViewCellEventArgs e)
        {

            bool name = false;
            int currentRowIndex = dataGridView1.CurrentRow.Index;
            decimal Quantity = 0;
            StoreQty = 0;

            DataTable dtData = new DataTable();
            bool updateBuyPriceOFCombinedItem = false;
            var addedToUnderDelivery = false;

            if (ItemBarcode == "")
            {
                name = true;
                IfMezan = new DataTable();
                try
                {
                    if (dataGridView1.Rows[e.RowIndex].Cells["Barcode"].Value != null
                        && dataGridView1.Rows[e.RowIndex].Cells["Barcode"].Value != "")
                    {
                        var dtItemName = Codes.Search2(@"Select Name from ItemsUnit Join Items on ItemsUnit.ItemID=Items.Id 
 Where Itemsunit.Barcode='" + dataGridView1.Rows[e.RowIndex].Cells["Barcode"].Value + "' Order By ItemsUnit.ID");
                        bool barcodeSearchByItemsUnitTable = true;
                        if (dtItemName.Rows.Count == 0)
                        {
                            barcodeSearchByItemsUnitTable = false;
                            dtItemName = Codes.Search2(@"Select Distinct Items.Name,ItemsUnit.Barcode from ItemsUnit Join Items on ItemsUnit.ItemID=Items.Id 
Join dbo.ItemBarcode ON dbo.ItemsUnit.ItemID = dbo.ItemBarcode.ItemID Where ItemBarcode.Barcode='" + dataGridView1.Rows[e.RowIndex].Cells["Barcode"].Value + "' or Items.Barcode='" + dataGridView1.Rows[e.RowIndex].Cells["Barcode"].Value + "'");
                        }
                        var itemNamebyBarcode = dtItemName.Rows[0][0].Stringify();
                        if (dataGridView1.CurrentRow.Cells[e.ColumnIndex].Value.Stringify() == itemNamebyBarcode)
                        {
                            ItemBarcode = barcodeSearchByItemsUnitTable ? dataGridView1.Rows[e.RowIndex].Cells["Barcode"].Value.Stringify() : dtItemName.Rows[0][1].Stringify();
                            DataTable dtItems = Codes.Search2("select Distinct ItemID from ItemsUnit where Barcode ='" + ItemBarcode + "'");
                            ItemIDbyBarcode = dtItems.Rows[0][0].Stringify();
                        }
                    }
                }
                catch
                {
                }
                if (ItemBarcode == "")
                {
                    try
                    {
                        DataTable dtItems = Codes.Search2("select ID,Barcode from Items where Name ='" + dataGridView1.CurrentRow.Cells[2].Value.Stringify() + "'");
                        ItemIDbyBarcode = dtItems.Rows[0][0].Stringify();
                        ItemBarcode = dtItems.Rows[0][1].Stringify();
                    }
                    catch
                    {
                    }
                }

                if (string.IsNullOrEmpty(ItemBarcode))
                {
                    MessageBox.Show(Tr.M2.m801 + Environment.NewLine + Tr.M2.m802);

                    try
                    {
                        HandleCellValueChanged();

                        dataGridView1.CurrentCell.Value = null;
                    }
                    catch (Exception ex)
                    {
                    }
                    finally
                    {
                        ReleaseCellValueChanged();

                    }
                    itemBarcodeIsNull = true;
                    return;

                }
                dtItemComponent =
                       Codes.Search2("select ItemsColleting.* , ItemsUnit.ItemID, Items.Barcode, Items.Name as ItemName , (Select Name From Units Where ID =ItemsUnit.UnitId) as UnitName from ItemsColleting Join ItemsUnit on ItemsColleting.ChildItemUnitID = ItemsUnit.Id Join Items On ItemsUnit.ItemID= Items.ID where ParentItemID='" + ItemIDbyBarcode + "'");

                if (ProSetting.SkipQuantityAssemblingOfAnItem)
                {
                    if (dtItemComponent.Rows.Count > 0)
                    {
                        dtItemStoreQnt = Codes.Search2(
                            @"WITH ItemComponentsCTE AS (
SELECT  Row_Number() Over (Order by ItemsUnit.ItemId,ItemsUnit.ID) as Rn ,
ItemsUnit.ItemID,
ItemsUnit.Barcode,
(Select Name From Items Where ID =ItemsUnit.ItemID) as ItemName,
(Select Name From Units Where ID =ItemsUnit.UnitId) as UnitName,
Isnull((Select Price From Store Where ItemID =ParentITemID and StoreId =  '" + StoreCombo.SelectedValue +
                        @"'),0) as BuyPrice,
 ItemsUnit.ItMain as ComponentItMain,
(
(Case When ItemsUnit.ItMain = 1 
Then Isnull(dbo.Store.Price,0) Else ItemsUnit.BuyPrice END )
" + (!ProSetting.salesByList ? "" : @"
* (1 - ((Select case when Isnull(IsInDiscountList,0) = 0 then 0 
else isnull(discountincoming,0) end from Items Where ID = ItemsUnit.ItemID)/100))
") + @"
)
as ComponentBuyPrice,
Cast((Isnull(dbo.Store.Quantity,0)/ItemsUnit.ItMain) as money) as OriginalComponentStoreQuantity ,
Cast(Qnt as money) as ComponentAssemblingQuantity,
FLOOR(ISNULL(Quantity,0)/(Qnt * ItMain)) as ItemLargestAssembledQuantity,
Isnull((Select Quantity From Store Where ItemID = ParentItemID and StoreId =   '" + StoreCombo.SelectedValue +
                        @"'),0) as ItemStoreQuantity,
Case When Sum(Qnt * ItMain) over (partition by ItemsUnit.ItemID) > Quantity then 0 else 1 end as QuantityAvailableStatus,
Isnull(ModifyBuyprice,1) as ModifyBuyprice ,
Isnull(masnyea,0) as masnyea,
(Select Count(*) From Store Where ItemID =ParentITemID and StoreId =  '" + StoreCombo.SelectedValue + @"') as AddedToStore,
(Select Khadamy From Items Where ID =ItemsUnit.ItemID) as Khadamy
FROM dbo.ItemsColleting 
LEFT JOIN ItemsUnit 
ON ItemsColleting.ChildItemUnitID = ItemsUnit.Id 
LEFT Join dbo.Store 
ON dbo.ItemsUnit.ItemID = dbo.Store.ItemID  and Store.StoreID = '" + StoreCombo.SelectedValue + @"'
where ParentITemID = '" + ItemIDbyBarcode + @"'
),
ValidItemComponentsCTE AS (
    SELECT
        Rn,
        ItemID,
		Barcode,
		ItemName,
		UnitName,
        BuyPrice,
        ComponentBuyPrice,	
        (OriginalComponentStoreQuantity* ComponentItMain -
            (SELECT SUM(ComponentAssemblingQuantity)
             FROM ItemComponentsCTE AS innerCTE
             WHERE innerCTE.ItemID = outerCTE.ItemID
               AND innerCTE.Rn <= outerCTE.Rn) 
            + ComponentAssemblingQuantity)/ ComponentItMain AS ComponentStoreQuantity,
        ComponentAssemblingQuantity,
        ItemLargestAssembledQuantity,
		ItemStoreQuantity,
        ModifyBuyprice,
        masnyea,
		AddedToStore,
        Khadamy
    FROM ItemComponentsCTE AS outerCTE
)
SELECT
    ItemID,
	Barcode,
	ItemName,
	UnitName,
	BuyPrice,
	ComponentBuyPrice,
	ComponentStoreQuantity,
	ComponentAssemblingQuantity,
	CASE 
        WHEN ComponentStoreQuantity < ComponentAssemblingQuantity THEN 0
        ELSE ItemLargestAssembledQuantity end
    ItemLargestAssembledQuantity,
	ItemStoreQuantity,
    CASE 
        WHEN ComponentStoreQuantity < ComponentAssemblingQuantity THEN 0
        ELSE 1
    END AS QuantityAvailableStatus,
    ModifyBuyprice,
	masnyea,
	AddedToStore,
	Khadamy
FROM ValidItemComponentsCTE
ORDER BY Rn;");

                        try
                        {
                            ActualItemStoreQuantity =
                               Convert.ToDecimal(dtItemStoreQnt.Rows[0]["ItemStoreQuantity"].Stringify());
                        }
                        catch (Exception exc)
                        {
                        }

                        var itemNotFoundInStore = dtItemStoreQnt.Rows.Count == 0 ||
                                                  Convert.ToInt32(dtItemStoreQnt.Rows[0]["AddedToStore"]
                                                      .Stringify()) == 0;

                        var itemNotEnounghQnt = false;
                        if (itemNotFoundInStore)
                        {
                            MessageBox.Show(Tr.M1.m0256);
                        }
                        else
                        {
                            try
                            {
                                var notavailbleItems = new List<DataRow>();

                                if (dtItemStoreQnt.Rows.Count < dtItemComponent.Rows.Count &&
                                    ActualItemStoreQuantity == 0)
                                {
                                    notavailbleItems = dtItemComponent.Rows
                                        .OfType<DataRow>()
                                        .Where(dr =>
                                            dtItemStoreQnt.Select("ItemID =" + dr["ItemID"]).Length == 0)
                                        .ToList();
                                }

                                var notavailableItemsQnt = new DataTable();
                                notavailableItemsQnt.Columns.Add("م", typeof(int));
                                notavailableItemsQnt.Columns.Add("الباركود");
                                notavailableItemsQnt.Columns.Add(Tr.M2.item_name);
                                notavailableItemsQnt.Columns.Add("الوحدة");
                                if (dtItemStoreQnt.Rows.Count == dtItemComponent.Rows.Count)
                                {
                                    notavailableItemsQnt.Columns.Add("الكمية المتاحة", typeof(decimal));
                                    notavailableItemsQnt.Columns.Add("الكمية المطلوبة", typeof(decimal));
                                }

                                if (notavailbleItems.Count > 0)
                                {
                                    for (var index = 0; index < notavailbleItems.Count; index++)
                                    {
                                        notavailableItemsQnt.Rows.Add((index + 1),
                                            notavailbleItems[index]["Barcode"],
                                            notavailbleItems[index]["ItemName"],
                                            notavailbleItems[index]["UnitName"]);
                                    }

                                    if (new FrmMessageDialog(Tr.M1.m1098 + StoreCombo.Text + Tr.M1.m1099, Tr.M1.error, this, DialogResult.Yes, DialogResult.No).ShowDialog() == DialogResult.Yes)
                                    {
                                        var result = new FrmItemsNotFound(notavailableItemsQnt,
                                                "مكونات الصنف الغير موجوده بالمخزن المُباع منه")
                                            .ShowDialog();
                                        addedToUnderDelivery = result == DialogResult.OK;
                                    }
                                    itemNotEnounghQnt = !addedToUnderDelivery;
                                }
                                else
                                {
                                    if (!ProSetting.StoreMinus)
                                    {
                                        if (ActualItemStoreQuantity == 0)
                                            notavailbleItems = dtItemStoreQnt.Rows.OfType<DataRow>()
                                                .Where(dr => !Convert.ToBoolean(dr["QuantityAvailableStatus"]) && !Convert.ToBoolean(dr["Khadamy"]))
                                                .ToList();

                                        for (var index = 0; index < notavailbleItems.Count; index++)
                                        {

                                            notavailableItemsQnt.Rows.Add((index + 1),
                                                notavailbleItems[index]["Barcode"],
                                                notavailbleItems[index]["ItemName"],
                                                notavailbleItems[index]["UnitName"],
                                                notavailbleItems[index]["ComponentStoreQuantity"].ToDecimal().NormalizeDecimalPlaces(),
                                                notavailbleItems[index]["ComponentAssemblingQuantity"].ToDecimal().NormalizeDecimalPlaces());
                                        }

                                        if (notavailableItemsQnt.Rows.Count > 0)
                                        {
                                            if (new FrmMessageDialog(
                                                    "عذراً , الكمية المتاحه لبعض مكونات هذا الصنف أقل من المطلوب  لتجميعه " + Environment.NewLine + @" هل تريد عرض التفاصيل ؟",
                                                    Tr.M1.error,
                                                    this, DialogResult.Yes, DialogResult.No).ShowDialog() ==
                                                DialogResult.Yes)
                                            {
                                                var result = new FrmItemsNotFound(notavailableItemsQnt,
                                                        "كميات مكونات الصنف التي هي أقل من المطلوب لتجميع الصنف في الفاتورة")
                                                    .ShowDialog();

                                                addedToUnderDelivery = result == DialogResult.OK;
                                            }
                                            itemNotEnounghQnt = !addedToUnderDelivery;
                                        }
                                    }
                                }
                            }
                            catch (Exception exx)
                            {
                            }
                        }

                        if (itemNotFoundInStore || itemNotEnounghQnt)
                        {
                            try
                            {
                                try
                                {
                                    var deletedItem = new KeyValuePair<int, int>(ItemIDbyBarcode.ToInt32(), StoreCombo.SelectedValue.ToInt32());
                                    _dcItemComponents.Remove(deletedItem);
                                }
                                catch (Exception ex)
                                {
                                }

                                dataGridView1.NotifyCurrentCellDirty(false);
                                dataGridView1.EndEdit();
                                dataGridView1.NotifyCurrentCellDirty(true);

                                try
                                {
                                    dataGridView1.Rows.Remove(dataGridView1.CurrentRow);
                                }
                                catch (Exception exc)
                                {
                                }
                                dataGridView1.NotifyCurrentCellDirty(false);

                                if (ProSetting.BarcodeOrItem == "كود الصنف")
                                {
                                    dataGridView1.CurrentCell = dataGridView1.Rows[dataGridView1.RowCount - 1].Cells[1];
                                    if (ProSetting.OnQuantity)
                                        SendKeys.Send("{ENTER}");
                                }
                                else if (ProSetting.BarcodeOrItem == "اسم الصنف")
                                {
                                    dataGridView1.CurrentCell = dataGridView1.Rows[dataGridView1.RowCount - 1].Cells[2];
                                    dataGridView1.CurrentCell.Selected = true;
                                    if (ProSetting.OnQuantity)
                                        SendKeys.Send("{ENTER}");
                                }
                                else
                                {
                                    var index = dataGridView1.CurrentRow.Index + 1 >= dataGridView1.RowCount
                                        ? dataGridView1.RowCount - 1
                                        : dataGridView1.CurrentRow.Index + 1;

                                    var colIndex = index == dataGridView1.RowCount - 1
                                        ? _lastAddItemColumnIndex
                                        : dataGridView1.CurrentCell.ColumnIndex;

                                    dataGridView1.CurrentCell = dataGridView1.Rows[index].Cells[colIndex];
                                    dataGridView1.CurrentCell.Selected = true;

                                    if (ProSetting.OnQuantity)
                                        SendKeys.Send("{ENTER}");
                                }

                                ItemIDbyBarcode = "";
                                ItemBarcode = "";
                                underDelev = false;
                                Qnt = 1;
                            }
                            catch (Exception ex)
                            {
                            }
                            return;
                        }

                        try
                        {
                            ActualItemStoreQuantity = Convert.ToDecimal(dtItemStoreQnt.Rows[0]["ItemStoreQuantity"].Stringify());

                            var LargestAvailableQnt = dtItemStoreQnt.Rows.OfType<DataRow>()
                                .Where(dr => !Convert.ToBoolean(dr["Khadamy"])).Min(dr => Convert.ToDecimal(dr["ItemLargestAssembledQuantity"]));

                            updateBuyPriceOFCombinedItem =
                                Convert.ToBoolean(dtItemStoreQnt.Rows[0]["ModifyBuyprice"]);
                            var masnyea = Convert.ToDecimal(dtItemStoreQnt.Rows[0]["masnyea"]);
                            BuyPrice = updateBuyPriceOFCombinedItem && ActualItemStoreQuantity <= 0
                                ? dtItemStoreQnt.Select().Sum(dr => Convert.ToDecimal(dr["ComponentBuyPrice"]) * Convert.ToDecimal(dr["ComponentAssemblingQuantity"])) + masnyea
                                : Convert.ToDecimal(dtItemStoreQnt.Rows[0]["BuyPrice"].Stringify());

                            availableQuantityOftheItem =
                                ((LargestAvailableQnt < 0 ? 0 : LargestAvailableQnt) + ActualItemStoreQuantity);
                        }
                        catch (Exception exx)
                        {
                            BuyPrice = availableQuantityOftheItem = 0;
                        }
                    }
                    else
                    {
                        dtItemStoreQnt = Codes.Search2("SELECT dbo.Store.Price,Store.Quantity  as ItemStoreQuantity " +
                            "FROM dbo.Items INNER JOIN dbo.Store ON dbo.Items.ID = dbo.Store.ItemID " +
                            "where Items.ID = '" + ItemIDbyBarcode + "' " +
                            "and Store.StoreID = '" + StoreCombo.SelectedValue + "'");
                        //decimal Qty = 0;
                        try
                        {
                            BuyPrice = dtItemStoreQnt.Rows[0][0].ToDecimal().NormalizeDecimalPlaces(ProSetting.Round);
                            availableQuantityOftheItem = dtItemStoreQnt.Rows[0]["ItemStoreQuantity"].ToDecimal();
                            ActualItemStoreQuantity = availableQuantityOftheItem;
                        }
                        catch (Exception exx)
                        {
                            BuyPrice = availableQuantityOftheItem = 0;
                        }
                    }
                }
                else
                {

                    if (dtItemComponent.Rows.Count > 0)
                    {
                        dtItemStoreQnt = Codes.Search2(
                            @"WITH ItemComponentsCTE AS (
SELECT  Row_Number() Over (Order by ItemsUnit.ItemId,ItemsUnit.ID) as Rn ,
ItemsUnit.ItemID,
ItemsUnit.Barcode,
(Select Name From Items Where ID =ItemsUnit.ItemID) as ItemName,
(Select Name From Units Where ID =ItemsUnit.UnitId) as UnitName,
Isnull((Select Price From Store Where ItemID =ParentITemID and StoreId =  '" + StoreCombo.SelectedValue +
                        @"'),0) as BuyPrice,
 ItemsUnit.ItMain as ComponentItMain,
(
(Case When ItemsUnit.ItMain = 1 
Then Isnull(dbo.Store.Price,0) Else ItemsUnit.BuyPrice END )
" + (!ProSetting.salesByList ? "" : @"
* (1 - ((Select case when Isnull(IsInDiscountList,0) = 0 then 0 
else isnull(discountincoming,0) end from Items Where ID = ItemsUnit.ItemID)/100))
") + @"
)
as ComponentBuyPrice,
Cast((Isnull(dbo.Store.Quantity,0)/ItemsUnit.ItMain) as money) as OriginalComponentStoreQuantity ,
Cast(Qnt as money) as ComponentAssemblingQuantity,
FLOOR(ISNULL(Quantity,0)/(Qnt * ItMain)) as ItemLargestAssembledQuantity,
Isnull((Select Quantity From Store Where ItemID = ParentItemID and StoreId =   '" + StoreCombo.SelectedValue +
                        @"'),0) as ItemStoreQuantity,
Case When Sum(Qnt * ItMain) over (partition by ItemsUnit.ItemID) > Quantity then 0 else 1 end as QuantityAvailableStatus,
Isnull(ModifyBuyprice,1) as ModifyBuyprice ,
Isnull(masnyea,0) as masnyea,
(Select Count(*) From Store Where ItemID =ParentITemID and StoreId =  '" + StoreCombo.SelectedValue + @"') as AddedToStore,
(Select Khadamy From Items Where ID =ItemsUnit.ItemID) as Khadamy
FROM dbo.ItemsColleting 
LEFT JOIN ItemsUnit 
ON ItemsColleting.ChildItemUnitID = ItemsUnit.Id 
LEFT Join dbo.Store 
ON dbo.ItemsUnit.ItemID = dbo.Store.ItemID  and Store.StoreID = '" + StoreCombo.SelectedValue + @"'
where ParentITemID = '" + ItemIDbyBarcode + @"'
),
ValidItemComponentsCTE AS (
    SELECT
        Rn,
        ItemID,
		Barcode,
		ItemName,
		UnitName,
        BuyPrice,
        ComponentBuyPrice,	
       (OriginalComponentStoreQuantity* ComponentItMain -
            (SELECT SUM(ComponentAssemblingQuantity)
             FROM ItemComponentsCTE AS innerCTE
             WHERE innerCTE.ItemID = outerCTE.ItemID
               AND innerCTE.Rn <= outerCTE.Rn) 
            + ComponentAssemblingQuantity)/ ComponentItMain AS ComponentStoreQuantity,
        ComponentAssemblingQuantity,
        ItemLargestAssembledQuantity,
		ItemStoreQuantity,
        ModifyBuyprice,
        masnyea,
		AddedToStore,
        Khadamy
    FROM ItemComponentsCTE AS outerCTE
)
SELECT
    ItemID,
	Barcode,
	ItemName,
	UnitName,
	BuyPrice,
	ComponentBuyPrice,
	ComponentStoreQuantity,
	ComponentAssemblingQuantity,
	CASE 
        WHEN ComponentStoreQuantity < ComponentAssemblingQuantity THEN 0
        ELSE ItemLargestAssembledQuantity end
    ItemLargestAssembledQuantity,
	ItemStoreQuantity,
    CASE 
        WHEN ComponentStoreQuantity < ComponentAssemblingQuantity THEN 0
        ELSE 1
    END AS QuantityAvailableStatus,
    ModifyBuyprice,
	masnyea,
	AddedToStore,
	Khadamy
FROM ValidItemComponentsCTE
ORDER BY Rn;");
                    }
                    else
                        dtItemStoreQnt = Codes.Search2(
                        "SELECT dbo.Store.Price,Store.Quantity  as ItemStoreQuantity " +
                        "FROM dbo.Items INNER JOIN dbo.Store ON dbo.Items.ID = dbo.Store.ItemID " +
                        "where Items.ID = '" + ItemIDbyBarcode + "' " +
                        "and Store.StoreID = '" + StoreCombo.SelectedValue + "'");
                    if (dtItemStoreQnt.Rows.Count == 0)
                    {
                        MessageBox.Show(Tr.M1.m0256);
                        try
                        {
                            try
                            {
                                if (ProSetting.SkipQuantityAssemblingOfAnItem)
                                {
                                    var currentitemID = dataGridView1.Rows[dataGridView1.CurrentRow.Index]
                                               .Cells["ItemID"].Value.ToInt32();
                                    var currentitemStoreID = dataGridView1.Rows[dataGridView1.CurrentRow.Index]
                                       .Cells["StoreID"].Value.ToInt32();
                                    var deletedItem = new KeyValuePair<int, int>(currentitemID, currentitemStoreID);

                                    _dcItemComponents.Remove(deletedItem);
                                }
                            }
                            catch (Exception ex)
                            {
                            }

                            dataGridView1.NotifyCurrentCellDirty(false);
                            dataGridView1.EndEdit();
                            dataGridView1.NotifyCurrentCellDirty(true);

                            try
                            {
                                dataGridView1.Rows.Remove(dataGridView1.CurrentRow);
                            }
                            catch (Exception exc)
                            {
                            }
                            dataGridView1.NotifyCurrentCellDirty(false);

                            if (ProSetting.BarcodeOrItem == "كود الصنف")
                            {
                                dataGridView1.CurrentCell = dataGridView1.Rows[dataGridView1.RowCount - 1].Cells[1];

                            }
                            else if (ProSetting.BarcodeOrItem == "اسم الصنف")
                            {
                                dataGridView1.CurrentCell = dataGridView1.Rows[dataGridView1.RowCount - 1].Cells[2];
                                dataGridView1.CurrentCell.Selected = true;

                            }
                            else
                            {
                                var index = dataGridView1.CurrentRow.Index + 1 >= dataGridView1.RowCount
                               ? dataGridView1.RowCount - 1
                               : dataGridView1.CurrentRow.Index + 1;

                                var colIndex = index == dataGridView1.RowCount - 1
                                    ? _lastAddItemColumnIndex
                                    : dataGridView1.CurrentCell.ColumnIndex;

                                dataGridView1.CurrentCell = dataGridView1.Rows[index].Cells[colIndex];
                                dataGridView1.CurrentCell.Selected = true;
                            }

                            ItemIDbyBarcode = "";
                            ItemBarcode = "";
                            underDelev = false;
                            Qnt = 1;
                        }
                        catch
                        {
                        }

                        return;
                    }

                    try
                    {
                        BuyPrice = dtItemStoreQnt.Rows[0][0].ToDecimal().NormalizeDecimalPlaces(ProSetting.Round);
                        availableQuantityOftheItem = dtItemStoreQnt.Rows[0]["ItemStoreQuantity"].ToDecimal();
                        ActualItemStoreQuantity = availableQuantityOftheItem;
                    }
                    catch (Exception exx)
                    {
                        BuyPrice = availableQuantityOftheItem = 0;
                    }
                }

                if (dataGridView1.CurrentRow.Cells["ItemColor"].Value.ToText() == "")
                {
                    var cIndex = dataGridView1.CurrentRow.Index + 1;
                    ItemColor = AutomaticColorTextInSales ? cIndex.ToText() : "";
                }
                else
                {
                    ItemColor = dataGridView1.CurrentRow.Cells["ItemColor"].Value.ToText();
                }
                decimal q = 0;
                decimal q2 = 0;
                decimal quanbyBarc = 0;
                for (int i = 1; i < dataGridView1.Rows.Count; i++)
                {
                    var quantitynotEnough = false;
                    if ((dataGridView1.Rows[i - 1].Cells["ItemID"].Value != null
                         || dataGridView1.Rows[i - 1].Cells["Barcode"].Value.Stringify() != "")
                        && (dataGridView1.Rows[i - 1].Cells["StoreID"].Value != null
                            || dataGridView1.Rows[i - 1].Cells["StoreID"].Value.Stringify() != ""))
                    {
                        if (dataGridView1.CurrentRow.Index != i - 1)
                        {
                            try
                            {
                                if (dataGridView1.Rows[i - 1].Cells["ItemID"].Value.ToInt32()
                                    == ItemIDbyBarcode.ToInt32()
                                    && dataGridView1.Rows[i - 1].Cells["StoreID"].Value.ToInt32()
                                    == StoreCombo.SelectedValue.ToInt32())
                                {
                                    q += dataGridView1.Rows[i - 1].Cells["Quantity"].Value.ToDecimal();
                                    q2 += dataGridView1.Rows[i - 1].Cells["Quantity"].Value.ToDecimal()
                                        * Convert.ToDecimal(dataGridView1.Rows[i - 1].Cells["mainIt"].Value.Stringify());

                                    var sameColor = AutomaticColorTextInSales
                                        ? dataGridView1.Rows[i - 1].Cells["ItemColor"].Value.ToInt32() == ItemColor.ToInt32()
                                        : dataGridView1.Rows[i - 1].Cells["ItemColor"].Value.ToText() == ItemColor;

                                    if (sameColor
                                        && dataGridView1.Rows[i - 1].Cells["Barcode"].Value.Stringify() == ItemBarcode)
                                    {
                                        quanbyBarc += Convert.ToDecimal(dataGridView1.Rows[i - 1].Cells["Quantity"].Value.Stringify());
                                    }

                                    decimal qq = Convert.ToDecimal(Qnt);
                                    if (
                                            Codes.Search2(
                                                "select Khadamy from Items where ID = '" + ItemIDbyBarcode +
                                                "' and Items.Active = 1").Rows[0][0].ToBool() == false)
                                    {
                                        if (sameColor
                                            && dataGridView1.Rows[i - 1].Cells["Barcode"].Value.ToText() == ItemBarcode)
                                        {
                                            if (ProSetting.AltersameItemininvoice)
                                                MessageBox.Show(Tr.M1.m0260);

                                            var newQnt = dataGridView1.Rows[i - 1].Cells["Quantity"].Value.ToDecimal() + 1M;

                                            dataGridView1.Rows[i - 1].Cells["Quantity"].Value = newQnt.NormalizeDecimalPlaces().Stringify();
                                        }
                                    }
                                    else
                                    {
                                        if (sameColor
                                            && dataGridView1.Rows[i - 1].Cells["Barcode"].Value.Stringify() == ItemBarcode)
                                        {
                                            if (ProSetting.AltersameItemininvoice)
                                                MessageBox.Show(Tr.M1.m0260);
                                            var itemQnt = (e.RowIndex > i - 1 ? quanbyBarc + qq : quanbyBarc);
                                            dataGridView1.Rows[i - 1].Cells["Quantity"].Value = itemQnt.NormalizeDecimalPlaces().Stringify();
                                        }

                                    }

                                    if (sameColor
                                         && dataGridView1.Rows[i - 1].Cells["Barcode"].Value.Stringify() == ItemBarcode)
                                    {
                                        try
                                        {
                                            try
                                            {
                                                if (ProSetting.SkipQuantityAssemblingOfAnItem)
                                                {
                                                    var currentitemID = dataGridView1.Rows[dataGridView1.CurrentRow.Index]
                                                .Cells["ItemID"].Value.ToInt32();
                                                    var currentitemStoreID = dataGridView1.Rows[dataGridView1.CurrentRow.Index]
                                                       .Cells["StoreID"].Value.ToInt32();
                                                    var deletedItem = new KeyValuePair<int, int>(currentitemID, currentitemStoreID);

                                                    _dcItemComponents.Remove(deletedItem);
                                                }
                                            }
                                            catch (Exception ex)
                                            {
                                            }

                                            dataGridView1.NotifyCurrentCellDirty(false);
                                            dataGridView1.EndEdit();
                                            dataGridView1.NotifyCurrentCellDirty(true);

                                            try
                                            {
                                                dataGridView1.Rows.Remove(dataGridView1.CurrentRow);
                                            }
                                            catch (Exception exc)
                                            {
                                            }
                                            dataGridView1.NotifyCurrentCellDirty(false);

                                        }
                                        catch (Exception exc)
                                        {
                                        }

                                        if (ProSetting.BarcodeOrItem == "كود الصنف")
                                        {
                                            dataGridView1.CurrentCell = dataGridView1.Rows[dataGridView1.RowCount - 1].Cells[1];

                                        }
                                        else if (ProSetting.BarcodeOrItem == "اسم الصنف")
                                        {
                                            dataGridView1.CurrentCell = dataGridView1.Rows[dataGridView1.RowCount - 1].Cells[2];
                                            dataGridView1.CurrentCell.Selected = true;

                                        }
                                        else
                                        {
                                            var index = dataGridView1.CurrentRow.Index + 1 >= dataGridView1.RowCount
                               ? dataGridView1.RowCount - 1
                               : dataGridView1.CurrentRow.Index + 1;

                                            var colIndex = index == dataGridView1.RowCount - 1
                                                ? _lastAddItemColumnIndex
                                                : dataGridView1.CurrentCell.ColumnIndex;

                                            dataGridView1.CurrentCell = dataGridView1.Rows[index].Cells[colIndex];
                                            dataGridView1.CurrentCell.Selected = true;

                                        }
                                        ItemIDbyBarcode = ""; ItemBarcode = ""; underDelev = false; Qnt = 1;
                                        return;
                                    }
                                }
                            }
                            catch
                            {
                            }
                            //}
                        }
                    }
                }
            }
            else
            {
                if (ProSetting.SkipQuantityAssemblingOfAnItem && dtItemComponent.Rows.Count > 0)
                {
                    try
                    {
                        ActualItemStoreQuantity = Convert.ToDecimal(dtItemStoreQnt.Rows[0]["ItemStoreQuantity"].Stringify());

                        var LargestAvailableQnt = dtItemStoreQnt.Rows.OfType<DataRow>()
                            .Where(dr => !Convert.ToBoolean(dr["Khadamy"])).Min(dr => Convert.ToDecimal(dr["ItemLargestAssembledQuantity"]));

                        updateBuyPriceOFCombinedItem =
                            Convert.ToBoolean(dtItemStoreQnt.Rows[0]["ModifyBuyprice"]);
                        var masnyea = Convert.ToDecimal(dtItemStoreQnt.Rows[0]["masnyea"]);
                        BuyPrice = updateBuyPriceOFCombinedItem && ActualItemStoreQuantity <= 0
                            ? dtItemStoreQnt.Select().Sum(dr => Convert.ToDecimal(dr["ComponentBuyPrice"]) * Convert.ToDecimal(dr["ComponentAssemblingQuantity"])) + masnyea
                            : Convert.ToDecimal(dtItemStoreQnt.Rows[0]["BuyPrice"].Stringify());

                        availableQuantityOftheItem = ((LargestAvailableQnt < 0 ? 0 : LargestAvailableQnt) + ActualItemStoreQuantity);
                    }
                    catch (Exception exx)
                    {
                        BuyPrice = availableQuantityOftheItem = 0;
                    }
                }
                else
                {

                    dtItemStoreQnt = Codes.Search2(
                        "SELECT dbo.Store.Price,Store.Quantity  as ItemStoreQuantity " +
                        "FROM dbo.Items INNER JOIN dbo.Store ON dbo.Items.ID = dbo.Store.ItemID " +
                        "where Items.ID = '" + ItemIDbyBarcode + "' " +
                        "and Store.StoreID = '" + StoreCombo.SelectedValue + "'");
                    if (dtItemStoreQnt.Rows.Count == 0)
                    {
                        MessageBox.Show(Tr.M1.m0256);
                        try
                        {
                            try
                            {
                                if (ProSetting.SkipQuantityAssemblingOfAnItem)
                                {
                                    var currentitemID = dataGridView1.Rows[dataGridView1.CurrentRow.Index]
                                               .Cells["ItemID"].Value.ToInt32();
                                    var currentitemStoreID = dataGridView1.Rows[dataGridView1.CurrentRow.Index]
                                       .Cells["StoreID"].Value.ToInt32();
                                    var deletedItem = new KeyValuePair<int, int>(currentitemID, currentitemStoreID);

                                    _dcItemComponents.Remove(deletedItem);
                                }
                            }
                            catch (Exception ex)
                            {
                            }

                            dataGridView1.NotifyCurrentCellDirty(false);
                            dataGridView1.EndEdit();
                            dataGridView1.NotifyCurrentCellDirty(true);

                            try
                            {
                                dataGridView1.Rows.Remove(dataGridView1.CurrentRow);
                            }
                            catch (Exception exc)
                            {
                            }
                            dataGridView1.NotifyCurrentCellDirty(false);

                            if (ProSetting.BarcodeOrItem == "كود الصنف")
                            {
                                dataGridView1.CurrentCell = dataGridView1.Rows[dataGridView1.RowCount - 1].Cells[1];

                            }
                            else if (ProSetting.BarcodeOrItem == "اسم الصنف")
                            {
                                dataGridView1.CurrentCell = dataGridView1.Rows[dataGridView1.RowCount - 1].Cells[2];
                                dataGridView1.CurrentCell.Selected = true;

                            }
                            else
                            {
                                var index = dataGridView1.CurrentRow.Index + 1 >= dataGridView1.RowCount
                                ? dataGridView1.RowCount - 1
                                : dataGridView1.CurrentRow.Index + 1;

                                var colIndex = index == dataGridView1.RowCount - 1
                                    ? _lastAddItemColumnIndex
                                    : dataGridView1.CurrentCell.ColumnIndex;

                                dataGridView1.CurrentCell = dataGridView1.Rows[index].Cells[colIndex];
                                dataGridView1.CurrentCell.Selected = true;
                            }

                            ItemIDbyBarcode = "";
                            ItemBarcode = "";
                            underDelev = false;
                            Qnt = 1;
                        }
                        catch
                        {
                        }

                        return;
                    }

                    try
                    {
                        BuyPrice = dtItemStoreQnt.Rows[0][0].ToDecimal().NormalizeDecimalPlaces(ProSetting.Round);
                        availableQuantityOftheItem = dtItemStoreQnt.Rows[0]["ItemStoreQuantity"].ToDecimal();
                        ActualItemStoreQuantity = availableQuantityOftheItem;
                    }
                    catch (Exception exx)
                    {
                        BuyPrice = availableQuantityOftheItem = 0;
                    }
                }
            }

            try
            {
                HandleCellValueChanged();

                dtData = Codes.Search2(@"select
dbo.ItemsUnit.UnitID, 
dbo.Units.Name AS UnitName, 
dbo.ItemsUnit.Price, 
dbo.ItemsUnit.PriceInter, 
dbo.ItemsUnit.HalfPrice, 
dbo.ItemsUnit.Gomla1, 
dbo.ItemsUnit.Gomla2, 
dbo.ItemsUnit.ItMain, 
CASE WHEN dbo.ItemsUnit.ItMain=1 
and isnull((Select IsNull(dbo.Store.Price,0) from Store where ItemID =ItemsUnit.ItemId and StoreId='" +
                                                       StoreCombo.SelectedValue.Stringify() + @"' ),0) > 0 
THEN (Select IsNull(dbo.Store.Price,0) from Store where ItemID =ItemsUnit.ItemId and StoreId='" +
                                                       StoreCombo.SelectedValue.Stringify() + @"' ) 
ELSE  dbo.ItemsUnit.BuyPrice End as BuyPrice, 
dbo.Items.Tax,
dbo.Items.Picture,
ItemsUnit.ID,
Items.StoreCode,
isnull(discountincoming,0) as discountincoming ,
isnull(discountbuy,0) as discountbuy,
isnull(discountgomla,0) as discountgomla,
isnull(discounthalfgomla,0) as discounthalfgomla,
isnull(discountgomla1,0) as discountgomla1,
isnull(discountgomla2,0) as discountgomla2 ,
isnull(ProfitSell,0) as ProfitSell ,
isnull(ProfitGomla,0) as ProfitGomla,
isnull(ProfitHalfGomla,0) as ProfitHalfGomla,
isnull(discounthalfgomla,0) as discounthalfgomla,
isnull(ProfitGomla1,0) as ProfitGomla1,
isnull(ProfitGomla2,0) as ProfitGomla2 ,
(select isnull(
(select  Point from Itemspoint where  ItemID= Items.Id and Datefrom <= Convert(varchar(10),GetDate(),23) + ' 00:00:00'
and  isnull(DateTo,'01-01-1900') >= case when DateTo is null or Year(DateTo)='1900' then '01-01-1900' else  Convert(varchar(10),GetDate(),23) + ' 00:00:00'  end),0)) as Points,
Isnull((Select Cast(Sum(amount * itMains) as nvarchar(50)) From UnderDelivery Where ItemID = ItemsUnit.ItemID 
and StoreId=" + StoreCombo.SelectedValue + @"),'0') 
+ '/' 
+ Isnull((Select Cast(Sum(amount * itMains) as nvarchar(50)) From UnderDelivery 
Where ItemID= ItemsUnit.ItemID ),0) as UnderDeliveryQnt,
Isnull(IsInDiscountList,0) as IsInDiscountList
FROM         dbo.ItemsUnit INNER JOIN
                      dbo.Units ON dbo.ItemsUnit.UnitID = dbo.Units.ID INNER JOIN
                      dbo.Items ON dbo.ItemsUnit.ItemID = dbo.Items.ID 
where ItemsUnit.Barcode ='" + ItemBarcode + "' order by ItemsUnit.ID");
                var isItemInDiscountList = Convert.ToBoolean(dtData.Rows[0]["IsInDiscountList"]);
                var ItemByBarcodeItMain = 1M;

                try
                {
                    if (dtData.Rows.Count > 0)
                        ItemByBarcodeItMain = dtData.Rows[0]["ItMain"].ToDecimal();

                    StoreQty = availableQuantityOftheItem;

                    if ((StoreQty / ItemByBarcodeItMain) < 1
                         && StoreQty > 0
                        && Qnt == 1
                        && mezanQnt.ToDecimal() == 0)
                    {
                        Qnt = (StoreQty / ItemByBarcodeItMain).NormalizeDecimalPlaces();
                    }
                }
                catch
                {
                }

                for (int i = 1; i < dataGridView1.Rows.Count; i++)
                {
                    var itemID = dataGridView1.Rows[i - 1].Cells["ItemID"].Value.ToInt32();
                    if (itemID == 0 && i > 1)
                        itemID = ItemIDbyBarcode.ToInt32();

                    var storeId = dataGridView1.Rows[i - 1].Cells["StoreID"].Value.ToInt32();
                    if (storeId == 0 && i > 1)
                        storeId = StoreCombo.SelectedValue.ToInt32();
                    var itemQnt = Convert.ToDecimal(dataGridView1.Rows[i - 1].Cells["Quantity"].Value);

                    if (itemQnt == 0)
                        itemQnt = Qnt * ItemByBarcodeItMain;


                    if (itemID != 0 && storeId != 0)
                    {
                        if (itemID
                            == ItemIDbyBarcode.ToInt32()
                            && storeId
                            == StoreCombo.SelectedValue.ToInt32())
                        {
                            if (e.RowIndex != i - 1)
                                Quantity += dataGridView1.Rows[i - 1].Cells["Quantity"].Value.ToDecimal()
                                            * Convert.ToDecimal(dataGridView1.Rows[i - 1].Cells["mainIt"].Value);
                            else
                                Quantity += itemQnt;

                        }
                    }
                    else
                        Quantity += itemQnt;
                }
                if (Quantity <= 0)
                    if (Qnt > 0)
                        Quantity = Qnt;
                    else
                        Quantity = 1;
                try
                {

                    if (Convert.ToBoolean(Codes.Search2("select Khadamy from Items where ID = '" + ItemIDbyBarcode + "' and Items.Active = 1").Rows[0][0].Stringify()) == false)
                    {
                        if (StoreQty.NormalizeDecimalPlaces(ProSetting.Round) < Quantity.NormalizeDecimalPlaces(ProSetting.Round)
                            && !ProSetting.StoreMinus)
                        {

                            var notEnoughQnt = true;
                            //Quantity != (StoreQty / ItemByBarcodeItMain);
                            if (StoreQty > 0)
                            {
                                var qnttoAddWithMainUnit = StoreQty - (Quantity - (Qnt * ItemByBarcodeItMain));
                                if (qnttoAddWithMainUnit > 0 && StoreQty >= qnttoAddWithMainUnit)
                                {
                                    notEnoughQnt = false;
                                    Qnt = (qnttoAddWithMainUnit / ItemByBarcodeItMain).NormalizeDecimalPlaces();
                                }

                            }

                            if (notEnoughQnt)
                            {
                                if (addedToUnderDelivery)
                                {
                                    var isItUnderDeliver = false;
                                    try
                                    {
                                        isItUnderDeliver = Convert.ToBoolean(dataGridView1.CurrentRow
                                            .Cells["UnderDelevItem"].Value.Stringify());
                                    }
                                    catch
                                    {
                                    }

                                    if (!isItUnderDeliver)
                                        MessageBox.Show(Tr.M1.m0366, Tr.M1.alert);
                                    underDelev = true;
                                    try
                                    {
                                        dataGridView1.CurrentRow.Cells["UnderDelevItem"].Value = underDelev;
                                    }
                                    catch (Exception exception)
                                    {
                                    }
                                }
                                else if (!ProSetting.SkipQuantityAssemblingOfAnItem
                                    || (ProSetting.SkipQuantityAssemblingOfAnItem
                                        && dtItemComponent.Rows.Count == 0))
                                {
                                    if (ProSetting.UniderDelevItem)
                                    {
                                        var isItUnderDeliver = false;
                                        try
                                        {
                                            isItUnderDeliver = Convert.ToBoolean(dataGridView1.CurrentRow
                                                .Cells["UnderDelevItem"].Value.Stringify());
                                        }
                                        catch
                                        {
                                        }

                                        if (!isItUnderDeliver)
                                            MessageBox.Show(Tr.M1.m0366, Tr.M1.alert);
                                        underDelev = true;
                                        try
                                        {
                                            dataGridView1.CurrentRow.Cells["UnderDelevItem"].Value = underDelev;
                                        }
                                        catch (Exception exception)
                                        {
                                        }
                                    }
                                    else
                                    {
                                        MessageBox.Show(Tr.M2.m448);
                                        try
                                        {
                                            if (ProSetting.SkipQuantityAssemblingOfAnItem)
                                            {
                                                var currentitemID = dataGridView1.Rows[dataGridView1.CurrentRow.Index]
                                                .Cells["ItemID"].Value.ToInt32();
                                                var currentitemStoreID = dataGridView1.Rows[dataGridView1.CurrentRow.Index]
                                                   .Cells["StoreID"].Value.ToInt32();
                                                var deletedItem = new KeyValuePair<int, int>(currentitemID, currentitemStoreID);

                                                _dcItemComponents.Remove(deletedItem);
                                            }
                                        }
                                        catch (Exception ex)
                                        {
                                        }

                                        try
                                        {
                                            dataGridView1.CellEndEdit -= dataGridView1_CellEndEdit;
                                            dataGridView1.RowsRemoved -= dataGridView1_RowsRemoved;

                                            dataGridView1.NotifyCurrentCellDirty(false);
                                            dataGridView1.EndEdit();
                                            dataGridView1.NotifyCurrentCellDirty(true);

                                            try
                                            {
                                                dataGridView1.Rows.Remove(dataGridView1.CurrentRow);
                                            }
                                            catch (Exception exc)
                                            {
                                            }
                                            dataGridView1.NotifyCurrentCellDirty(false);
                                        }
                                        catch (Exception exc)
                                        {
                                        }
                                        finally
                                        {
                                            dataGridView1.CellEndEdit += dataGridView1_CellEndEdit;
                                            dataGridView1.RowsRemoved += dataGridView1_RowsRemoved;
                                        }





                                        //dataGridView1.NotifyCurrentCellDirty(false);

                                        if (ProSetting.BarcodeOrItem == "كود الصنف")
                                        {
                                            dataGridView1.CurrentCell = dataGridView1.Rows[dataGridView1.RowCount - 1].Cells[1];
                                            if (ProSetting.OnQuantity)
                                                SendKeys.Send("{ENTER}");
                                        }
                                        else if (ProSetting.BarcodeOrItem == "اسم الصنف")
                                        {
                                            dataGridView1.CurrentCell = dataGridView1.Rows[dataGridView1.RowCount - 1].Cells[2];
                                            dataGridView1.CurrentCell.Selected = true;
                                            if (ProSetting.OnQuantity)
                                                SendKeys.Send("{ENTER}");
                                        }
                                        else
                                        {
                                            var index = dataGridView1.CurrentRow.Index + 1 >= dataGridView1.RowCount
                                ? dataGridView1.RowCount - 1
                                : dataGridView1.CurrentRow.Index + 1;

                                            var colIndex = index == dataGridView1.RowCount - 1
                                                ? _lastAddItemColumnIndex
                                                : dataGridView1.CurrentCell.ColumnIndex;

                                            dataGridView1.CurrentCell = dataGridView1.Rows[index].Cells[colIndex];
                                            dataGridView1.CurrentCell.Selected = true;

                                            if (ProSetting.OnQuantity)
                                                SendKeys.Send("{ENTER}");
                                        }

                                        ItemIDbyBarcode = "";
                                        ItemBarcode = "";
                                        underDelev = false;
                                        Qnt = 1;
                                        return;
                                    }
                                }
                            }
                        }
                    }
                }
                catch
                {
                }

                try
                {
                    dataGridView1.CurrentRow.Cells["ItemID"].Value = ItemIDbyBarcode;
                    dataGridView1.CurrentRow.Cells["Barcode"].Value = ItemBarcode;

                }
                catch (Exception ex)
                {
                }

                try
                {
                    var cIndex = dataGridView1.CurrentRow.Index + 1;
                    if (AutomaticColorTextInSales)
                        dataGridView1.CurrentRow.Cells["ItemColor"].Value = cIndex;
                    else if (ProSetting.ColorOrSerial == "السيريال")
                        dataGridView1.CurrentRow.Cells["ItemColor"].Value = "";
                }
                catch (Exception exx)
                {
                }

                try
                {
                    DataGridViewComboBoxCell dgvCmbCell;
                    dgvCmbCell = (DataGridViewComboBoxCell)dataGridView1.CurrentRow.Cells["mm"];
                    DataTable dtUnits = Codes.Search2(@"SELECT     dbo.Units.ID, dbo.Units.Name
FROM         dbo.ItemsUnit INNER JOIN
                      dbo.Units ON dbo.ItemsUnit.UnitID = dbo.Units.ID where ItemsUnit.ItemID = '" + ItemIDbyBarcode + "' order by ItemsUnit.ID");
                    dgvCmbCell.DataSource = dtUnits;
                    dgvCmbCell.DisplayMember = dtUnits.Columns[1].Stringify();
                }
                catch { }
                try
                {
                    dataGridView1.CurrentRow.Cells["mm"].Value = dtData.Rows[0]["UnitName"].Stringify();
                }
                catch (Exception ex)
                {
                }
                try
                {
                    if (Qnt > 0)
                    {
                        dataGridView1.CurrentRow.Cells["Quantity"].Value = Qnt.NormalizeDecimalPlaces().Stringify();
                    }
                    else
                    {
                        dataGridView1.CurrentRow.Cells["Quantity"].Value = 1;
                    }
                }
                catch (Exception ex)
                {
                }
                try
                {
                    dataGridView1.CurrentRow.Cells["AdditionValue"].Value = 0;
                }
                catch
                {
                }

                DataTable dtUnitPrice = new DataTable();
                try
                {
                    dtUnitPrice = Codes.Search2("select UnitPrice,id from sales where ItemID='" + ItemIDbyBarcode + "' and UnitId = '" + dtData.Rows[0]["UnitID"].Stringify() + "' and ClientID=" + ClientCombo.SelectedValue + "  ORDER BY id DESC");
                }
                catch (Exception ex)
                {
                }
                try
                {

                    dataGridView1.CurrentRow.Cells["ItemBuyPrice"].Value = dtData.Rows[0]["BuyPrice"].ToDecimal();
                    dataGridView1.CurrentRow.Cells["buyPrice"].Value =
                   (dtItemComponent.Rows.Count > 0
                        ? ProSetting.SkipQuantityAssemblingOfAnItem
                            && updateBuyPriceOFCombinedItem
                            ? Math.Round(BuyPrice, ProSetting.Round,
                                MidpointRounding.AwayFromZero)
                            : dtData.Rows[0]["BuyPrice"].ToDecimal()
                        : !isItemInDiscountList
                            ? dtData.Rows[0]["BuyPrice"].ToDecimal()
                            : (dtData.Rows[0]["BuyPrice"].ToDecimal()
                                          * (100 - dtData.Rows[0]["discountincoming"].ToDecimal()) / 100)).NormalizeDecimalPlaces().Stringify();



                }
                catch (Exception ex)
                {
                }
                if (dtUnitPrice.Rows.Count > 0
                    && !isItemInDiscountList
                    && ProSetting.ClientPrice
                    && !ProSetting.ClientPricePilot
                    && Convert.ToInt32(ClientCombo.SelectedValue) != ProSetting.NakdiClient)
                {
                    try
                    {
                        if (string.IsNullOrEmpty(dtUnitPrice.Rows[0][0].Stringify()))
                            dtUnitPrice.Rows[0][0] = 0;

                        var itemUnitPrice = dtUnitPrice.Rows[0][0].ToDecimal();
                        dataGridView1.CurrentRow.Cells["UnitPrice"].Value = itemUnitPrice.NormalizeDecimalPlaces(ProSetting.Round).Stringify();
                    }
                    catch (Exception ex)
                    {

                    }
                }
                else
                {
                    try
                    {
                        var itemUnitPrice = 0M;
                        var itemDiscountRate = 0M;
                        var itemBuyPrice = dataGridView1.CurrentRow.Cells["buyPrice"].Value.ToDecimal();

                        if (BillKindCom.Text == "قطاعي")
                        {
                            itemUnitPrice =
                                !ProSetting.UpdateItemsSellPricesOnChangeOfBuyPrice
                                || dtData.Rows[0]["ProfitSell"].ToDecimal() == 0
                                || isItemInDiscountList
                                    ? dtData.Rows[0]["Price"].ToDecimal()
                                    : itemBuyPrice *
                                        ((100 + dtData.Rows[0]["ProfitSell"].ToDecimal()) / 100);

                            itemDiscountRate = dtData.Rows[0]["discountbuy"].ToDecimal();

                        }
                        else if (BillKindCom.Text == "جملة")
                        {
                            itemUnitPrice =
                               !ProSetting.UpdateItemsSellPricesOnChangeOfBuyPrice
                                || dtData.Rows[0]["ProfitGomla"].ToDecimal() == 0
                                || isItemInDiscountList
                                    ? dtData.Rows[0]["PriceInter"].ToDecimal()
                                    : itemBuyPrice *
                                        ((100 + dtData.Rows[0]["ProfitGomla"].ToDecimal()) / 100);

                            itemDiscountRate = dtData.Rows[0]["discountgomla"].ToDecimal();
                        }
                        else if (BillKindCom.Text == "نصف جملة")
                        {
                            itemUnitPrice =
                               !ProSetting.UpdateItemsSellPricesOnChangeOfBuyPrice
                                || dtData.Rows[0]["ProfitHalfGomla"].ToDecimal() == 0
                                || isItemInDiscountList
                                    ? dtData.Rows[0]["HalfPrice"].ToDecimal()
                                    : itemBuyPrice *
                                        ((100 + dtData.Rows[0]["ProfitHalfGomla"].ToDecimal()) / 100);

                            itemDiscountRate = dtData.Rows[0]["discounthalfgomla"].ToDecimal();

                        }
                        else if (BillKindCom.Text == "جملة 1")
                        {
                            itemUnitPrice =
                               !ProSetting.UpdateItemsSellPricesOnChangeOfBuyPrice
                                || dtData.Rows[0]["Gomla1"].ToDecimal() == 0
                                || isItemInDiscountList
                                    ? dtData.Rows[0]["Gomla1"].ToDecimal()
                                    : itemBuyPrice *
                                        ((100 + dtData.Rows[0]["ProfitGomla1"].ToDecimal()) / 100);

                            itemDiscountRate = dtData.Rows[0]["discountgomla1"].ToDecimal();
                        }
                        else if (BillKindCom.Text == "جملة 2")
                        {
                            itemUnitPrice =
                               !ProSetting.UpdateItemsSellPricesOnChangeOfBuyPrice
                                || dtData.Rows[0]["Gomla2"].ToDecimal() == 0
                                || isItemInDiscountList
                                    ? dtData.Rows[0]["Gomla2"].ToDecimal()
                                    : itemBuyPrice *
                                        ((100 + dtData.Rows[0]["ProfitGomla2"].ToDecimal()) / 100);

                            itemDiscountRate = dtData.Rows[0]["discountgomla2"].ToDecimal();

                        }

                        dataGridView1.CurrentRow.Cells["UnitPrice"].Value = itemUnitPrice.NormalizeDecimalPlaces(ProSetting.Round)
                            .Stringify();
                        dataGridView1.CurrentRow.Cells["Discount"].Value = itemDiscountRate.NormalizeDecimalPlaces(ProSetting.Round)
                            .Stringify();
                    }
                    catch (Exception ex)
                    {
                    }
                }
                DataTable dtPrice = new DataTable();
                try
                {
                    dtPrice = Codes.Search2(@"SELECT     dbo.ItemsUnit.Price, 
CASE WHEN dbo.ItemsUnit.ItMain=1 
and isnull((Select IsNull(dbo.Store.Price,0) from Store where ItemID =ItemsUnit.ItemId 
and StoreId='" + (dataGridView1.CurrentRow.Cells["StoreId"].Value == null
                                                ? StoreCombo.SelectedValue.Stringify()
                                                : dataGridView1.CurrentRow.Cells["StoreId"].Value.Stringify()) + @"' ),0) > 0 
THEN (Select IsNull(dbo.Store.Price,0) from Store where ItemID =ItemsUnit.ItemId 
and Store.StoreID='" + (dataGridView1.CurrentRow.Cells["StoreId"].Value == null
                                                ? StoreCombo.SelectedValue.Stringify()
                                                : dataGridView1.CurrentRow.Cells["StoreId"].Value.Stringify()) + @"' ) ELSE  dbo.ItemsUnit.BuyPrice End as BuyPrice
FROM         dbo.ItemsUnit INNER JOIN
                      dbo.Units ON dbo.ItemsUnit.UnitID = dbo.Units.ID where ItemsUnit.ItemID ='" + dataGridView1.CurrentRow.Cells["ItemID"].Value + "' and Units.Name ='" + dataGridView1.CurrentRow.Cells["mm"].Value + "' ");
                }
                catch (Exception ex)
                {
                }

                if (!isItemInDiscountList)

                {
                    DataTable dtDiscount = Codes.Search2("select isnull(Discount,0) from items where DateFrom<='" + dateTimePicker1.Value.ToString("MM/dd/yyyy") + "' and DateTo>='" + dateTimePicker1.Value.ToString("MM/dd/yyyy") + "' and Items.Active = 1 and id=" + ItemIDbyBarcode);
                    try
                    {
                        if (dtDiscount.Rows.Count > 0)
                        {
                            var itemDiscountRate = dtDiscount.Rows[0][0].ToDecimal();
                            dataGridView1.CurrentRow.Cells["Discount"].Value = itemDiscountRate.NormalizeDecimalPlaces(ProSetting.Round)
                                .Stringify();

                        }
                        else
                        {
                            dataGridView1.CurrentRow.Cells["Discount"].Value = "0";
                        }
                    }
                    catch (Exception ex)
                    {
                    }
                }



                try
                {
                    Pieceprice = Convert.ToDecimal(dtPrice.Rows[0][0]);
                }
                catch (Exception excc)
                {
                }

                if (ProSetting.Pieceprice == true
                    && Convert.ToDecimal(dataGridView1.CurrentRow.Cells["UnitPrice"].Value)
                    < Pieceprice)
                {
                    MessageBox.Show(Tr.M1.m0180);
                    try
                    {
                        dataGridView1.CurrentRow.Cells["UnitPrice"].Value = Pieceprice.NormalizeDecimalPlaces(ProSetting.Round)
                            .Stringify();
                    }
                    catch (Exception ex)
                    {
                    }
                }

                if (Convert.ToDecimal(dataGridView1.CurrentRow.Cells["UnitPrice"].Value)
                    < Convert.ToDecimal(dataGridView1.CurrentRow.Cells["buyPrice"].Value))
                {
                    if (ProSetting.SaleMinBuy || ProSetting.SaleMinBuy2)
                        MessageBox.Show(Tr.M1.m0179);
                    try
                    {
                        if (ProSetting.SaleMinBuy2)
                        {

                            var ItemBuyPrice = dtData.Rows[0]["BuyPrice"].ToDecimal();
                            dataGridView1.CurrentRow.Cells["UnitPrice"].Value = ItemBuyPrice.NormalizeDecimalPlaces(ProSetting.Round)
                                .Stringify();
                        }
                    }
                    catch (Exception ex)
                    {
                    }
                }

                try
                {
                    var itemQuantity = dataGridView1.CurrentRow.Cells["Quantity"].Value.ToDecimal();
                    var itemUnitPrice = dataGridView1.CurrentRow.Cells["Discount"].Value.ToDecimal();
                    var itemDiscountRate = dataGridView1.CurrentRow.Cells["UnitPrice"].Value.ToDecimal();

                    var itemNetSales = (itemQuantity * itemUnitPrice);

                    var calcDiscountValue = (
                        itemNetSales
                        - (itemNetSales
                        * ((100 - itemDiscountRate) / 100))
                        );


                    dataGridView1.CurrentRow.Cells["DiscountValue"].Value =
                         calcDiscountValue.NormalizeDecimalPlaces(ProSetting.Round).Stringify();

                }
                catch (Exception ex)
                {
                }

                decimal TaxValue = 0M, itemtotal = 0M, itemDiscount = 0M, netSale = 0M;
                itemtotal = Math.Round(
                    (Convert.ToDecimal(dataGridView1.CurrentRow.Cells["UnitPrice"].Value)
                     * Convert.ToDecimal(dataGridView1.CurrentRow.Cells["Quantity"].Value))
                    , ProSetting.Round
                    , MidpointRounding.AwayFromZero);
                itemDiscount = Math.Round((itemtotal
                                            * Convert.ToDecimal(dataGridView1.CurrentRow.Cells["Discount"].Value) / 100),
                    ProSetting.Round
                    , MidpointRounding.AwayFromZero);


                netSale = Math.Round((itemtotal - itemDiscount)
                    , ProSetting.Round
                    , MidpointRounding.AwayFromZero);

                if (ProSetting.ItemsAdditionValue)
                {
                    var additionValue = Convert.ToDecimal(dataGridView1.CurrentRow.Cells["AdditionValue"].Value)
                                        * Convert.ToDecimal(dataGridView1.CurrentRow.Cells["Quantity"].Value);

                    netSale = netSale + additionValue;
                }
                else if (ProSetting.ItemsTax)
                {
                    try
                    {
                        var itemTax = dataGridView1.CurrentRow.Cells["ItemTax"].Value == null
                            ? 0
                            : Convert.ToDecimal(dataGridView1.CurrentRow.Cells["ItemTax"].Value);
                        TaxValue = Math.Round(((ProSetting.DarebaAfterDiscount ? netSale : itemtotal) * itemTax / 100)
                            , ProSetting.Round
                            , MidpointRounding.AwayFromZero);
                    }
                    catch { }
                }
                try
                {
                    var itemFactor = dtData.Rows[0]["ItMain"].ToDecimal();
                    if (itemFactor == 0)
                        itemFactor = 1;
                    var itemTotalPrice = (netSale + TaxValue);
                    dataGridView1.CurrentRow.Cells["TotalPrice"].Value = itemTotalPrice.NormalizeDecimalPlaces(ProSetting.Round).Stringify()
                        ;

                    dataGridView1.CurrentRow.Cells["StoreID"].Value = StoreCombo.SelectedValue.Stringify();
                    dataGridView1.CurrentRow.Cells["mainIt"].Value = itemFactor.Stringify();

                    dataGridView1.CurrentRow.Cells["TotalBuy"].Value = Math.Round(((
                        Convert.ToDecimal(dataGridView1.CurrentRow.Cells["Quantity"].Value.Stringify())
                        * Convert.ToDecimal(dataGridView1.CurrentRow.Cells["buyPrice"].Value.Stringify()))),
                        ProSetting.Round,
                        MidpointRounding.AwayFromZero).ToString("F" + ProSetting.Round);

                    dataGridView1.CurrentRow.Cells["Rebhea"].Value = Math.Round(
                        Convert.ToDecimal(dataGridView1.CurrentRow.Cells["TotalPrice"].Value.Stringify())
                        - Convert.ToDecimal(TaxValue.Stringify())
                        - Convert.ToDecimal(dataGridView1.CurrentRow.Cells["TotalBuy"].Value.Stringify()),
                        ProSetting.Round, MidpointRounding.AwayFromZero)
                        .ToString("F" + ProSetting.Round);

                    dataGridView1.CurrentRow.Cells["ItemStoreCode"].Value = dtData.Rows[0]["StoreCode"].Stringify();
                    var storeStock = ProSetting.SkipQuantityAssemblingOfAnItem
                            ? ActualItemStoreQuantity.ToDecimal() / itemFactor
                            : StoreQty / itemFactor;

                    dataGridView1.CurrentRow.Cells["qntStore"].Value = storeStock.NormalizeDecimalPlaces().Stringify();

                    dataGridView1.CurrentRow.Cells["ItemPoints"].Value = dtData.Rows[0]["Points"].ToDecimal();

                    var itemQnt = dataGridView1.CurrentRow.Cells["Quantity"].Value.ToDecimal();
                    var qntByMainUnit = (itemQnt * itemFactor);

                    dataGridView1.CurrentRow.Cells["countItemmain"].Value = qntByMainUnit.NormalizeDecimalPlaces().Stringify();

                    var itemMainUnitPrice = dataGridView1.CurrentRow.Cells["UnitPrice"].Value.ToDecimal() / dataGridView1.CurrentRow.Cells["mainIt"].Value.ToDecimal();

                    dataGridView1.CurrentRow.Cells["MainUnitPrice"].Value = itemMainUnitPrice.NormalizeDecimalPlaces(ProSetting.Round).Stringify();


                    dataGridView1.CurrentRow.Cells["UnderDeliveryQnt"].Value = dtData.Rows[0]["UnderDeliveryQnt"].Stringify();
                    dataGridView1.CurrentRow.Cells["UnderDeliveryQnt"].Value = dtData.Rows[0]["BuyPrice"].Stringify();

                    dataGridView1.CurrentRow.Cells["DiscountType"].Value = (byte)DiscountType.Percentage;
                }
                catch (Exception ex)
                {
                }


                try
                {
                    ms = new MemoryStream();
                    if (dtData.Rows[0]["Picture"].ToText() != "")
                    {
                        SqlBytes bytes = new SqlBytes((byte[])dtData.Rows[0]["Picture"]);
                        img = (byte[])dtData.Rows[0]["Picture"];
                        try
                        {
                            dataGridView1.CurrentRow.Cells["Image"].Value = img;
                            dataGridView1.CurrentRow.Height = 55;
                        }
                        catch (Exception ex)
                        {
                        }
                    }
                }
                catch { }
                try
                {
                    if (ProSetting.ItemsTax)
                    {
                        var itemVatRate = dtData.Rows[0]["Tax"].ToDecimal();

                        dataGridView1.CurrentRow.Cells["ItemTax"].Value = itemVatRate.NormalizeDecimalPlaces(ProSetting.Round).Stringify();
                    }
                    else
                    {
                        dataGridView1.CurrentRow.Cells["ItemTax"].Value = "0";
                    }
                }
                catch (Exception ex)
                {
                }


                if (ProSetting.SkipQuantityAssemblingOfAnItem || dtItemComponent.Rows.Count > 0)
                {
                    if (!_dcItemComponents.Keys.Any(itm=> itm.Key == Convert.ToInt32(ItemIDbyBarcode) 
                        && itm.Value == StoreCombo.SelectedValue.ToInt32()) && dtItemComponent.Rows.Count > 0)
                    {
                        _dcItemComponents.Add(new KeyValuePair<int, int>(ItemIDbyBarcode.ToInt32(), StoreCombo.SelectedValue.ToInt32()),
                            dtItemComponent);
                    }
                }
            }
            catch (Exception ex)
            {
            }
            finally
            {
                ReleaseCellValueChanged();
            }


            ItemIDbyBarcode = ""; ItemBarcode = ""; underDelev = false; Qnt = 1;
            if (!name)
            {
                if (!ProSetting.Barcode)
                    SendKeys.Send("{ENTER}");
            }
            //if (ProSetting.OnQuantity)
            //{
            //    dataGridView1.CurrentCell = dataGridView1.CurrentRow.Cells["Quantity"];
            //}

            //else
            //{
            //    try
            //    {
            //        SendKeys.Send("{ENTER}");
            //    }
            //    catch { }
            //}
        }
        private void UnitNameCellValueChanged(DataGridViewCellEventArgs e)
        {
            try
            {
                var dtData = Codes.Search2(
                    @"
select dbo.ItemsUnit.UnitID, 
dbo.Units.Name AS UnitName,
dbo.ItemsUnit.Price, 
dbo.ItemsUnit.PriceInter, 
dbo.ItemsUnit.HalfPrice, 
dbo.ItemsUnit.Gomla1, 
dbo.ItemsUnit.Gomla2, 
dbo.ItemsUnit.ItMain, 
 (CASE WHEN dbo.ItemsUnit.ItMain=1 
and isnull((Select IsNull(dbo.Store.Price,0) from Store where ItemID =ItemsUnit.ItemId 
and StoreId='" + (dataGridView1.CurrentRow.Cells["StoreId"].Value == null
                        ? StoreCombo.SelectedValue.Stringify()
                        : dataGridView1.CurrentRow.Cells["StoreId"].Value.Stringify()) + @"' ),0) > 0 
THEN (Select IsNull(dbo.Store.Price,0) from Store where ItemID =ItemsUnit.ItemId 
and StoreId='" + (dataGridView1.CurrentRow.Cells["StoreId"].Value == null
                        ? StoreCombo.SelectedValue.Stringify()
                        : dataGridView1.CurrentRow.Cells["StoreId"].Value.Stringify()) + @"' ) 
ELSE  dbo.ItemsUnit.BuyPrice End) as BuyPrice ,
isnull(discountincoming,0) as discountincoming,
dbo.Items.Tax,
dbo.Items.Picture,
ItemsUnit.Barcode,
Items.StoreCode,
Isnull(IsInDiscountList,0) as IsInDiscountList
FROM         dbo.ItemsUnit INNER JOIN
                      dbo.Units ON dbo.ItemsUnit.UnitID = dbo.Units.ID INNER JOIN
                      dbo.Items ON dbo.ItemsUnit.ItemID = dbo.Items.ID 
where ItemsUnit.ItemID ='" + dataGridView1.CurrentRow.Cells["ItemID"].Value.Stringify() + "' "
                    + "and Units.Name ='" + dataGridView1.CurrentRow.Cells["mm"].Value.Stringify() + "'");
                if (dtData.Rows.Count == 0)
                {
                    MessageBox.Show(Tr.M2.m822, Tr.M1.error, MessageBoxButtons.OK, MessageBoxIcon.Error);
                    try
                    {
                        dataGridView1.NotifyCurrentCellDirty(false);
                        dataGridView1.EndEdit();
                        dataGridView1.NotifyCurrentCellDirty(true);

                        try
                        {
                            dataGridView1.Rows.Remove(dataGridView1.CurrentRow);
                        }
                        catch (Exception exc)
                        {
                        }
                        dataGridView1.NotifyCurrentCellDirty(false);

                        if (ProSetting.BarcodeOrItem == "كود الصنف")
                        {
                            dataGridView1.CurrentCell = dataGridView1.CurrentRow.Cells["Barcode"];
                            SendKeys.Send("{ENTER}");

                        }
                        else if (ProSetting.BarcodeOrItem == "اسم الصنف")
                        {
                            dataGridView1.CurrentCell = dataGridView1.Rows[dataGridView1.RowCount - 1].Cells[2];
                            dataGridView1.CurrentCell.Selected = true;
                            SendKeys.Send("{ENTER}");
                        }
                        else
                        {
                            var index = dataGridView1.CurrentRow.Index + 1 >= dataGridView1.RowCount
                               ? dataGridView1.RowCount - 1
                               : dataGridView1.CurrentRow.Index + 1;

                            var colIndex = index == dataGridView1.RowCount - 1
                                ? _lastAddItemColumnIndex
                                : dataGridView1.CurrentCell.ColumnIndex;

                            dataGridView1.CurrentCell = dataGridView1.Rows[index].Cells[colIndex];
                            dataGridView1.CurrentCell.Selected = true;
                            SendKeys.Send("{ENTER}");
                        }

                        ItemIDbyBarcode = "";
                        ItemBarcode = "";
                        underDelev = false;
                        Qnt = 1;
                    }
                    catch (Exception ex)
                    {
                    }
                    return;

                }

                var isInDiscountList = Convert.ToBoolean(dtData.Rows[0]["IsInDiscountList"])
                                       && ProSetting.salesByList;
                var dtStoreQnt = Codes
                                   .Search2("select isnull(sum(Quantity),0) from Store where ItemID ='" +
                                            dataGridView1.CurrentRow.Cells["ItemID"].Value +
                                            "' and StoreID ='" + (dataGridView1.CurrentRow.Cells["StoreId"].Value == null
                                                ? StoreCombo.SelectedValue.Stringify()
                                                : dataGridView1.CurrentRow.Cells["StoreId"].Value.Stringify()) + "'");
                var unitFactor = dtData.Rows[0]["ItMain"].ToDecimal();


                var QtyStore = (dtStoreQnt.Rows.Count == 0 || unitFactor == 0
                    ? 0
                    : dtStoreQnt.Rows[0][0].ToDecimal() / unitFactor).NormalizeDecimalPlaces();

                try
                {
                    HandleCellValueChanged();

                    dataGridView1.CurrentRow.Cells["Barcode"].Value = dtData.Rows[0]["Barcode"].Stringify();
                }
                catch (Exception ex)
                {
                }
                finally
                {
                    ReleaseCellValueChanged();
                }

                decimal q = 0;
                decimal quanbyBarc = 0;
                decimal currentrowQty = 0;
                decimal allItemQty = 0;
                //var firedIndexQty = Convert.ToDecimal(dataGridView1.CurrentRow.Cells["Quantity"].Value)
                //                        * Convert.ToDecimal(dataGridView1.CurrentRow.Cells["mainIt"].Value);


                currentrowQty =
                   dataGridView1.CurrentRow.Cells["Quantity"].Value.ToDecimal().NormalizeDecimalPlaces();

                if (dataGridView1.CurrentRow.Cells["ItemColor"].Value.ToText() == "")
                {
                    var cIndex = dataGridView1.CurrentRow.Index + 1;
                    ItemColor = AutomaticColorTextInSales ? cIndex.Stringify() : "";
                }
                else
                {
                    ItemColor = dataGridView1.CurrentRow.Cells["ItemColor"].Value.ToText();
                }

                for (var i = 1; i < dataGridView1.Rows.Count; i++)
                {
                    var quantitynotEnough = false;

                    var quantityUpdated = false;
                    if (string.IsNullOrEmpty(dataGridView1.Rows[i - 1].Cells["ItemID"].Value.Stringify())
                        || string.IsNullOrEmpty(dataGridView1.Rows[i - 1].Cells["StoreID"].Value.Stringify()))
                        continue;

                    if (int.Parse(dataGridView1.Rows[i - 1].Cells["ItemID"].Value.Stringify())
                        == int.Parse(dataGridView1.CurrentRow.Cells["ItemID"].Value.Stringify())
                        && int.Parse(dataGridView1.Rows[i - 1].Cells["StoreID"].Value.Stringify())
                        == (dataGridView1.CurrentRow.Cells["StoreId"].Value == null
                            ? int.Parse(StoreCombo.SelectedValue.Stringify())
                            : int.Parse(dataGridView1.CurrentRow.Cells["StoreId"].Value.Stringify())))
                    {
                        if (dataGridView1.CurrentRow.Index != i - 1)
                        {
                            q +=
                            Math.Round((Convert.ToDecimal(dataGridView1.Rows[i - 1].Cells["Quantity"].Value)
                                 * Convert.ToDecimal(dataGridView1.Rows[i - 1].Cells["mainIt"].Value)), ProSetting.Round, MidpointRounding.AwayFromZero);

                        }
                        var sameColor = AutomaticColorTextInSales
                           ? dataGridView1.Rows[i - 1].Cells["ItemColor"].Value.ToInt32() == dataGridView1.CurrentRow.Cells["ItemColor"].Value.ToInt32()
                           : dataGridView1.Rows[i - 1].Cells["ItemColor"].Value.ToText() == dataGridView1.CurrentRow.Cells["ItemColor"].Value.ToText();
                        if (sameColor)
                        {
                            allItemQty += dataGridView1.Rows[i - 1].Cells["Quantity"].Value.ToDecimal();
                        }
                        if (dataGridView1.Rows[i - 1].Cells["Barcode"].Value.ToText() == dataGridView1.CurrentRow.Cells["Barcode"].Value.ToText()
                            && sameColor)
                        {

                            quanbyBarc +=
                                (
                               dtData.Rows[0]["ItMain"].ToDecimal() ==
                               dataGridView1.Rows[i - 1].Cells["mainIt"].Value.ToDecimal()
                               ? dataGridView1.Rows[i - 1].Cells["Quantity"].Value.ToDecimal()
                               : dtData.Rows[0]["ItMain"].ToDecimal() != 1
                                    ? (dataGridView1.Rows[i - 1].Cells["Quantity"].Value.ToDecimal()
                                        / dtData.Rows[0]["ItMain"].ToDecimal())
                                    : (dataGridView1.Rows[i - 1].Cells["Quantity"].Value.ToDecimal()
                                        * dataGridView1.Rows[i - 1].Cells["mainIt"].Value.ToDecimal())
                            );
                        }

                        if (!Convert.ToBoolean(
                            Codes.Search2("select Khadamy from Items where ID = " +
                                          "'" + dataGridView1.CurrentRow.Cells["ItemID"].Value + "' "
                                          + "and Items.Active = 1").Rows[0][0].Stringify()))
                        {

                            //var storeQnt = (Convert.ToDecimal(dataGridView1.Rows[i - 1]
                            //                    .Cells["qntStore"]
                            //                    .Value)
                            //                * Convert.ToDecimal(dataGridView1.Rows[i - 1]
                            //                    .Cells["mainIt"]
                            //                    .Value));

                            //var quantitySum = q + firedIndexQty;

                            //if (storeQnt
                            //    < quantitySum
                            //    && !ProSetting.StoreMinus)
                            //{
                            //    MessageBox.Show(language == "en"
                            //        ? "This quantity cannot be added to the invoice because the item's balance is not enough"
                            //        : "لا يمكن إضافة هذه الكمية للفاتورة لأن رصيد الصنف لا يكفي");
                            //    quantitynotEnough = true;
                            //}
                            //else
                            //{

                            if ((sameColor
                                 && dataGridView1.Rows[i - 1].Cells["Barcode"].Value.Stringify()
                                 == dataGridView1.CurrentRow.Cells["Barcode"].Value.Stringify())
                                && dataGridView1.CurrentRow.Index != i - 1)
                            {
                                dataGridView1.NotifyCurrentCellDirty(false);
                                dataGridView1.EndEdit();
                                dataGridView1.NotifyCurrentCellDirty(true);

                                var removedIndex = dataGridView1.CurrentRow.Index <= i - 1
                                    ? i - 1
                                    : dataGridView1.CurrentRow.Index;

                                try
                                {
                                    if (ProSetting.SkipQuantityAssemblingOfAnItem)
                                    {
                                        var currentitemID = dataGridView1.Rows[removedIndex]
                                               .Cells["ItemID"].Value.ToInt32();
                                        var currentitemStoreID = dataGridView1.Rows[removedIndex]
                                           .Cells["StoreID"].Value.ToInt32();
                                        var deletedItem = new KeyValuePair<int, int>(currentitemID, currentitemStoreID);

                                        _dcItemComponents.Remove(deletedItem);
                                    }
                                }
                                catch (Exception ex)
                                {
                                }

                                dataGridView1.Rows.RemoveAt(removedIndex);
                                dataGridView1.NotifyCurrentCellDirty(false);
                                try
                                {
                                    HandleCellValueChanged();
                                    dataGridView1.Rows[e.RowIndex].Cells["mainIt"].Value =
                                        dtData.Rows[0]["ItMain"].Stringify();

                                    dataGridView1.Rows[(e.RowIndex < i - 1 ? e.RowIndex : i - 1)]
                                        .Cells["qntStore"].Value = QtyStore.NormalizeDecimalPlaces().Stringify();

                                }
                                catch (Exception ex)
                                {
                                }
                                finally
                                {
                                    ReleaseCellValueChanged();
                                }

                                try
                                {
                                    var qnt = dtData.Rows[0]["ItMain"].ToDecimal() == 1
                                        ? 1
                                        : currentrowQty;
                                    var quantityByBarcode = (e.RowIndex > i - 1 ? quanbyBarc + qnt : quanbyBarc).NormalizeDecimalPlaces();
                                    if (quantityByBarcode != allItemQty)
                                    {
                                        var result = FrmMessageDialog.ShowDialog(Program.language != "en" ? "هل تريد جمع كمية الصنف لوحدة واحده بدون تحويل الكمية بالمعامل بحيث تكون " + allItemQty.Stringify()
                                            + Environment.NewLine
                                            + "أم تريد تحويل الكمية بمعامل الوحدة المحددة بحيث تكون " + quantityByBarcode.Stringify()
                                            + Environment.NewLine
                                            + "قم بالضغط على إحدي الخيارين .."
                                            : "Do you want to sum the quantity of the item to one unit without converting the quantity by a factor so that it will be " + allItemQty.Stringify()
                                            + Environment.NewLine
                                            + "Or do you want to convert the quantity by the specified unit factor so that it will be " + quantityByBarcode.Stringify()
                                            + Environment.NewLine
                                            + "Click on one of the two options ..", "", this, new[] { "جمع الكمية بدون تحويل", "فم بتحويل الكمية للوحدة المحددة" }, MessageBoxIcon.Question, DialogResult.OK, DialogResult.Ignore);
                                        dataGridView1.Rows[(e.RowIndex < i - 1 ? e.RowIndex : i - 1)]
                                            .Cells["Quantity"].Value = result == DialogResult.OK ? allItemQty.Stringify() : quantityByBarcode.Stringify();
                                    }
                                    // currentrowQty.ToString("F" + ProSetting.Round);

                                    quantityUpdated = true;

                                }
                                catch (Exception exx)
                                {
                                }

                                dataGridView1.Rows[(e.RowIndex < i - 1 ? e.RowIndex : i - 1)]
                                        .Cells["ItemStoreCode"].Value =
                                    dtData.Rows[0]["StoreCode"].Stringify();
                                if (ProSetting.BarcodeOrItem == "كود الصنف")
                                {
                                    dataGridView1.CurrentCell = dataGridView1.CurrentRow.Cells["Barcode"];
                                    SendKeys.Send("{ENTER}");


                                }
                                else if (ProSetting.BarcodeOrItem == "اسم الصنف")
                                {
                                    dataGridView1.CurrentCell = dataGridView1.Rows[dataGridView1.RowCount - 1].Cells[2];
                                    dataGridView1.CurrentCell.Selected = true;
                                    SendKeys.Send("{ENTER}");
                                }
                                else
                                {
                                    var index = dataGridView1.CurrentRow.Index + 1 >= dataGridView1.RowCount
                                        ? dataGridView1.RowCount - 1
                                        : dataGridView1.CurrentRow.Index + 1;

                                    var colIndex = index == dataGridView1.RowCount - 1
                                        ? _lastAddItemColumnIndex
                                        : dataGridView1.CurrentCell.ColumnIndex;

                                    dataGridView1.CurrentCell = dataGridView1.Rows[index].Cells[colIndex];
                                    dataGridView1.CurrentCell.Selected = true;
                                    SendKeys.Send("{ENTER}");
                                }

                                if (e.RowIndex > i - 1)
                                {
                                    ItemIDbyBarcode = "";
                                    ItemBarcode = "";
                                    underDelev = false;
                                    Qnt = 1;
                                    return;
                                }
                                else
                                {
                                    dataGridView1.CurrentCell = dataGridView1
                                        .Rows[(e.RowIndex < i - 1 ? e.RowIndex : i - 1)]
                                        .Cells["mm"];
                                    break;
                                }
                            }

                            //}
                        }
                        else
                        {

                            if ((sameColor
                                && dataGridView1.Rows[i - 1].Cells["Barcode"].Value.Stringify()
                                 == dataGridView1.CurrentRow.Cells["Barcode"].Value.Stringify())
                                && dataGridView1.CurrentRow.Index != i - 1)
                            {
                                if (ProSetting.AltersameItemininvoice)
                                    MessageBox.Show(Tr.M1.m0260);


                                try
                                {
                                    HandleCellValueChanged();

                                    dataGridView1.Rows[e.RowIndex].Cells["mainIt"].Value =
                                        dtData.Rows[0]["ItMain"].Stringify();

                                    dataGridView1.Rows[(e.RowIndex < i - 1 ? e.RowIndex : i - 1)]
                                        .Cells["qntStore"].Value = QtyStore.NormalizeDecimalPlaces().Stringify();

                                }
                                catch (Exception ex)
                                {
                                }
                                finally
                                {
                                    ReleaseCellValueChanged();
                                }
                                try
                                {
                                    dataGridView1.Rows[(e.RowIndex < i - 1 ? e.RowIndex : i - 1)]
                                            .Cells["Quantity"].Value = currentrowQty.NormalizeDecimalPlaces().Stringify();
                                    quantityUpdated = true;
                                }
                                catch (Exception exx)
                                {
                                }
                            }
                        }

                        if ((sameColor
                            && dataGridView1.Rows[i - 1].Cells["Barcode"].Value.Stringify() == dataGridView1.CurrentRow.Cells["Barcode"].Value.Stringify()
                            && dataGridView1.CurrentRow.Index != i - 1) || quantitynotEnough)
                        {
                            try
                            {
                                if (ProSetting.SkipQuantityAssemblingOfAnItem)
                                {
                                    var currentitemID = dataGridView1.Rows[dataGridView1.CurrentRow.Index]
                                                .Cells["ItemID"].Value.ToInt32();
                                    var currentitemStoreID = dataGridView1.Rows[dataGridView1.CurrentRow.Index]
                                       .Cells["StoreID"].Value.ToInt32();
                                    var deletedItem = new KeyValuePair<int, int>(currentitemID, currentitemStoreID);

                                    _dcItemComponents.Remove(deletedItem);
                                }
                            }
                            catch (Exception ex)
                            {
                            }
                            dataGridView1.NotifyCurrentCellDirty(false);
                            dataGridView1.EndEdit();
                            dataGridView1.NotifyCurrentCellDirty(true);

                            try
                            {
                                dataGridView1.Rows.Remove(dataGridView1.CurrentRow);
                            }
                            catch (Exception exc)
                            {
                            }
                            dataGridView1.NotifyCurrentCellDirty(false);

                            if (ProSetting.BarcodeOrItem == "كود الصنف")
                            {
                                dataGridView1.CurrentCell = dataGridView1.CurrentRow.Cells["Barcode"];
                                SendKeys.Send("{ENTER}");

                            }
                            else if (ProSetting.BarcodeOrItem == "اسم الصنف")
                            {
                                dataGridView1.CurrentCell = dataGridView1.Rows[dataGridView1.RowCount - 1].Cells[2];
                                dataGridView1.CurrentCell.Selected = true;
                                SendKeys.Send("{ENTER}");
                            }
                            else
                            {
                                var index = dataGridView1.CurrentRow.Index + 1 >= dataGridView1.RowCount
                               ? dataGridView1.RowCount - 1
                               : dataGridView1.CurrentRow.Index + 1;

                                var colIndex = index == dataGridView1.RowCount - 1
                                    ? _lastAddItemColumnIndex
                                    : dataGridView1.CurrentCell.ColumnIndex;

                                dataGridView1.CurrentCell = dataGridView1.Rows[index].Cells[colIndex];
                                dataGridView1.CurrentCell.Selected = true;
                                SendKeys.Send("{ENTER}");
                            }

                            ItemIDbyBarcode = "";
                            ItemBarcode = "";
                            underDelev = false;
                            Qnt = 1;
                            return;
                        }
                    }

                    //}
                    if (i != dataGridView1.RowCount - 1)
                        continue;

                    if (quantityUpdated || quantitynotEnough)
                        continue;



                    try
                    {
                        HandleCellValueChanged();

                        dataGridView1.Rows[e.RowIndex].Cells["mainIt"].Value =
                            dtData.Rows[0]["ItMain"].Stringify();

                        dataGridView1.Rows[(e.RowIndex < i - 1 ? e.RowIndex : i - 1)].Cells["qntStore"]
                            .Value = QtyStore.NormalizeDecimalPlaces().Stringify();

                    }
                    catch (Exception ex)
                    {
                    }
                    finally
                    {
                        ReleaseCellValueChanged();
                    }
                    try
                    {
                        var newQnt = QtyStore >= 1
                            ? currentrowQty < 1
                                ? 1 : currentrowQty
                            : QtyStore == 0 ? 1 : QtyStore;

                        dataGridView1.Rows[(e.RowIndex < i - 1 ? e.RowIndex : i - 1)].Cells["Quantity"]
                            .Value = newQnt.NormalizeDecimalPlaces().Stringify();
                        // (e.RowIndex > i - 1 ? quanbyBarc + currentrowQty : quanbyBarc).Stringify();
                        quantityUpdated = true;
                    }
                    catch (Exception exx)
                    {
                    }
                }

                var dtUnitPrice = Codes.Search2(
                    "select UnitPrice,id from sales where ItemID='" +
                    dataGridView1.CurrentRow.Cells["ItemID"].Value.Stringify() + "' and UnitId = '" +
                    dtData.Rows[0]["UnitID"].Stringify() + "' and ClientID=" + ClientCombo.SelectedValue +
                    "  ORDER BY id DESC");

                dataGridView1.CurrentRow.Cells["ItemBuyPrice"].Value = dtData.Rows[0]["BuyPrice"].ToDecimal().NormalizeDecimalPlaces();
                dataGridView1.CurrentRow.Cells["buyPrice"].Value =
                    isInDiscountList
                    ? (dtData.Rows[0]["BuyPrice"].ToDecimal() * (1 - dtData.Rows[0]["discountincoming"].ToDecimal() / 100)).NormalizeDecimalPlaces()
                    : dtData.Rows[0]["BuyPrice"].ToDecimal().NormalizeDecimalPlaces();

                if (!isInDiscountList
                    && ProSetting.ClientPrice
                    && !ProSetting.ClientPricePilot
                    && ClientCombo.SelectedValue.ToInt32() != ProSetting.NakdiClient
                    && dtUnitPrice.Rows.Count > 0)
                {
                    dataGridView1.CurrentRow.Cells["UnitPrice"].Value =
                        Math.Round(Convert.ToDecimal(dtUnitPrice.Rows[0][0].Stringify()),
                            ProSetting.Round
                            , MidpointRounding.AwayFromZero);
                }
                else
                {
                    var itemUnitPrice = 0M;

                    if (BillKindCom.Text == "قطاعي")
                    {
                        itemUnitPrice = dtData.Rows[0]["Price"].ToDecimal();

                        dataGridView1.CurrentRow.Cells["UnitPrice"].Value = itemUnitPrice.NormalizeDecimalPlaces(ProSetting.Round).Stringify();

                    }
                    else if (BillKindCom.Text == "جملة")
                    {
                        itemUnitPrice = dtData.Rows[0]["PriceInter"].ToDecimal();

                    }
                    else if (BillKindCom.Text == "نصف جملة")
                    {
                        itemUnitPrice = dtData.Rows[0]["HalfPrice"].ToDecimal();

                    }
                    else if (BillKindCom.Text == "جملة 1")
                    {
                        itemUnitPrice = dtData.Rows[0]["Gomla1"].ToDecimal();

                    }
                    else if (BillKindCom.Text == "جملة 2")
                    {
                        itemUnitPrice = dtData.Rows[0]["Gomla2"].ToDecimal();
                    }
                    dataGridView1.CurrentRow.Cells["UnitPrice"].Value = itemUnitPrice.NormalizeDecimalPlaces(ProSetting.Round).Stringify();
                }

                try
                {
                    HandleCellValueChanged();
                    decimal TaxValue = 0M, itemtotal = 0M, itemDiscount = 0M, netSale = 0M;
                    itemtotal = Math.Round(
                        (Convert.ToDecimal(dataGridView1.CurrentRow.Cells["UnitPrice"].Value)
                         * Convert.ToDecimal(dataGridView1.CurrentRow.Cells["Quantity"].Value))
                        , ProSetting.Round
                        , MidpointRounding.AwayFromZero);

                    var itemDiscountType =
                        (DiscountType)Convert.ToByte(dataGridView1.CurrentRow.Cells["DiscountType"]
                            .Value);
                    itemDiscount = itemDiscountType == DiscountType.Percentage
                        ? Math.Round((itemtotal
                                      * Convert.ToDecimal(dataGridView1.CurrentRow.Cells["Discount"].Value) / 100),
                            ProSetting.Round
                            , MidpointRounding.AwayFromZero)
                        : Math.Round(
                            Convert.ToDecimal(dataGridView1.CurrentRow.Cells["DiscountValue"].Value)
                            , ProSetting.Round
                            , MidpointRounding.AwayFromZero);

                    netSale = Math.Round((itemtotal - itemDiscount)
                        , ProSetting.Round
                        , MidpointRounding.AwayFromZero);

                    if (ProSetting.ItemsAdditionValue)
                    {
                        var additionValue = Convert.ToDecimal(dataGridView1.CurrentRow.Cells["AdditionValue"].Value)
                                            * Convert.ToDecimal(dataGridView1.CurrentRow.Cells["Quantity"].Value);

                        netSale = netSale + additionValue;
                    }
                    else if (ProSetting.ItemsTax)
                    {
                        try
                        {
                            var itemTax = dataGridView1.CurrentRow.Cells["ItemTax"].Value == null
                                ? 0
                                : Convert.ToDecimal(dataGridView1.CurrentRow.Cells["ItemTax"].Value);
                            TaxValue = Math.Round(
                                ((ProSetting.DarebaAfterDiscount ? netSale : itemtotal) * itemTax / 100)
                                , ProSetting.Round
                                , MidpointRounding.AwayFromZero);
                        }
                        catch
                        {
                        }
                    }

                    try
                    {
                        var itemTotalPrice = (netSale + TaxValue);
                        dataGridView1.CurrentRow.Cells["TotalPrice"].Value = itemTotalPrice.NormalizeDecimalPlaces(ProSetting.Round).Stringify();


                        if (dataGridView1.CurrentRow.Cells["StoreID"].Value == null)
                            dataGridView1.CurrentRow.Cells["StoreID"].Value = StoreCombo.SelectedValue.Stringify();

                        var itemUnitFactor = dtData.Rows[0]["ItMain"].ToDecimal();
                        dataGridView1.CurrentRow.Cells["mainIt"].Value = itemUnitFactor == 0 ? 1 : itemUnitFactor;

                        var buyPrice = dtData.Rows[0]["BuyPrice"].ToDecimal();
                        dataGridView1.CurrentRow.Cells["ItemBuyPrice"].Value = buyPrice.NormalizeDecimalPlaces();
                        dataGridView1.CurrentRow.Cells["buyPrice"].Value = isInDiscountList
                    ? (buyPrice * (1 - dtData.Rows[0]["discountincoming"].ToDecimal() / 100)).NormalizeDecimalPlaces()
                    : buyPrice.NormalizeDecimalPlaces();


                        dataGridView1.CurrentRow.Cells["TotalBuy"].Value =
                                (dataGridView1.CurrentRow.Cells["Quantity"].Value.ToDecimal() *
                                  dataGridView1.CurrentRow.Cells["buyPrice"].Value.ToDecimal()).NormalizeDecimalPlaces().Stringify();

                        dataGridView1.CurrentRow.Cells["Rebhea"].Value = Math
                            .Round(
                                Convert.ToDecimal(dataGridView1.CurrentRow.Cells["TotalPrice"].Value.Stringify()) -
                                Convert.ToDecimal(TaxValue.Stringify()) - Convert.ToDecimal(dataGridView1.CurrentRow
                                    .Cells["TotalBuy"].Value.Stringify()),
                                ProSetting.Round, MidpointRounding.AwayFromZero)
                            .ToString("F" + ProSetting.Round);

                        dataGridView1.CurrentRow.Cells["ItemStoreCode"].Value =
                            dtData.Rows[0]["StoreCode"].Stringify();

                        dataGridView1.CurrentRow.Cells["qntStore"].Value = QtyStore.NormalizeDecimalPlaces().Stringify();


                        var itemQnt = dataGridView1.CurrentRow.Cells["Quantity"].Value.ToDecimal();
                        var itemFactor = dataGridView1.CurrentRow.Cells["mainIt"].Value.ToDecimal();
                        var qntByMainUnit = (itemQnt * itemFactor);
                        dataGridView1.CurrentRow.Cells["countItemmain"].Value = qntByMainUnit.NormalizeDecimalPlaces().Stringify();


                        var itemMainUnitPrice = dataGridView1.CurrentRow.Cells["UnitPrice"].Value.ToDecimal()
                            / dataGridView1.CurrentRow.Cells["mainIt"].Value.ToDecimal();

                        dataGridView1.CurrentRow.Cells["MainUnitPrice"].Value = itemMainUnitPrice.NormalizeDecimalPlaces(ProSetting.Round).Stringify();

                        ItemIDbyBarcode = "";
                        ItemBarcode = "";
                        underDelev = false;
                        Qnt = 1;
                    }
                    catch
                    {
                    }
                }
                catch (Exception wx)
                {
                }
                finally
                {
                    ReleaseCellValueChanged();
                }

                try
                {
                    if (ProSetting.BarcodeOrItem == "كود الصنف")
                    {
                        dataGridView1.CurrentCell = dataGridView1.CurrentRow.Cells["Barcode"];
                        SendKeys.Send("{ENTER}");

                    }
                    else if (ProSetting.BarcodeOrItem == "اسم الصنف")
                    {
                        dataGridView1.CurrentCell = dataGridView1.Rows[dataGridView1.RowCount - 1].Cells[2];
                        dataGridView1.CurrentCell.Selected = true;
                        SendKeys.Send("{ENTER}");
                    }
                    else
                    {
                        var index = dataGridView1.CurrentRow.Index + 1 >= dataGridView1.RowCount
                                  ? dataGridView1.RowCount - 1
                                  : dataGridView1.CurrentRow.Index + 1;

                        var colIndex = index == dataGridView1.RowCount - 1
                            ? _lastAddItemColumnIndex
                            : dataGridView1.CurrentCell.ColumnIndex;

                        dataGridView1.CurrentCell = dataGridView1.Rows[index].Cells[colIndex];
                        dataGridView1.CurrentCell.Selected = true;
                        SendKeys.Send("{ENTER}");
                    }

                    ItemIDbyBarcode = "";
                    ItemBarcode = "";
                    underDelev = false;
                    Qnt = 1;
                }
                catch
                {
                }
            }
            catch (Exception ex)
            {
            }
        }
        private void QuantityCellValueChanged(DataGridViewCellEventArgs e)

        {
            decimal testQ = 0;
            var beforeChangeQnt = !beforeQnt.HasValue
                ? (dataGridView1.Rows[e.RowIndex].Cells["countItemmain"].Value.ToDecimal()
                             / dataGridView1.Rows[e.RowIndex].Cells["mainIt"].Value.ToDecimal())
                : beforeQnt.Value;

            if (beforeChangeQnt == 0)
                beforeChangeQnt = 1;
            if (dataGridView1.Rows[e.RowIndex].Cells["Quantity"].Value != null)
            {

                try
                {
                    HandleCellValueChanged();

                    if (ProSetting.ColorOrSerial == "السيريال" && dataGridView1.Rows[e.RowIndex].Cells["ItemColor"].Value.ToText() != "" && Convert.ToDecimal(dataGridView1.Rows[e.RowIndex].Cells["Quantity"].Value) > 1)
                    {
                        MessageBox.Show(Tr.M1.m0906);
                        dataGridView1.Rows[e.RowIndex].Cells["Quantity"].Value = 1;

                    }
                    if (decimal.TryParse(dataGridView1.Rows[e.RowIndex].Cells["Quantity"].Value.Stringify(), out testQ))
                    {
                        if (Convert.ToDecimal(dataGridView1.Rows[e.RowIndex].Cells["Quantity"].Value) <= 0)
                        {

                            dataGridView1.Rows[e.RowIndex].Cells["Quantity"].Value =
                                beforeChangeQnt == 0M
                                ? "1"
                                : beforeChangeQnt.NormalizeDecimalPlaces().Stringify();

                        }
                        else
                        {
                            var itemQnt = dataGridView1.Rows[e.RowIndex].Cells["Quantity"].Value.ToDecimal();
                            var itemFactor = dataGridView1.Rows[e.RowIndex].Cells["mainIt"].Value.ToDecimal();
                            var qntByMainUnit = (itemQnt * itemFactor);

                            dataGridView1.Rows[e.RowIndex].Cells["Quantity"].Value = itemQnt.NormalizeDecimalPlaces().Stringify();


                            dataGridView1.Rows[e.RowIndex].Cells["countItemmain"].Value = qntByMainUnit.NormalizeDecimalPlaces().Stringify();


                        }
                    }
                    else
                    {
                        dataGridView1.Rows[e.RowIndex].Cells["Quantity"].Value = beforeChangeQnt.NormalizeDecimalPlaces().Stringify();

                    }
                }
                catch (Exception exx)
                {
                }
                finally
                {
                    ReleaseCellValueChanged();
                }
            }
            else
            {
                HandleCellValueChanged();
                try
                {
                    dataGridView1.Rows[e.RowIndex].Cells["Quantity"].Value = beforeChangeQnt.NormalizeDecimalPlaces().Stringify();

                }
                catch (Exception ex)
                {
                }
                finally
                {
                    ReleaseCellValueChanged();
                }
            }
            QuantityChecked = false;
            var isBuyPriceUpdated = false;

            try
            {
                decimal Quantity = 0;
                if (Convert.ToBoolean(Codes.Search2("select Khadamy from Items where ID = '" + dataGridView1.Rows[e.RowIndex].Cells["ItemID"].Value.Stringify() + "' and Items.Active = 1").Rows[0][0].Stringify()) == false)
                {
                    for (int i = 1; i < dataGridView1.Rows.Count; i++)
                    {
                        var itemID = dataGridView1.Rows[i - 1].Cells["ItemID"].Value.ToInt32();
                        var storeId = dataGridView1.Rows[i - 1].Cells["StoreID"].Value.ToInt32();
                        if (itemID != 0
                            && storeId != 0)
                        {
                            if (itemID == dataGridView1.Rows[e.RowIndex].Cells["ItemID"].Value.ToInt32()
                                && storeId == dataGridView1.Rows[e.RowIndex].Cells["StoreID"].Value.ToInt32())
                            {
                                Quantity += (dataGridView1.Rows[i - 1].Cells["Quantity"].Value.ToDecimal()
                                            * dataGridView1.Rows[i - 1].Cells["mainIt"].Value.ToDecimal()).NormalizeDecimalPlaces();
                            }
                        }
                    }
                    if (dataGridView1.Rows[e.RowIndex].Cells["qntStore"].Value != null)
                    {
                        bool quantitynotEnough = false;
                        bool addedToUnderDelivery = false;
                        decimal availableQuantity = 0M;
                        var currentItMain = Convert.ToDecimal(dataGridView1
                            .Rows[e.RowIndex]
                            .Cells["mainIt"].Value);
                        if (ProSetting.SkipQuantityAssemblingOfAnItem)
                        {
                            var ItemItMain = dataGridView1.Rows[e.RowIndex].Cells["mainIt"].Value.ToDecimal();
                            decimal newQuantity;
                            newQuantity = Quantity;
                            var collectedItem = _dcItemComponents.FirstOrDefault(itm => itm.Key.Key ==
                              dataGridView1.Rows[e.RowIndex].Cells["ItemID"].Value.ToInt32()
                              && itm.Key.Value == dataGridView1.Rows[e.RowIndex].Cells["StoreID"].Value.ToInt32());

                            var itemcomponents = collectedItem.Value ?? new DataTable();

                            var itemStoreQntDatatable = itemcomponents.Rows.Count > 0 ? Codes.Search2(
                        @"WITH ItemComponentsCTE AS (
SELECT  Row_Number() Over (Order by ItemsUnit.ItemId,ItemsUnit.ID) as Rn ,
ItemsUnit.ItemID,
ItemsUnit.Barcode,
(Select Name From Items Where ID =ItemsUnit.ItemID) as ItemName,
(Select Name From Units Where ID =ItemsUnit.UnitId) as UnitName,
Isnull((Select Price From Store Where ItemID =ParentITemID and StoreId =  '" + dataGridView1.Rows[e.RowIndex].Cells["StoreID"].Value +
                        @"'),0) as BuyPrice,
 ItemsUnit.ItMain as ComponentItMain,
(
(Case When ItemsUnit.ItMain = 1 
Then Isnull(dbo.Store.Price,0) Else ItemsUnit.BuyPrice END )
" + (!ProSetting.salesByList ? "" : @"
* (1 - ((Select case when Isnull(IsInDiscountList,0) = 0 then 0 
else isnull(discountincoming,0) end from Items Where ID = ItemsUnit.ItemID)/100))
") + @"
)
as ComponentBuyPrice,
Cast((Isnull(dbo.Store.Quantity,0)/ItemsUnit.ItMain) as money) as OriginalComponentStoreQuantity ,
Cast(Qnt as money) as ComponentAssemblingQuantity,
FLOOR(ISNULL(Quantity,0)/(Qnt * ItMain)) as ItemLargestAssembledQuantity,
Isnull((Select Quantity From Store Where ItemID = ParentItemID and StoreId = '" + dataGridView1.Rows[e.RowIndex].Cells["StoreID"].Value +
                        @"'),0) as ItemStoreQuantity,
Case When Sum(Qnt * ItMain) over (partition by ItemsUnit.ItemID) > Quantity then 0 else 1 end as QuantityAvailableStatus,
Isnull(ModifyBuyprice,1) as ModifyBuyprice ,
Isnull(masnyea,0) as masnyea,
(Select Count(*) From Store Where ItemID =ParentITemID and StoreId = '" + dataGridView1.Rows[e.RowIndex].Cells["StoreID"].Value + @"') as AddedToStore,
(Select Khadamy From Items Where ID =ItemsUnit.ItemID) as Khadamy
FROM dbo.ItemsColleting 
LEFT JOIN ItemsUnit 
ON ItemsColleting.ChildItemUnitID = ItemsUnit.Id 
LEFT Join dbo.Store 
ON dbo.ItemsUnit.ItemID = dbo.Store.ItemID  and Store.StoreID = '" + dataGridView1.Rows[e.RowIndex].Cells["StoreID"].Value + @"'
where ParentITemID = '" + dataGridView1.Rows[e.RowIndex].Cells["ItemID"].Value + @"'
),
ValidItemComponentsCTE AS (
    SELECT
        Rn,
        ItemID,
		Barcode,
		ItemName,
		UnitName,
        BuyPrice,
        ComponentBuyPrice,	
        (OriginalComponentStoreQuantity* ComponentItMain -
            (SELECT SUM(ComponentAssemblingQuantity)
             FROM ItemComponentsCTE AS innerCTE
             WHERE innerCTE.ItemID = outerCTE.ItemID
               AND innerCTE.Rn <= outerCTE.Rn) 
            + ComponentAssemblingQuantity)/ ComponentItMain AS ComponentStoreQuantity,
        ComponentAssemblingQuantity,
        ItemLargestAssembledQuantity,
		ItemStoreQuantity,
        ModifyBuyprice,
        masnyea,
		AddedToStore,
        Khadamy
    FROM ItemComponentsCTE AS outerCTE
)
SELECT
    ItemID,
	Barcode,
	ItemName,
	UnitName,
	BuyPrice,
	ComponentBuyPrice,
	ComponentStoreQuantity,
	ComponentAssemblingQuantity,
	CASE 
        WHEN ComponentStoreQuantity < ComponentAssemblingQuantity THEN 0
        ELSE ItemLargestAssembledQuantity end
    ItemLargestAssembledQuantity,
	ItemStoreQuantity,
    CASE 
        WHEN ComponentStoreQuantity < ComponentAssemblingQuantity THEN 0
        ELSE 1
    END AS QuantityAvailableStatus,
    ModifyBuyprice,
	masnyea,
	AddedToStore,
	Khadamy
FROM ValidItemComponentsCTE
ORDER BY Rn;") : Codes.Search2(@"
SELECT dbo.Store.Price,Store.Quantity  as ItemStoreQuantity 
FROM dbo.Items INNER JOIN dbo.Store ON dbo.Items.ID = dbo.Store.ItemID 
where Items.ID = '" + dataGridView1.Rows[e.RowIndex].Cells["ItemID"].Value + @"' 
and Store.StoreID = '" + dataGridView1.Rows[e.RowIndex].Cells["StoreID"].Value + "'");


                            var isItemAssembled = itemcomponents.Rows.Count > 0;

                            var largestAvailableQnt = isItemAssembled
                                ? itemStoreQntDatatable.Rows.OfType<DataRow>()
                                    .Where(dr => !dr["Khadamy"].ToBool()).Min(dr => dr["ItemLargestAssembledQuantity"].ToDecimal())
                                : 0M;

                            var itemStoreQuantity = itemStoreQntDatatable.Rows[0]["ItemStoreQuantity"].ToDecimal();

                            availableQuantity =
                                largestAvailableQnt + (itemStoreQuantity < 0 ? 0 : itemStoreQuantity);

                            var isItemUnderDelivery = dataGridView1
                                       .Rows[e.RowIndex]
                                       .Cells["UnderDelevItem"].Value.ToBool();

                            var storeName = "";
                            try
                            {
                                storeName = ((DataTable)StoreCombo.DataSource)
                                    .Select(
                                        "ID = " + dataGridView1.Rows[e.RowIndex].Cells["StoreID"].Value)
                                    [0][1].Stringify();
                            }
                            catch (Exception exception)
                            {
                            }
                            if (isItemAssembled)
                            {
                                if (!isItemUnderDelivery)
                                {
                                    var notavailbleItems = new List<DataRow>();
                                    if (itemStoreQntDatatable.Rows.Count < itemcomponents.Rows.Count &&
                                        newQuantity > itemStoreQuantity)
                                    {
                                        notavailbleItems = itemcomponents.Rows
                                            .OfType<DataRow>()
                                            .Where(dr =>
                                                itemStoreQntDatatable
                                                    .Select("ItemID =" + dr["ItemID"])
                                                    .Length ==
                                                0)
                                            .ToList();
                                    }

                                    var notavailableItemsQnt = new DataTable();
                                    notavailableItemsQnt.Columns.Add("م", typeof(int));
                                    notavailableItemsQnt.Columns.Add("الباركود");
                                    notavailableItemsQnt.Columns.Add(Tr.M2.item_name);
                                    notavailableItemsQnt.Columns.Add("الوحدة");
                                    if (itemStoreQntDatatable.Rows.Count == itemcomponents.Rows.Count)
                                    {
                                        notavailableItemsQnt.Columns.Add("الكمية المتاحة", typeof(decimal));
                                        notavailableItemsQnt.Columns.Add("الكمية المطلوبة", typeof(decimal));
                                    }

                                    if (notavailbleItems.Count > 0)
                                    {
                                        quantitynotEnough = true;

                                        for (var index = 0; index < notavailbleItems.Count; index++)
                                        {
                                            notavailableItemsQnt.Rows.Add((index + 1),
                                                notavailbleItems[index]["Barcode"],
                                                notavailbleItems[index]["ItemName"],
                                                notavailbleItems[index]["UnitName"]);
                                        }

                                        if (new FrmMessageDialog(
                                                Tr.M1.m1104 +
                                                storeName + Tr.M1.m1103,
                                                Tr.M1.error,
                                                this, DialogResult.Yes, DialogResult.No).ShowDialog() ==
                                            DialogResult.Yes)
                                        {
                                            var result = new FrmItemsNotFound(notavailableItemsQnt,
                                                     "مكونات الصنف الغير موجوده بالمخزن المُباع منه")
                                                 .ShowDialog();
                                            addedToUnderDelivery = result == DialogResult.OK;
                                        }
                                    }
                                    else
                                    {
                                        if (!ProSetting.StoreMinus)
                                        {
                                            try
                                            {
                                                if (newQuantity > availableQuantity)
                                                    notavailbleItems = itemStoreQntDatatable.Rows
                                                        .OfType<DataRow>()
                                                        .Where(dr =>
                                                            Convert.ToDecimal(
                                                                dr["ItemLargestAssembledQuantity"])
                                                            <= (newQuantity <= largestAvailableQnt
                                                                ? largestAvailableQnt
                                                                : newQuantity) && !Convert.ToBoolean(dr["Khadamy"]))
                                                        .ToList();



                                                for (var index = 0; index < notavailbleItems.Count; index++)
                                                {
                                                    notavailableItemsQnt.Rows.Add((index + 1),
                                                        notavailbleItems[index]["Barcode"],
                                                        notavailbleItems[index]["ItemName"],
                                                        notavailbleItems[index]["UnitName"],
                                                        notavailbleItems[index]["ComponentStoreQuantity"].ToDecimal().NormalizeDecimalPlaces(),
                                                        (notavailbleItems[index]["ComponentAssemblingQuantity"].ToDecimal()
                                                        * (newQuantity - availableQuantity)).NormalizeDecimalPlaces()
                                                    );
                                                }

                                                if (notavailableItemsQnt.Rows.Count > 0)
                                                {
                                                    quantitynotEnough = true;
                                                    if (new FrmMessageDialog(
                                                                Tr.M1.m1100 + Environment.NewLine + Tr.M1.m0346,
                                                                Tr.M1.error,
                                                                this, DialogResult.Yes, DialogResult.No)
                                                            .ShowDialog() == DialogResult.Yes)
                                                    {
                                                        var result = new FrmItemsNotFound(
                                                                notavailableItemsQnt,
                                                                "كميات مكونات الصنف التي هي أقل من المطلوب لتجميع الصنف في الفاتورة")
                                                            .ShowDialog();
                                                        addedToUnderDelivery = result == DialogResult.OK;
                                                    }

                                                }
                                                else
                                                {
                                                    if (newQuantity > itemStoreQuantity && itemStoreQuantity > 0)
                                                    {
                                                        var assembledQnt = newQuantity - itemStoreQuantity;
                                                        var updateBuyPriceOFCombinedItem =
                                                           itemStoreQntDatatable.Rows[0]["ModifyBuyprice"].ToBool();
                                                        var masnyea = itemStoreQntDatatable.Rows[0]["masnyea"].ToDecimal();

                                                        if (updateBuyPriceOFCombinedItem)
                                                        {
                                                            var assembledBuyPrice =
                                                                updateBuyPriceOFCombinedItem
                                                                    ? itemStoreQntDatatable.Select().Sum(dr =>
                                                                          dr["ComponentBuyPrice"].ToDecimal()
                                                                          * dr["ComponentAssemblingQuantity"].ToDecimal())
                                                                      + masnyea
                                                                    : itemStoreQntDatatable.Rows[0]["BuyPrice"].ToDecimal();

                                                            var itemBuyPriceInStore =
                                                                beforeChangeQnt <= itemStoreQuantity ?
                                                                dataGridView1.Rows[e.RowIndex]
                                                                    .Cells["buyPrice"].Value.ToDecimal()
                                                                : itemStoreQntDatatable.Rows[0]["BuyPrice"].ToDecimal();

                                                            var itemTotalBuyPriceInStore =
                                                                beforeChangeQnt == itemStoreQuantity
                                                                ? dataGridView1.Rows[e.RowIndex]
                                                                    .Cells["TotalBuy"].Value.ToDecimal()
                                                                : itemStoreQntDatatable.Rows[0]["BuyPrice"].ToDecimal() * itemStoreQuantity;


                                                            var assembledQntTotalBuy = assembledBuyPrice * assembledQnt;
                                                            var newTotalBuy =
                                                                itemTotalBuyPriceInStore + assembledQntTotalBuy;
                                                            var newBuyPrice = newTotalBuy / newQuantity;

                                                            try
                                                            {
                                                                HandleCellValueChanged();


                                                                dataGridView1.Rows[e.RowIndex].Cells["ItemBuyPrice"].Value = newBuyPrice.NormalizeDecimalPlaces().Stringify();
                                                                dataGridView1.Rows[e.RowIndex].Cells["buyPrice"].Value = newBuyPrice.NormalizeDecimalPlaces().Stringify();


                                                                dataGridView1.Rows[e.RowIndex]
                                                                    .Cells["TotalBuy"].Value = newTotalBuy.NormalizeDecimalPlaces().Stringify();

                                                                isBuyPriceUpdated = true;
                                                            }
                                                            catch (Exception ex)
                                                            {
                                                            }
                                                            finally
                                                            {
                                                                ReleaseCellValueChanged();
                                                            }

                                                        }
                                                    }
                                                    else if (itemStoreQuantity > 0)
                                                    {
                                                        HandleCellValueChanged();

                                                        try
                                                        {
                                                            var itemBuyPrice = itemStoreQntDatatable.Rows[0]["BuyPrice"].ToDecimal();
                                                            dataGridView1.Rows[e.RowIndex].Cells["ItemBuyPrice"].Value = itemBuyPrice.NormalizeDecimalPlaces();
                                                            dataGridView1.Rows[e.RowIndex].Cells["buyPrice"].Value = itemBuyPrice.NormalizeDecimalPlaces().Stringify();


                                                            dataGridView1.Rows[e.RowIndex]
                                                                .Cells["TotalBuy"].Value = Convert.ToDecimal(itemStoreQntDatatable.Rows[0]["BuyPrice"]) * newQuantity;
                                                            isBuyPriceUpdated = true;
                                                        }
                                                        catch (Exception ex)
                                                        {
                                                        }
                                                        finally
                                                        {
                                                            ReleaseCellValueChanged();
                                                        }
                                                    }
                                                }
                                            }
                                            catch (Exception exx)
                                            {
                                            }
                                        }
                                    }
                                }
                            }
                            else
                            {
                                if (newQuantity > availableQuantity && !ProSetting.StoreMinus)
                                    if (Convert.ToBoolean(dataGridView1.Rows[e.RowIndex]
                                            .Cells["UnderDelevItem"].Value) == false)
                                    {
                                        if (ProSetting.UniderDelevItem)
                                        {
                                            var isItUnderDeliver = false;
                                            try
                                            {
                                                isItUnderDeliver = Convert.ToBoolean(dataGridView1
                                                    .Rows[e.RowIndex]
                                                    .Cells["UnderDelevItem"].Value.Stringify());
                                            }
                                            catch
                                            {
                                            }

                                            if (!isItUnderDeliver)
                                                MessageBox.Show(Tr.M1.m0366, Tr.M1.alert);


                                            underDelev = true;


                                            try
                                            {
                                                HandleCellValueChanged();

                                                dataGridView1.Rows[e.RowIndex].Cells["UnderDelevItem"].Value =
                                                                                                    true;
                                            }
                                            catch (Exception ex)
                                            {
                                            }
                                            finally
                                            {
                                                ReleaseCellValueChanged();
                                            }
                                        }
                                        else
                                        {
                                            quantitynotEnough = true;

                                            new FrmMessageDialog(
                                                Tr.M1.m1083 +
                                                (!((availableQuantity / ItemItMain).Stringify()
                                                    .Contains("."))
                                                    ? (availableQuantity / ItemItMain).ToString("F0")
                                                    : Convert.ToDecimal((availableQuantity / ItemItMain)
                                                          .Stringify().Split('.')[1]) == 0
                                                        ? (availableQuantity / ItemItMain).ToString(
                                                            "F0")
                                                        : (availableQuantity / ItemItMain).ToString(
                                                            "F" + ProSetting.Round)) +
                                                " " + dataGridView1.Rows[e.RowIndex].Cells["mm"].Value
                                                    .Stringify() + "] " +
                                                "أقل من المطلوب لإضافته في الفاتورة",
                                                Tr.M1.error,
                                                this, DialogResult.OK).ShowDialog();
                                        }
                                    }
                            }
                        }
                        else
                        {

                            availableQuantity = (dataGridView1.Rows[e.RowIndex]
                                                               .Cells["qntStore"].Value.ToDecimal()
                                                           * dataGridView1.Rows[e.RowIndex].Cells["mainIt"].Value.ToDecimal()).NormalizeDecimalPlaces();

                            if (availableQuantity < Quantity.NormalizeDecimalPlaces()
                                && !ProSetting.StoreMinus
                                && !ProSetting.UniderDelevItem)
                            {
                                quantitynotEnough = true;
                                MessageBox.Show(Tr.M2.m448);
                            }

                            if (availableQuantity < Quantity
                                && !ProSetting.StoreMinus
                                && ProSetting.UniderDelevItem
                                && !Convert.ToBoolean(dataGridView1.Rows[e.RowIndex].Cells["UnderDelevItem"].Value))
                            {
                                var isItUnderDeliver = false;
                                try
                                {
                                    isItUnderDeliver = Convert.ToBoolean(dataGridView1.Rows[e.RowIndex]
                                        .Cells["UnderDelevItem"].Value.Stringify());
                                }
                                catch
                                {
                                }

                                if (!isItUnderDeliver)
                                    MessageBox.Show(Tr.M1.m0366, Tr.M1.alert);

                                underDelev = true;


                                try
                                {
                                    HandleCellValueChanged();

                                    dataGridView1.Rows[e.RowIndex].Cells["UnderDelevItem"].Value = true;
                                }
                                catch (Exception ex)
                                {
                                }
                                finally
                                {
                                    ReleaseCellValueChanged();
                                }
                            }

                        }

                        if (addedToUnderDelivery)
                        {

                            try
                            {
                                HandleCellValueChanged();

                                dataGridView1.Rows[e.RowIndex].Cells["UnderDelevItem"].Value = true;
                            }
                            catch (Exception ex)
                            {
                            }
                            finally
                            {
                                ReleaseCellValueChanged();
                            }
                        }
                        else if (quantitynotEnough)
                        {
                            try
                            {
                                HandleCellValueChanged();

                                decimal Qty = 0;

                                if (availableQuantity > 0)
                                {

                                    var availableQuantitybyUnit = Convert.ToDecimal(dataGridView1
                                        .Rows[e.RowIndex]
                                        .Cells["qntStore"].Value);
                                    if (availableQuantitybyUnit <= 0)
                                        availableQuantitybyUnit = availableQuantity / currentItMain;

                                    Qty = availableQuantitybyUnit < 1 && availableQuantitybyUnit > 0
                                          && beforeChangeQnt * currentItMain == 1
                                        ? availableQuantitybyUnit
                                        : (beforeChangeQnt * currentItMain) > availableQuantitybyUnit
                                            ? availableQuantitybyUnit
                                            : Convert.ToDecimal(beforeChangeQnt.Stringify());
                                }
                                else
                                {
                                    try
                                    {
                                        if (ProSetting.SkipQuantityAssemblingOfAnItem)
                                        {
                                            var currentitemID = dataGridView1.Rows[dataGridView1.CurrentRow.Index]
                                                .Cells["ItemID"].Value.ToInt32();
                                            var currentitemStoreID = dataGridView1.Rows[dataGridView1.CurrentRow.Index]
                                               .Cells["StoreID"].Value.ToInt32();
                                            var deletedItem = new KeyValuePair<int, int>(currentitemID, currentitemStoreID);

                                            _dcItemComponents.Remove(deletedItem);
                                        }
                                    }
                                    catch (Exception ex)
                                    {
                                    }
                                    dataGridView1.NotifyCurrentCellDirty(false);
                                    dataGridView1.EndEdit();
                                    dataGridView1.NotifyCurrentCellDirty(true);

                                    try
                                    {
                                        dataGridView1.Rows.Remove(dataGridView1.CurrentRow);
                                    }
                                    catch (Exception exc)
                                    {
                                    }
                                    dataGridView1.NotifyCurrentCellDirty(false);
                                    if (ProSetting.BarcodeOrItem == "كود الصنف")
                                    {
                                        dataGridView1.CurrentCell = dataGridView1.Rows[dataGridView1.RowCount - 1].Cells["Barcode"];
                                        SendKeys.Send("{ENTER}");

                                    }
                                    else if (ProSetting.BarcodeOrItem == "اسم الصنف")
                                    {
                                        dataGridView1.CurrentCell = dataGridView1.Rows[dataGridView1.RowCount - 1].Cells["ItemName"];
                                        dataGridView1.CurrentCell.Selected = true;
                                        SendKeys.Send("{ENTER}");
                                    }
                                    else
                                    {
                                        var index = dataGridView1.CurrentRow.Index + 1 >= dataGridView1.RowCount
                                            ? dataGridView1.RowCount - 1
                                            : dataGridView1.CurrentRow.Index + 1;

                                        var colIndex = index == dataGridView1.RowCount - 1
                                            ? _lastAddItemColumnIndex
                                            : dataGridView1.CurrentCell.ColumnIndex;

                                        dataGridView1.CurrentCell = dataGridView1.Rows[index].Cells[colIndex];
                                        dataGridView1.CurrentCell.Selected = true;

                                        SendKeys.Send("{ENTER}");
                                    }
                                    ItemIDbyBarcode = ""; ItemBarcode = ""; underDelev = false; Qnt = 1;
                                    return;
                                }
                                QuantityChecked = ProSetting.OnQuantity && itemAdded;
                                Quantity = Quantity - dataGridView1.CurrentRow.Cells["Quantity"].Value.ToDecimal() + Qty;
                                dataGridView1.Rows[e.RowIndex].Cells["Quantity"].Value = Qty.NormalizeDecimalPlaces().Stringify();


                            }
                            catch (Exception ex)
                            {
                            }
                            finally
                            {
                                ReleaseCellValueChanged();
                            }
                        }
                    }
                }
                DataTable dtMaxSale = Codes.Search2("select MaxSale from items where Items.Active = 1 and id=" + dataGridView1.Rows[e.RowIndex].Cells["ItemID"].Value.Stringify());
                if (Convert.ToDecimal(Quantity) > Convert.ToDecimal(dtMaxSale.Rows[0][0])
                    && Convert.ToDecimal(dtMaxSale.Rows[0][0]) != 0)
                {
                    var Qty = beforeChangeQnt.ToDecimal();
                    MessageBox.Show(Tr.M1.m0365);
                    try
                    {
                        HandleCellValueChanged();

                        Quantity = Quantity - dataGridView1.Rows[e.RowIndex].Cells["Quantity"].Value.ToDecimal() + Qty;
                        dataGridView1.Rows[e.RowIndex].Cells["Quantity"].Value = Qty.NormalizeDecimalPlaces().Stringify();

                    }
                    catch (Exception ex)
                    {
                    }
                    finally
                    {
                        ReleaseCellValueChanged();
                    }
                }
                if (Convert.ToBoolean(Codes.Search2("select Khadamy from Items where ID = '" + dataGridView1.Rows[e.RowIndex].Cells["ItemID"].Value.Stringify() + "' and Items.Active = 1").Rows[0][0].Stringify()) == false)
                {
                    if (dataGridView1.Rows[e.RowIndex].Cells["qntStore"].Value != null
                        && !ProSetting.SkipQuantityAssemblingOfAnItem)
                    {
                        if (Math.Round(Convert.ToDecimal(dataGridView1.Rows[e.RowIndex].Cells["qntStore"].Value) * Convert.ToDecimal(dataGridView1.Rows[e.RowIndex].Cells["mainIt"].Value), 4) < Math.Round(Quantity, 4)
                            && ProSetting.StoreMinus == false && ProSetting.UniderDelevItem == true
                            && Convert.ToBoolean(dataGridView1.Rows[e.RowIndex].Cells["UnderDelevItem"].Value) == false)
                        {
                            var isItUnderDeliver = false;
                            try
                            {
                                isItUnderDeliver = Convert.ToBoolean(dataGridView1.Rows[e.RowIndex].Cells["UnderDelevItem"].Value.Stringify());
                            }
                            catch
                            {
                            }
                            if (!isItUnderDeliver)
                                MessageBox.Show(Tr.M1.m0366, Tr.M1.alert);
                            HandleCellValueChanged();
                            try
                            {
                                dataGridView1.Rows[e.RowIndex].Cells["UnderDelevItem"].Value = true;
                            }
                            catch (Exception ex)
                            {
                            }
                            finally
                            {
                                ReleaseCellValueChanged();
                            }
                        }
                    }
                }

                var itemtotalprice = Math.Round(
                    (Convert.ToDecimal(dataGridView1.Rows[e.RowIndex].Cells["Quantity"].Value)
                     * Convert.ToDecimal(dataGridView1.Rows[e.RowIndex].Cells["UnitPrice"].Value
                         .Stringify()))
                    , ProSetting.Round
                    , MidpointRounding.AwayFromZero);

                var itemDiscountType =
                    (DiscountType)Convert.ToByte(dataGridView1.Rows[e.RowIndex].Cells["DiscountType"]
                        .Value);

                var discountPercentage = Math.Round(
                    (Convert.ToDecimal(dataGridView1.Rows[e.RowIndex].Cells["Discount"].Value.Stringify()))
                    , ProSetting.Round
                    , MidpointRounding.AwayFromZero);

                var discountValue = itemDiscountType == DiscountType.Percentage
                    ? Math.Round(((itemtotalprice * discountPercentage) / 100)
                    , ProSetting.Round
                    , MidpointRounding.AwayFromZero)
                    : Math.Round(
                        (Convert.ToDecimal(dataGridView1.Rows[e.RowIndex].Cells["DiscountValue"].Value.Stringify()))
                        , ProSetting.Round
                        , MidpointRounding.AwayFromZero);

                var taxPercentage = Convert.ToDecimal(dataGridView1.Rows[e.RowIndex].Cells["ItemTax"].Value);

                decimal TaxValue = 0M;

                var netSale = Math.Round((itemtotalprice - discountValue)
                    , ProSetting.Round
                    , MidpointRounding.AwayFromZero);
                decimal newt = 0;

                if (ProSetting.ItemsAdditionValue)
                {
                    var additionValue = Convert.ToDecimal(dataGridView1.Rows[e.RowIndex].Cells["AdditionValue"].Value)
                                        * Convert.ToDecimal(dataGridView1.Rows[e.RowIndex].Cells["Quantity"].Value);

                    netSale = netSale + additionValue;
                }
                else if (ProSetting.ItemsTax)
                {
                    try
                    {
                        if (ProSetting.DarebaAfterDiscount)
                        {
                            TaxValue = Math.Round((netSale * (taxPercentage / 100))
                                , ProSetting.Round
                                , MidpointRounding.AwayFromZero);
                        }
                        else
                        {
                            TaxValue = Math.Round(((itemtotalprice * taxPercentage) / 100)
                                , ProSetting.Round
                                , MidpointRounding.AwayFromZero);
                        }
                    }
                    catch
                    {
                    }
                }
                newt = Math.Round((netSale + TaxValue)
                    , ProSetting.Round
                    , MidpointRounding.AwayFromZero);
                try
                {
                    HandleCellValueChanged();

                    if (itemDiscountType == DiscountType.Percentage)
                        dataGridView1.Rows[e.RowIndex].Cells["DiscountValue"].Value = discountValue.NormalizeDecimalPlaces(ProSetting.Round).Stringify();

                    else
                    {
                        var calculatedRate = ((discountValue / itemtotalprice) * 100);
                        dataGridView1.Rows[e.RowIndex].Cells["Discount"].Value = calculatedRate.NormalizeDecimalPlaces().Stringify();
                    }
                    dataGridView1.Rows[e.RowIndex].Cells["TotalPrice"].Value = newt.NormalizeDecimalPlaces(ProSetting.Round).Stringify();

                    if (!isBuyPriceUpdated)
                    {
                        dataGridView1.Rows[e.RowIndex].Cells["TotalBuy"].Value = Math.Round(
                                ((Convert.ToDecimal(dataGridView1.Rows[e.RowIndex].Cells["Quantity"].Value.Stringify())
                                  * Convert.ToDecimal(dataGridView1.Rows[e.RowIndex].Cells["buyPrice"].Value
                                      .Stringify()))), ProSetting.Round,
                                MidpointRounding.AwayFromZero)
                            .ToString("F" + ProSetting.Round);
                    }
                    dataGridView1.Rows[e.RowIndex].Cells["Rebhea"].Value = Math.Round(
                        Convert.ToDecimal(dataGridView1.Rows[e.RowIndex].Cells["TotalPrice"].Value.Stringify())
                        - Convert.ToDecimal(TaxValue.Stringify())
                        - Convert.ToDecimal(dataGridView1.Rows[e.RowIndex].Cells["TotalBuy"].Value.Stringify())
                        , ProSetting.Round
                        , MidpointRounding.AwayFromZero)
                    .ToString("F" + ProSetting.Round);

                    var itemQnt = dataGridView1.CurrentRow.Cells["Quantity"].Value.ToDecimal();
                    var itemFactor = dataGridView1.CurrentRow.Cells["mainIt"].Value.ToDecimal();
                    var qntByMainUnit = (itemQnt * itemFactor);
                    dataGridView1.CurrentRow.Cells["countItemmain"].Value = qntByMainUnit.NormalizeDecimalPlaces().Stringify();
                }
                catch (Exception exx)
                {
                }
                finally
                {
                    ReleaseCellValueChanged();
                }
            }
            catch (Exception ex) { }

            try
            {
                var dtPrice = Codes.Search2("select Price,PriceInter,ItMain,BuyPrice,HalfPrice,gomla1,gomla2 from ItemsUnit where ItemsUnit.Barcode='" + ItemBarcode + "' Order By ID");
                try
                {
                    Pieceprice = Math.Round(Convert.ToDecimal(dtPrice.Rows[0][0]), ProSetting.Round, MidpointRounding.AwayFromZero);
                }
                catch { }

                if (ProSetting.Pieceprice
                    && Convert.ToDecimal(dataGridView1.Rows[e.RowIndex].Cells["UnitPrice"].Value)
                    < Pieceprice)
                {
                    MessageBox.Show(Tr.M1.m0180);
                    try
                    {
                        HandleCellValueChanged();

                        dataGridView1.Rows[e.RowIndex].Cells["UnitPrice"].Value = Pieceprice.ToString("F" + ProSetting.Round);
                    }
                    catch
                    {
                    }
                    finally
                    {
                        ReleaseCellValueChanged();
                    }
                }
                if (Convert.ToDecimal(dataGridView1.Rows[e.RowIndex].Cells["UnitPrice"].Value)
                    < Convert.ToDecimal(dataGridView1.CurrentRow.Cells["buyPrice"].Value))
                {
                    if (ProSetting.SaleMinBuy || ProSetting.SaleMinBuy2)
                        MessageBox.Show(Tr.M1.m0179);

                    if (ProSetting.SaleMinBuy2)
                    {
                        try
                        {
                            HandleCellValueChanged();

                            dataGridView1.Rows[e.RowIndex].Cells["UnitPrice"].Value =
                                dataGridView1.Rows[e.RowIndex].Cells["ItemBuyPrice"].Value;
                        }
                        catch
                        {
                        }
                        finally
                        {
                            ReleaseCellValueChanged();
                        }
                    }
                }
            }
            catch (Exception exx)
            {

            }
            try
            {
                if (!ProSetting.OnQuantity || !itemAdded)
                {
                    if (!string.IsNullOrEmpty(ProSetting.BarcodeOrItem)
                        || dataGridView1.CurrentCell.RowIndex == dataGridView1.RowCount - 2)
                        SendKeys.Send("{ENTER}");
                }
            }
            catch (Exception ex) { }
        }
        private void UnitPriceCellValueChanged(DataGridViewCellEventArgs e)
        {
            try
            {
                DataTable dtPrice = Codes.Search2(@"SELECT     dbo.ItemsUnit.Price,
CASE WHEN dbo.ItemsUnit.ItMain=1
and isnull((Select IsNull(dbo.Store.Price,0) from Store where ItemID =ItemsUnit.ItemId 
and StoreId='" + (dataGridView1.Rows[e.RowIndex].Cells["StoreId"].Value == null
                                                      ? StoreCombo.SelectedValue.Stringify()
                                                      : dataGridView1.Rows[e.RowIndex].Cells["StoreId"].Value.Stringify()) + @"' ),0) > 0
THEN (Select IsNull(dbo.Store.Price,0) from Store where ItemID =ItemsUnit.ItemId 
and StoreId='" + (dataGridView1.CurrentRow.Cells["StoreId"].Value == null
                                                      ? StoreCombo.SelectedValue.Stringify()
                                                      : dataGridView1.CurrentRow.Cells["StoreId"].Value.Stringify()) + @"' )
ELSE  dbo.ItemsUnit.BuyPrice End as BuyPrice
FROM         dbo.ItemsUnit INNER JOIN
                      dbo.Units ON dbo.ItemsUnit.UnitID = dbo.Units.ID where ItemsUnit.ItemID ='" + dataGridView1.Rows[e.RowIndex].Cells["ItemID"].Value.Stringify() + "' and Units.Name ='" + dataGridView1.Rows[e.RowIndex].Cells["mm"].Value.Stringify() + "' ");


                try
                {
                    var value = dataGridView1.CurrentRow.Cells["UnitPrice"].Value == null
                                || string.IsNullOrEmpty(dataGridView1.CurrentRow.Cells["UnitPrice"].Value
                                    .Stringify())
                        ? ""
                        : dataGridView1.CurrentRow.Cells["UnitPrice"].Value.Stringify();
                    decimal unitPrice = 0;
                    if (!decimal.TryParse(value, out unitPrice))
                    {
                        dataGridView1.CurrentRow.Cells["UnitPrice"].Value = 0;
                        return;
                    }
                }
                catch
                {
                    dataGridView1.CurrentRow.Cells["UnitPrice"].Value = 0;
                    return;
                }

                try
                {
                    Pieceprice = Math.Round(Convert.ToDecimal(dtPrice.Rows[0][0].Stringify()), ProSetting.Round, MidpointRounding.AwayFromZero);
                }
                catch { }

                if (ProSetting.Pieceprice
                    && Convert.ToDecimal(dataGridView1.Rows[e.RowIndex].Cells["UnitPrice"].Value)
                    < Pieceprice)
                {
                    MessageBox.Show(Tr.M1.m0180);
                    try
                    {
                        HandleCellValueChanged();

                        dataGridView1.Rows[e.RowIndex].Cells["UnitPrice"].Value = Pieceprice.NormalizeDecimalPlaces(ProSetting.Round).Stringify();
                    }
                    catch
                    {
                    }
                    finally
                    {
                        ReleaseCellValueChanged();
                    }
                }
                if (Convert.ToDecimal(dataGridView1.Rows[e.RowIndex].Cells["UnitPrice"].Value)
                    < Convert.ToDecimal(dataGridView1.CurrentRow.Cells["buyPrice"].Value))
                {
                    if (ProSetting.SaleMinBuy || ProSetting.SaleMinBuy2)
                        MessageBox.Show(Tr.M1.m0179);
                    if (ProSetting.SaleMinBuy2)
                    {
                        HandleCellValueChanged();
                        try
                        {
                            var currentitemBuy = dataGridView1.Rows[e.RowIndex].Cells["ItemBuyPrice"].Value.ToDecimal();
                            dataGridView1.Rows[e.RowIndex].Cells["UnitPrice"].Value = currentitemBuy.NormalizeDecimalPlaces(ProSetting.Round).Stringify();
                        }
                        catch
                        {
                        }
                        finally
                        {
                            ReleaseCellValueChanged();
                        }
                    }
                }
                decimal TaxValue = 0M, itemtotal = 0M, itemDiscount = 0M, netSale = 0M;
                itemtotal = Math.Round(
                    (Convert.ToDecimal(dataGridView1.Rows[e.RowIndex].Cells["UnitPrice"].Value)
                     * Convert.ToDecimal(dataGridView1.Rows[e.RowIndex].Cells["Quantity"].Value))
                    , ProSetting.Round
                    , MidpointRounding.AwayFromZero);
                var itemDiscountType =
                    (DiscountType)Convert.ToByte(dataGridView1.Rows[e.RowIndex].Cells["DiscountType"]
                        .Value);

                var discountPercentage = Math.Round(
                    (Convert.ToDecimal(dataGridView1.Rows[e.RowIndex].Cells["Discount"].Value.Stringify()))
                    , ProSetting.Round
                    , MidpointRounding.AwayFromZero);

                itemDiscount = itemDiscountType == DiscountType.Percentage
                    ? Math.Round(((itemtotal * discountPercentage) / 100)
                        , ProSetting.Round
                        , MidpointRounding.AwayFromZero)
                    : Math.Round(
                        (Convert.ToDecimal(dataGridView1.Rows[e.RowIndex].Cells["DiscountValue"].Value.Stringify()))
                        , ProSetting.Round
                        , MidpointRounding.AwayFromZero);



                netSale = Math.Round((itemtotal - itemDiscount)
                    , ProSetting.Round
                    , MidpointRounding.AwayFromZero);
                if (ProSetting.ItemsAdditionValue)
                {
                    var additionValue = Convert.ToDecimal(dataGridView1.Rows[e.RowIndex].Cells["AdditionValue"].Value)
                                        * Convert.ToDecimal(dataGridView1.Rows[e.RowIndex].Cells["Quantity"].Value);

                    netSale = netSale + additionValue;
                }
                else if (ProSetting.ItemsTax)
                {
                    try
                    {
                        var itemTax = dataGridView1.Rows[e.RowIndex].Cells["ItemTax"].Value == null
                            ? 0
                            : Convert.ToDecimal(dataGridView1.Rows[e.RowIndex].Cells["ItemTax"].Value);
                        TaxValue = Math.Round(((ProSetting.DarebaAfterDiscount ? netSale : itemtotal) * itemTax / 100)
                            , ProSetting.Round
                            , MidpointRounding.AwayFromZero);
                    }
                    catch { }
                }

                try
                {
                    HandleCellValueChanged();

                    try
                    {
                        var itemTotalPrice = (netSale + TaxValue);
                        dataGridView1.CurrentRow.Cells["TotalPrice"].Value = itemTotalPrice.NormalizeDecimalPlaces(ProSetting.Round).Stringify();

                        dataGridView1.Rows[e.RowIndex].Cells["TotalBuy"].Value =
                            (dataGridView1.Rows[e.RowIndex].Cells["Quantity"].Value.ToDecimal()
                            * dataGridView1.Rows[e.RowIndex].Cells["buyPrice"].Value.ToDecimal()).NormalizeDecimalPlaces(ProSetting.Round).Stringify();
                        dataGridView1.Rows[e.RowIndex].Cells["Rebhea"].Value = (dataGridView1.Rows[e.RowIndex].Cells["TotalPrice"].Value.ToDecimal()
                                       - TaxValue
                                       - dataGridView1.Rows[e.RowIndex].Cells["TotalBuy"].Value.ToDecimal()).NormalizeDecimalPlaces(ProSetting.Round).Stringify();

                        var itemMainUnitPrice = dataGridView1.CurrentRow.Cells["UnitPrice"].Value.ToDecimal() / dataGridView1.CurrentRow.Cells["mainIt"].Value.ToDecimal();

                        dataGridView1.CurrentRow.Cells["MainUnitPrice"].Value = itemMainUnitPrice.NormalizeDecimalPlaces(ProSetting.Round).Stringify();

                    }
                    catch
                    {
                    }
                    try
                    {
                        if (itemDiscountType == DiscountType.Percentage)
                            dataGridView1.Rows[e.RowIndex].Cells["DiscountValue"].Value =
                                itemDiscount.NormalizeDecimalPlaces(ProSetting.Round).Stringify();
                        else
                        {
                            var calcRate = ((itemDiscount / itemtotal) * 100);
                            dataGridView1.Rows[e.RowIndex].Cells["Discount"].Value = calcRate.NormalizeDecimalPlaces().Stringify();
                        }
                    }
                    catch
                    {
                    }

                    if (!string.IsNullOrEmpty(ProSetting.BarcodeOrItem))
                        SendKeys.Send("{ENTER}");

                }
                catch (Exception ex)
                {
                }
                finally
                {
                    ReleaseCellValueChanged();
                }
            }
            catch (Exception ex) { }
        }

        private void DiscountCellValueChanged(DataGridViewCellEventArgs e)
        {
            try
            {
                try
                {
                    decimal discount = 0;
                    if (!decimal.TryParse(dataGridView1.CurrentRow.Cells["Discount"].Value.Stringify(), out discount))
                    {
                        dataGridView1.CurrentRow.Cells["Discount"].Value = 0;
                        return;
                    }
                }
                catch
                {
                    dataGridView1.CurrentRow.Cells["Discount"].Value = 0;
                    return;
                }
                DataTable dtMaxDiscount = Codes.Search2("select MaxDiscount from items where Items.Active = 1 and id=" + dataGridView1.CurrentRow.Cells["ItemID"].Value.Stringify());
                try
                {
                    decimal dis = Math.Round((Convert.ToDecimal(dataGridView1.CurrentRow.Cells["Discount"].Value))
                        , ProSetting.Round
                        , MidpointRounding.AwayFromZero);
                    decimal maxdis = Math.Round((Convert.ToDecimal(dtMaxDiscount.Rows[0][0].Stringify())), ProSetting.Round, MidpointRounding.AwayFromZero);
                    if (dis > maxdis && maxdis > 0)
                    {
                        MessageBox.Show((Tr.M2.m727) + maxdis.Stringify());
                        try
                        {
                            HandleCellValueChanged();

                            dataGridView1.CurrentRow.Cells["Discount"].Value = "0";
                        }
                        catch (Exception ex)
                        {
                        }
                        finally
                        {
                            ReleaseCellValueChanged();
                        }
                    }
                }
                catch { }

                var itemtotalprice = Math.Round(
                    (Convert.ToDecimal(dataGridView1.CurrentRow.Cells["Quantity"].Value)
                     * Convert.ToDecimal(dataGridView1.CurrentRow.Cells["UnitPrice"].Value.Stringify()))
                    , ProSetting.Round
                    , MidpointRounding.AwayFromZero);


                var discountPercentage = Math.Round((Convert.ToDecimal(dataGridView1.CurrentRow.Cells["Discount"].Value.Stringify()))
                    , ProSetting.Round
                    , MidpointRounding.AwayFromZero);

                var discountValue = Math.Round(((itemtotalprice * discountPercentage) / 100)
                    , ProSetting.Round
                    , MidpointRounding.AwayFromZero);

                var taxPercentage = Math.Round((Convert.ToDecimal(dataGridView1.CurrentRow.Cells["ItemTax"].Value)), ProSetting.Round, MidpointRounding.AwayFromZero);

                decimal TaxValue = 0;

                decimal newt = 0;
                var netSale = Math.Round((itemtotalprice - discountValue)
                    , ProSetting.Round
                    , MidpointRounding.AwayFromZero);

                if (ProSetting.ItemsAdditionValue)
                {
                    var additionValue = Convert.ToDecimal(dataGridView1.CurrentRow.Cells["AdditionValue"].Value)
                                        * Convert.ToDecimal(dataGridView1.CurrentRow.Cells["Quantity"].Value);

                    netSale = netSale + additionValue;
                }
                else if (ProSetting.ItemsTax)
                {
                    try
                    {
                        if (ProSetting.DarebaAfterDiscount)
                        {
                            TaxValue = Math.Round(((netSale * taxPercentage) / 100)
                                , ProSetting.Round
                                , MidpointRounding.AwayFromZero);
                        }
                        else
                        {
                            TaxValue = Math.Round(((itemtotalprice * taxPercentage) / 100)
                                , ProSetting.Round
                                , MidpointRounding.AwayFromZero);

                        }
                    }
                    catch
                    {
                    }
                }

                newt = Math.Round((netSale + TaxValue)
                    , ProSetting.Round
                    , MidpointRounding.AwayFromZero);

                try
                {
                    HandleCellValueChanged();

                    dataGridView1.CurrentRow.Cells["DiscountValue"].Value = discountValue.NormalizeDecimalPlaces(ProSetting.Round).Stringify();

                    dataGridView1.CurrentRow.Cells["TotalPrice"].Value = newt.NormalizeDecimalPlaces(ProSetting.Round).Stringify();
                    dataGridView1.CurrentRow.Cells["TotalBuy"].Value = Math.Round(((Convert.ToDecimal(dataGridView1.CurrentRow.Cells["Quantity"].Value.Stringify()) * Convert.ToDecimal(dataGridView1.CurrentRow.Cells["buyPrice"].Value.Stringify()))), ProSetting.Round, MidpointRounding.AwayFromZero).ToString("F" + ProSetting.Round);
                    dataGridView1.CurrentRow.Cells["Rebhea"].Value = Math.Round(Convert.ToDecimal(dataGridView1.CurrentRow.Cells["TotalPrice"].Value.Stringify()) - Convert.ToDecimal(dataGridView1.CurrentRow.Cells["TotalBuy"].Value.Stringify()), ProSetting.Round, MidpointRounding.AwayFromZero).ToString("F" + ProSetting.Round);
                    dataGridView1.CurrentRow.Cells["DiscountType"].Value = (byte)DiscountType.Percentage;
                }
                catch (Exception ex)
                {
                }
                finally
                {
                    ReleaseCellValueChanged();
                }

                SendKeys.Send("{ENTER}");
            }
            catch { }
        }

        private void DiscountValueCellValueChanged(DataGridViewCellEventArgs e)
        {
            try
            {
                try
                {
                    decimal discountV = 0;
                    if (!decimal.TryParse(dataGridView1.CurrentRow.Cells["DiscountValue"].Value.Stringify(), out discountV))
                    {
                        dataGridView1.CurrentRow.Cells["DiscountValue"].Value = 0;
                        return;
                    }
                }
                catch
                {
                    dataGridView1.CurrentRow.Cells["DiscountValue"].Value = 0;
                    return;
                }
                var itemtotal = Math.Round(
                    (Convert.ToDecimal(dataGridView1.CurrentRow.Cells["UnitPrice"].Value)
                     * Convert.ToDecimal(dataGridView1.CurrentRow.Cells["Quantity"].Value))
                    , ProSetting.Round
                    , MidpointRounding.AwayFromZero);


                try
                {
                    HandleCellValueChanged();

                    var disValue = dataGridView1.CurrentRow.Cells["DiscountValue"].Value.ToDecimal();
                    var calcRate = ((100 * disValue) / itemtotal);

                    dataGridView1.CurrentRow.Cells["Discount"].Value = calcRate.NormalizeDecimalPlaces().Stringify();
                }
                catch (Exception ex)
                {
                }
                finally
                {
                    ReleaseCellValueChanged();
                }
                DataTable dtMaxDiscount = Codes.Search2("select MaxDiscount from items where Items.Active = 1 and id=" + dataGridView1.CurrentRow.Cells["ItemID"].Value.Stringify());
                try
                {
                    decimal dis = Math.Round((Convert.ToDecimal(dataGridView1.CurrentRow.Cells["Discount"].Value))
                        , ProSetting.Round
                        , MidpointRounding.AwayFromZero);
                    decimal maxdis = Math.Round((Convert.ToDecimal(dtMaxDiscount.Rows[0][0].Stringify()))
                        , ProSetting.Round
                        , MidpointRounding.AwayFromZero);

                    if (dis > maxdis && maxdis > 0)
                    {
                        MessageBox.Show((Tr.M2.m727) + maxdis.Stringify());
                        try
                        {
                            HandleCellValueChanged();

                            dataGridView1.CurrentRow.Cells["Discount"].Value = "0.00";
                            dataGridView1.CurrentRow.Cells["DiscountValue"].Value = "0.00";
                        }
                        catch (Exception ex)
                        {
                        }
                        finally
                        {
                            ReleaseCellValueChanged();
                        }
                    }
                }
                catch { }

                var itemtotalprice = Math.Round(
                    (Convert.ToDecimal(dataGridView1.CurrentRow.Cells["Quantity"].Value)
                     * Convert.ToDecimal(dataGridView1.CurrentRow.Cells["UnitPrice"].Value.Stringify()))
                    , ProSetting.Round
                    , MidpointRounding.AwayFromZero);


                var discountPercentage = Math.Round(
                    (Convert.ToDecimal(dataGridView1.CurrentRow.Cells["Discount"].Value.Stringify()))
                    , ProSetting.Round
                    , MidpointRounding.AwayFromZero);


                var discountValue = Math.Round(
                    (Convert.ToDecimal(dataGridView1.CurrentRow.Cells["DiscountValue"].Value.Stringify()))
                    , ProSetting.Round
                    , MidpointRounding.AwayFromZero);

                var taxPercentage = Convert.ToDecimal(dataGridView1.CurrentRow.Cells["ItemTax"].Value);


                decimal TaxValue = 0M;

                decimal newt = 0;
                var netSale = Math.Round((itemtotalprice - discountValue)
                    , ProSetting.Round
                    , MidpointRounding.AwayFromZero);

                if (ProSetting.ItemsAdditionValue)
                {
                    var additionValue =
                        Convert.ToDecimal(dataGridView1.CurrentRow.Cells["AdditionValue"].Value) * Convert.ToDecimal(dataGridView1.CurrentRow.Cells["Quantity"].Value);

                    netSale = netSale + additionValue;
                }
                else if (ProSetting.ItemsTax)
                {
                    try
                    {
                        if (ProSetting.DarebaAfterDiscount)
                        {
                            TaxValue = Math.Round(((netSale * taxPercentage) / 100)
                                , ProSetting.Round
                                , MidpointRounding.AwayFromZero);
                        }
                        else
                        {
                            TaxValue = Math.Round(((itemtotalprice * taxPercentage) / 100)
                                , ProSetting.Round
                                , MidpointRounding.AwayFromZero);
                        }
                    }
                    catch { }
                }

                newt = Math.Round((netSale + TaxValue)
                    , ProSetting.Round
                    , MidpointRounding.AwayFromZero);

                try
                {
                    HandleCellValueChanged();

                    dataGridView1.CurrentRow.Cells["TotalPrice"].Value =
                                           newt.NormalizeDecimalPlaces(ProSetting.Round).Stringify();

                    dataGridView1.CurrentRow.Cells["TotalBuy"].Value = Math.Round(((Convert.ToDecimal(dataGridView1.CurrentRow.Cells["Quantity"].Value.Stringify()) * Convert.ToDecimal(dataGridView1.CurrentRow.Cells["buyPrice"].Value.Stringify()))), ProSetting.Round, MidpointRounding.AwayFromZero).ToString("F" + ProSetting.Round);
                    dataGridView1.CurrentRow.Cells["Rebhea"].Value = Math.Round(Convert.ToDecimal(dataGridView1.CurrentRow.Cells["TotalPrice"].Value.Stringify()) - Convert.ToDecimal(dataGridView1.CurrentRow.Cells["TotalBuy"].Value.Stringify()), ProSetting.Round, MidpointRounding.AwayFromZero).ToString("F" + ProSetting.Round);
                    dataGridView1.CurrentRow.Cells["DiscountType"].Value = (byte)DiscountType.Value;
                }
                catch (Exception ex)
                {
                }
                finally
                {
                    ReleaseCellValueChanged();
                }
                SendKeys.Send("{ENTER}");

            }
            catch { }
        }

        private void UnderDeliveryCellValueChanged(DataGridViewCellEventArgs e)
        {
            try
            {
                if (Convert.ToBoolean(
                        Codes.Search2("select Khadamy from Items where ID = '" +
                                      dataGridView1.CurrentRow.Cells["ItemID"].Value.Stringify() +
                                      "' and Items.Active = 1").Rows[0][0].Stringify()) == false)
                {
                    if (ProSetting.SkipQuantityAssemblingOfAnItem)
                    {
                        if (!Convert.ToBoolean(dataGridView1.CurrentRow.Cells["UnderDelevItem"].Value))
                            dataGridView1_CellValueChanged(dataGridView1,
                                new DataGridViewCellEventArgs(5, e.RowIndex));
                    }
                    else
                    {
                        decimal Quantity = 0;
                        for (int i = 1; i < dataGridView1.Rows.Count; i++)
                        {
                            if (dataGridView1.Rows[i - 1].Cells["ItemID"].Value != null &&
                                dataGridView1.Rows[i - 1].Cells["StoreID"].Value != null)
                            {
                                if (int.Parse(dataGridView1.Rows[i - 1].Cells["ItemID"].Value.Stringify()) ==
                                    int.Parse(dataGridView1.CurrentRow.Cells["ItemID"].Value.Stringify()) &&
                                    int.Parse(dataGridView1.Rows[i - 1].Cells["StoreID"].Value
                                        .Stringify()) == int.Parse(dataGridView1.Rows[e.RowIndex]
                                        .Cells["StoreID"].Value.Stringify()))
                                {
                                    Quantity +=
                                        Convert.ToDecimal(dataGridView1.Rows[i - 1].Cells["Quantity"]
                                            .Value) * Convert.ToDecimal(dataGridView1.Rows[i - 1]
                                            .Cells["mainIt"].Value);
                                }
                            }
                        }

                        if ((Convert.ToDecimal(dataGridView1.CurrentRow.Cells["qntStore"].Value)
                             * Convert.ToDecimal(dataGridView1.CurrentRow.Cells["mainIt"].Value)) < Quantity
                            && ProSetting.StoreMinus == false
                            && ProSetting.UniderDelevItem == true
                            && Convert.ToBoolean(dataGridView1.CurrentRow.Cells["UnderDelevItem"].Value) ==
                            false)
                        {
                            var isItUnderDeliver = false;
                            try
                            {
                                isItUnderDeliver = Convert.ToBoolean(dataGridView1.CurrentRow
                                    .Cells["UnderDelevItem"].Value.Stringify());
                            }
                            catch
                            {
                            }

                            if (!isItUnderDeliver)
                            {
                                MessageBox.Show(Tr.M1.m0366, Tr.M1.alert);
                                try
                                {
                                    HandleCellValueChanged();

                                    dataGridView1.CurrentRow.Cells["UnderDelevItem"].Value = true;

                                }
                                catch (Exception)
                                {
                                }
                                finally
                                {
                                    ReleaseCellValueChanged();
                                }
                            }
                        }
                    }
                }
            }
            catch { }
        }

        private void ItemColorCellValueChanged(DataGridViewCellEventArgs e)
        {
            try
            {
                var currentItemQnt = dataGridView1.CurrentRow.Cells["Quantity"].Value.ToDecimal();
                if (dataGridView1.CurrentRow.Cells["ItemColor"].Value.ToText() == "")
                {
                    var cIndex = dataGridView1.CurrentRow.Index + 1;
                    ItemColor = AutomaticColorTextInSales ? cIndex.ToText() : "";

                    try
                    {
                        HandleCellValueChanged();
                        if (AutomaticColorTextInSales)
                            dataGridView1.CurrentRow.Cells["ItemColor"].Value = cIndex;
                        //else
                        //    dataGridView1.CurrentRow.Cells["ItemColor"].Value = "";
                        //dataGridView1.CurrentRow.Cells["ItemColor"].Value = ItemColor;
                    }
                    catch
                    {
                    }
                    finally
                    {
                        ReleaseCellValueChanged();
                    }

                }
                else
                {
                    ItemColor = dataGridView1.CurrentRow.Cells["ItemColor"].Value.ToText();
                    if (ProSetting.ColorOrSerial == "السيريال" && ItemColor != "")
                    {
                        try
                        {
                            HandleCellValueChanged();
                            dataGridView1.Rows[e.RowIndex].Cells["Quantity"].Value = 1;
                        }
                        catch (Exception ex)
                        {
                        }
                        finally
                        {
                            ReleaseCellValueChanged();
                        }
                    }
                }

                var duplicatedItemSerial = false;
                for (int i = 1; i < dataGridView1.Rows.Count; i++)
                {
                    var quantitynotEnough = false;
                    if (dataGridView1.Rows[i - 1].Cells["ItemID"].Value != null
                        && dataGridView1.Rows[i - 1].Cells["StoreID"].Value != null)
                    {
                        if (dataGridView1.CurrentRow.Index != i - 1)
                        {
                            if (int.Parse(dataGridView1.Rows[i - 1].Cells["ItemID"].Value.Stringify())
                                == int.Parse(dataGridView1.CurrentRow.Cells["ItemID"].Value.Stringify())
                                && int.Parse(dataGridView1.Rows[i - 1].Cells["StoreID"].Value.Stringify())
                                == int.Parse(dataGridView1.CurrentRow.Cells["StoreID"].Value.Stringify()))
                            {
                                var q = Convert.ToDecimal(dataGridView1.Rows[i - 1].Cells["Quantity"].Value.Stringify());
                                var q2 = Convert.ToDecimal(dataGridView1.Rows[i - 1].Cells["Quantity"].Value.Stringify())
                                            * Convert.ToDecimal(dataGridView1.Rows[i - 1].Cells["mainIt"].Value.Stringify());

                                if (ProSetting.ColorOrSerial == "السيريال")
                                    duplicatedItemSerial = ItemColor == dataGridView1.Rows[i - 1].Cells["ItemColor"].Value.ToText();

                                var sameColor = AutomaticColorTextInSales
                                    ? dataGridView1.Rows[i - 1].Cells["ItemColor"].Value.ToInt32() == ItemColor.ToInt32()
                                    : dataGridView1.Rows[i - 1].Cells["ItemColor"].Value.ToText() == ItemColor;
                                if (duplicatedItemSerial)
                                {
                                    MessageBox.Show(Tr.M2.m791, "", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                    try
                                    {
                                        HandleCellValueChanged();

                                        dataGridView1.Rows[e.RowIndex].Cells["ItemColor"].Value = "";

                                    }
                                    catch (Exception ex)
                                    {
                                    }
                                    finally
                                    {
                                        ReleaseCellValueChanged();
                                        SendKeys.Send("{ENTER}");
                                    }
                                    return;
                                }
                                if (Convert.ToBoolean(
                                        Codes.Search2("select Khadamy from Items "
                                                      + "where ID = '" + dataGridView1.CurrentRow.Cells["ItemID"].Value.Stringify() + "' "
                                                      + "and Items.Active = 1").Rows[0][0].Stringify()) == false)
                                {
                                    if ((Convert.ToDecimal(dataGridView1.Rows[i - 1].Cells["qntStore"].Value)
                                         * Convert.ToDecimal(dataGridView1.Rows[i - 1].Cells["mainIt"].Value.Stringify())) < q2
                                        && ProSetting.StoreMinus == false && ProSetting.UniderDelevItem == false)
                                    {
                                        MessageBox.Show(Tr.M2.m448);
                                        quantitynotEnough = true;
                                    }
                                    else if ((Convert.ToDecimal(dataGridView1.Rows[i - 1].Cells["qntStore"].Value)
                                              * Convert.ToDecimal(dataGridView1.Rows[i - 1].Cells["mainIt"].Value.Stringify())) < q2
                                             && ProSetting.StoreMinus == false
                                             && ProSetting.UniderDelevItem == true)
                                    {
                                        var isItUnderDeliver = false;
                                        try
                                        {
                                            isItUnderDeliver = Convert.ToBoolean(dataGridView1.Rows[i - 1].Cells["UnderDelevItem"].Value.Stringify());
                                        }
                                        catch
                                        {
                                        }
                                        if (!isItUnderDeliver)
                                            MessageBox.Show(Tr.M1.m0366, Tr.M1.alert);
                                        underDelev = true;

                                        if ((dataGridView1.Rows[i - 1].Cells["ItemColor"].Value.ToText() == ItemColor)
                                            && dataGridView1.Rows[i - 1].Cells["Barcode"].Value.Stringify()
                                            == dataGridView1.CurrentRow.Cells["Barcode"].Value.Stringify()
                                            && dataGridView1.Rows[i - 1].Cells["mm"].Value.Stringify()
                                            == dataGridView1.CurrentRow.Cells["mm"].Value.Stringify())
                                        {
                                            var changedQnt = (q + currentItemQnt);
                                            dataGridView1.Rows[i - 1].Cells["Quantity"].Value = changedQnt.NormalizeDecimalPlaces().Stringify();
                                        }
                                        try
                                        {
                                            HandleCellValueChanged();
                                            dataGridView1.Rows[i - 1].Cells["UnderDelevItem"].Value = underDelev;
                                        }
                                        catch (Exception ezx)
                                        {
                                        }
                                        finally
                                        {
                                            ReleaseCellValueChanged();
                                        }
                                    }
                                    else
                                    {
                                        if ((dataGridView1.Rows[i - 1].Cells["ItemColor"].Value.ToText() == ItemColor
                                             && dataGridView1.Rows[i - 1].Cells["Barcode"].Value.Stringify() == dataGridView1.CurrentRow.Cells["Barcode"].Value.Stringify()
                                             && dataGridView1.Rows[i - 1].Cells["mm"].Value.Stringify()
                                             == dataGridView1.CurrentRow.Cells["mm"].Value.Stringify())
                                            || quantitynotEnough)
                                        {
                                            try
                                            {
                                                if (ProSetting.SkipQuantityAssemblingOfAnItem)
                                                {
                                                    var currentitemID = dataGridView1.Rows[e.RowIndex]
                                                        .Cells["ItemID"].Value.ToInt32();
                                                    var currentitemStoreID = dataGridView1.Rows[e.RowIndex]
                                                       .Cells["StoreID"].Value.ToInt32();
                                                    var deletedItem = new KeyValuePair<int, int>(currentitemID, currentitemStoreID);

                                                    _dcItemComponents.Remove(deletedItem);
                                                }
                                            }
                                            catch (Exception ex)
                                            {
                                            }

                                            dataGridView1.Rows.RemoveAt(e.RowIndex);

                                            if (ProSetting.AltersameItemininvoice)
                                                MessageBox.Show(Tr.M1.m0260);
                                            if (i - 1 > e.RowIndex)
                                            {
                                                var changedQnt = (q + currentItemQnt);
                                                dataGridView1.Rows[i - 2].Cells["Quantity"].Value = changedQnt.NormalizeDecimalPlaces().Stringify();
                                            }
                                            else
                                            {
                                                var changedQnt = (q + currentItemQnt);
                                                dataGridView1.Rows[i - 1].Cells["Quantity"].Value = changedQnt.NormalizeDecimalPlaces().Stringify();
                                            }

                                            if (ProSetting.BarcodeOrItem == "كود الصنف")
                                            {
                                                dataGridView1.CurrentCell = dataGridView1.Rows[dataGridView1.RowCount - 1].Cells["Barcode"];
                                                SendKeys.Send("{ENTER}");

                                            }
                                            else if (ProSetting.BarcodeOrItem == "اسم الصنف")
                                            {
                                                dataGridView1.CurrentCell = dataGridView1.Rows[dataGridView1.RowCount - 1].Cells["ItemName"];
                                                dataGridView1.CurrentCell.Selected = true;
                                                dataGridView1.CurrentRow.Cells[2].Selected = true;
                                                SendKeys.Send("{ENTER}");
                                            }
                                            else
                                            {
                                                var index = dataGridView1.CurrentRow.Index + 1 >= dataGridView1.RowCount
                                                    ? dataGridView1.RowCount - 1
                                                    : dataGridView1.CurrentRow.Index + 1;

                                                var colIndex = index == dataGridView1.RowCount - 1
                                                    ? _lastAddItemColumnIndex
                                                    : dataGridView1.CurrentCell.ColumnIndex;

                                                dataGridView1.CurrentCell = dataGridView1.Rows[index].Cells[colIndex];
                                                dataGridView1.CurrentCell.Selected = true;

                                                SendKeys.Send("{ENTER}");
                                            }
                                            ItemIDbyBarcode = ""; ItemBarcode = ""; underDelev = false; Qnt = 1;
                                            return;
                                        }
                                    }
                                }
                                else
                                {
                                    if ((dataGridView1.Rows[i - 1].Cells["ItemColor"].Value.ToText() == ItemColor
                                         && dataGridView1.Rows[i - 1].Cells["Barcode"].Value.Stringify()
                                         == dataGridView1.CurrentRow.Cells["Barcode"].Value.Stringify()
                                         && dataGridView1.Rows[i - 1].Cells["mm"].Value.Stringify()
                                         == dataGridView1.CurrentRow.Cells["mm"].Value.Stringify()))
                                    {
                                        if (ProSetting.AltersameItemininvoice)
                                            MessageBox.Show(Tr.M1.m0260);
                                        {
                                            var changedQnt = (q + currentItemQnt);
                                            dataGridView1.Rows[i - 1].Cells["Quantity"].Value = changedQnt.NormalizeDecimalPlaces().Stringify();
                                        }
                                    }
                                }

                                if ((sameColor
                                    && dataGridView1.Rows[i - 1].Cells["Barcode"].Value.Stringify()
                                     == dataGridView1.CurrentRow.Cells["Barcode"].Value.Stringify()
                                     && dataGridView1.Rows[i - 1].Cells["mm"].Value.Stringify()
                                     == dataGridView1.CurrentRow.Cells["mm"].Value.Stringify())
                                    || quantitynotEnough)
                                {
                                    try
                                    {
                                        if (ProSetting.SkipQuantityAssemblingOfAnItem)
                                        {
                                            var currentitemID = dataGridView1.Rows[dataGridView1.CurrentRow.Index]
                                               .Cells["ItemID"].Value.ToInt32();
                                            var currentitemStoreID = dataGridView1.Rows[dataGridView1.CurrentRow.Index]
                                               .Cells["StoreID"].Value.ToInt32();
                                            var deletedItem = new KeyValuePair<int, int>(currentitemID, currentitemStoreID);

                                            _dcItemComponents.Remove(deletedItem);
                                        }
                                    }
                                    catch (Exception ex)
                                    {
                                    }

                                    dataGridView1.NotifyCurrentCellDirty(false);
                                    dataGridView1.EndEdit();
                                    dataGridView1.NotifyCurrentCellDirty(true);

                                    try
                                    {
                                        dataGridView1.Rows.Remove(dataGridView1.CurrentRow);
                                    }
                                    catch (Exception exc)
                                    {
                                    }
                                    dataGridView1.NotifyCurrentCellDirty(false);

                                    if (ProSetting.BarcodeOrItem == "كود الصنف")
                                    {
                                        dataGridView1.CurrentCell = dataGridView1.CurrentRow.Cells["Barcode"];
                                        SendKeys.Send("{ENTER}");

                                    }
                                    else if (ProSetting.BarcodeOrItem == "اسم الصنف")
                                    {
                                        dataGridView1.CurrentCell = dataGridView1.Rows[dataGridView1.RowCount - 1].Cells["ItemName"];
                                        dataGridView1.CurrentCell.Selected = true;

                                        SendKeys.Send("{ENTER}");
                                    }
                                    else
                                    {
                                        var index = dataGridView1.CurrentRow.Index + 1 >= dataGridView1.RowCount
                                            ? dataGridView1.RowCount - 1
                                            : dataGridView1.CurrentRow.Index + 1;

                                        var colIndex = index == dataGridView1.RowCount - 1
                                            ? _lastAddItemColumnIndex
                                            : dataGridView1.CurrentCell.ColumnIndex;

                                        dataGridView1.CurrentCell = dataGridView1.Rows[index].Cells[colIndex];
                                        dataGridView1.CurrentCell.Selected = true;

                                        if (ProSetting.ColorOrSerial != "السيريال" && !ProSetting.ColorList)
                                            SendKeys.Send("{ENTER}");
                                    }
                                    ItemIDbyBarcode = ""; ItemBarcode = ""; underDelev = false; Qnt = 1;
                                    return;
                                }
                            }
                        }
                    }
                }
                if (ProSetting.BarcodeOrItem == "كود الصنف")
                {
                    dataGridView1.CurrentCell = dataGridView1.Rows[dataGridView1.RowCount - 1].Cells["Barcode"];
                    SendKeys.Send("{ENTER}");

                }
                else if (ProSetting.BarcodeOrItem == "اسم الصنف")
                {
                    dataGridView1.CurrentCell = dataGridView1.Rows[dataGridView1.RowCount - 1].Cells["ItemName"];
                    dataGridView1.CurrentCell.Selected = true;
                    SendKeys.Send("{ENTER}");
                }
                else
                {
                    var index = dataGridView1.CurrentRow.Index + 1 >= dataGridView1.RowCount
                                ? dataGridView1.RowCount - 1
                                : dataGridView1.CurrentRow.Index + 1;

                    var colIndex = index == dataGridView1.RowCount - 1
                        ? _lastAddItemColumnIndex
                        : dataGridView1.CurrentCell.ColumnIndex;

                    dataGridView1.CurrentCell = dataGridView1.Rows[index].Cells[colIndex];
                    dataGridView1.CurrentCell.Selected = true;

                }

            }
            catch { }
            finally
            {
                ItemIDbyBarcode = ""; ItemBarcode = ""; underDelev = false; Qnt = 1;
            }
        }

        private void ItemTaxCellValueChanged(DataGridViewCellEventArgs e)
        {
            try
            {
                try
                {
                    decimal itemTax = 0;
                    if (!decimal.TryParse(dataGridView1.CurrentRow.Cells["ItemTax"].Value.Stringify(), out itemTax))
                    {
                        dataGridView1.CurrentRow.Cells["ItemTax"].Value = 0;
                        return;
                    }
                }
                catch
                {
                    dataGridView1.CurrentRow.Cells["ItemTax"].Value = 0;
                    return;
                }

                var itemtotalprice =
                    (dataGridView1.CurrentRow.Cells["Quantity"].Value.ToDecimal()
                     * dataGridView1.CurrentRow.Cells["UnitPrice"].Value.ToDecimal()).NormalizeDecimalPlaces(ProSetting.Round);

                var itemDiscountType =
                    (DiscountType)Convert.ToByte(dataGridView1.Rows[e.RowIndex].Cells["DiscountType"]
                        .Value);

                var discountPercentage = Math.Round(
                    (Convert.ToDecimal(dataGridView1.CurrentRow.Cells["Discount"].Value.Stringify()))
                    , ProSetting.Round
                    , MidpointRounding.AwayFromZero);


                var discountValue = itemDiscountType == DiscountType.Percentage
                    ? ((itemtotalprice * discountPercentage) / 100).NormalizeDecimalPlaces(ProSetting.Round)
                    : dataGridView1.CurrentRow.Cells["DiscountValue"].Value.ToDecimal().NormalizeDecimalPlaces(ProSetting.Round)
;


                var taxPercentage = dataGridView1.CurrentRow.Cells["ItemTax"].Value.ToDecimal();


                decimal TaxValue = 0M;

                decimal newt = 0;
                var netSale = Math.Round((itemtotalprice - discountValue)
                    , ProSetting.Round
                    , MidpointRounding.AwayFromZero);


                if (ProSetting.ItemsAdditionValue)
                {
                    var additionValue = dataGridView1.CurrentRow.Cells["AdditionValue"].Value.ToDecimal()
                                        * dataGridView1.CurrentRow.Cells["Quantity"].Value.ToDecimal();

                    netSale = netSale + additionValue;
                }
                else if (ProSetting.ItemsTax)
                {
                    try
                    {
                        if (ProSetting.DarebaAfterDiscount)
                        {
                            TaxValue = ((netSale * taxPercentage) / 100).NormalizeDecimalPlaces(ProSetting.Round);
                        }
                        else
                        {
                            TaxValue = ((itemtotalprice * taxPercentage) / 100).NormalizeDecimalPlaces(ProSetting.Round);
                        }
                    }
                    catch { }
                }

                newt = (netSale + TaxValue).NormalizeDecimalPlaces(ProSetting.Round);


                try
                {
                    HandleCellValueChanged();

                    dataGridView1.CurrentRow.Cells["TotalPrice"].Value = newt.NormalizeDecimalPlaces(ProSetting.Round).Stringify();
                    dataGridView1.CurrentRow.Cells["Rebhea"].Value = (dataGridView1.CurrentRow.Cells["TotalPrice"].Value.ToDecimal()
                        - dataGridView1.CurrentRow.Cells["TotalBuy"].Value.ToDecimal()).NormalizeDecimalPlaces(ProSetting.Round).Stringify();


                }
                catch (Exception)
                {
                }
                finally
                {
                    ReleaseCellValueChanged();
                }
            }
            catch { }
            try
            {
                SendKeys.Send("{ENTER}");
            }
            catch { }
        }

        private void CountItemMainCellValueChanged(DataGridViewCellEventArgs e)
        {
            try
            {                
                decimal newQnt = 0, testQ = 0;
                beforeQnt = dataGridView1.Rows[e.RowIndex].Cells["Quantity"].Value.ToDecimal();
                if (decimal.TryParse(dataGridView1.Rows[e.RowIndex].Cells["countItemmain"].Value.Stringify(), out testQ))
                {
                    newQnt = (dataGridView1.Rows[e.RowIndex].Cells["countItemmain"].Value.ToDecimal()
                                       / dataGridView1.Rows[e.RowIndex].Cells["mainIt"].Value.ToDecimal());

                    dataGridView1.Rows[e.RowIndex].Cells["Quantity"].Value = newQnt.NormalizeDecimalPlaces().Stringify();
                    beforeQnt = null;
                }
                else
                {
                    try
                    {
                        HandleCellValueChanged();
                        dataGridView1.Rows[e.RowIndex].Cells["Quantity"].Value = beforeQnt == 0
                            ? "1"
                            : beforeQnt.NormalizeDecimalPlaces().Stringify();
                    }
                    catch (Exception ex)
                    {
                        throw;
                    }
                    finally
                    {
                        ReleaseCellValueChanged();
                    }
                    beforeQnt = null;
                }
            }
            catch
            {
                beforeQnt = null;
                throw;
            }
        }

        private void MaintUnitPriceCellValueChanged(DataGridViewCellEventArgs e)
        {
            try
            {
                decimal newPrice = 0,
                    testPrice = 0;

                beforePrice = dataGridView1.Rows[e.RowIndex].Cells["UnitPrice"].Value.ToDecimal();
                if (decimal.TryParse(dataGridView1.Rows[e.RowIndex].Cells["MainUnitPrice"].Value.Stringify(), out testPrice))
                {
                    newPrice = (dataGridView1.Rows[e.RowIndex].Cells["MainUnitPrice"].Value.ToDecimal()
                                        * dataGridView1.Rows[e.RowIndex].Cells["mainIt"].Value.ToDecimal()).NormalizeDecimalPlaces(ProSetting.Round);

                    dataGridView1.Rows[e.RowIndex].Cells["UnitPrice"].Value = newPrice.NormalizeDecimalPlaces(ProSetting.Round).Stringify();

                    beforePrice = null;
                }
                else
                {
                    try
                    {
                        HandleCellValueChanged();
                        var itemMainUnitPrice = 0M;
                        if (beforePrice.HasValue)
                            itemMainUnitPrice = beforePrice.Value / dataGridView1.Rows[e.RowIndex].Cells["mainIt"].Value.ToDecimal();

                        dataGridView1.Rows[e.RowIndex].Cells["MainUnitPrice"].Value = itemMainUnitPrice.NormalizeDecimalPlaces(ProSetting.Round).Stringify();
                    }
                    catch (Exception ex)
                    {
                    }
                    finally
                    {
                        ReleaseCellValueChanged();
                    }
                    beforePrice = null;
                }
            }
            catch
            {
                beforePrice = null;
            }
        }

        private void AdditionValueCellValueChanged(DataGridViewCellEventArgs e)
        {
            try
            {
                decimal additionValue = 0;

                try
                {
                    if (!decimal.TryParse(dataGridView1.CurrentRow.Cells["AdditionValue"].Value.Stringify(), out additionValue))
                    {
                        dataGridView1.CurrentRow.Cells["AdditionValue"].Value = 0;
                        return;
                    }
                }
                catch
                {
                    dataGridView1.CurrentRow.Cells["AdditionValue"].Value = 0;
                    return;
                }

                var itemtotalprice =
                    (dataGridView1.CurrentRow.Cells["Quantity"].Value.ToDecimal()
                     * dataGridView1.CurrentRow.Cells["UnitPrice"].Value.ToDecimal()).NormalizeDecimalPlaces(ProSetting.Round);


                var discountPercentage = dataGridView1.CurrentRow.Cells["Discount"].Value.ToDecimal().NormalizeDecimalPlaces(ProSetting.Round);


                var discountValue = ((itemtotalprice * discountPercentage) / 100).NormalizeDecimalPlaces(ProSetting.Round);


                var taxPercentage = dataGridView1.CurrentRow.Cells["ItemTax"].Value.ToDecimal();

                decimal TaxValue = 0M;

                decimal newt = 0;
                var netSale = (itemtotalprice - discountValue).NormalizeDecimalPlaces(ProSetting.Round);



                if (ProSetting.ItemsAdditionValue)
                {
                    additionValue = additionValue
                                    * dataGridView1.CurrentRow.Cells["Quantity"].Value.ToDecimal();

                    netSale = netSale + additionValue;
                }
                else if (ProSetting.ItemsTax)
                {
                    try
                    {
                        if (ProSetting.DarebaAfterDiscount)
                        {
                            TaxValue = ((netSale * taxPercentage) / 100).NormalizeDecimalPlaces(ProSetting.Round);
                        }
                        else
                        {
                            TaxValue = ((itemtotalprice * taxPercentage) / 100).NormalizeDecimalPlaces(ProSetting.Round);
                        }

                    }
                    catch { }
                }

                newt = Math.Round((netSale + TaxValue)
                    , ProSetting.Round
                    , MidpointRounding.AwayFromZero);

                try
                {
                    HandleCellValueChanged();

                    dataGridView1.CurrentRow.Cells["TotalPrice"].Value = newt.NormalizeDecimalPlaces(ProSetting.Round).Stringify();

                    dataGridView1.CurrentRow.Cells["Rebhea"].Value = (dataGridView1.CurrentRow.Cells["TotalPrice"].Value.ToDecimal()
                        - dataGridView1.CurrentRow.Cells["TotalBuy"].Value.ToDecimal()).NormalizeDecimalPlaces(ProSetting.Round).Stringify();

                }
                catch (Exception)
                {
                }
                finally
                {
                    ReleaseCellValueChanged();
                }
            }
            catch { }
            try
            {
                SendKeys.Send("{ENTER}");
            }
            catch { }
        }

        private void Control_Leave(object sender, EventArgs e)
        {
        }

        private void dataGridView1_RowsRemoved(object sender, DataGridViewRowsRemovedEventArgs e)
        {
            try
            {
                Total = 0;
                totalrebh = 0;
                if (e.RowIndex > dataGridView1.Rows.Count - 1)
                {
                    try
                    {
                        newRowbyBarcode = false;
                        dataGridView1.Rows.Add();
                    }
                    catch (Exception exception)
                    {
                    }
                }
                if (dataGridView1.Rows.Count > 1)
                {

                    decimal TB = 0;
                    decimal rebhea = 0;
                    decimal vatitemsTotal = 0;

                    for (int i = 1; i < dataGridView1.Rows.Count; i++)
                    {
                        if (AutomaticColorTextInSales)
                        {

                            try
                            {
                                HandleCellValueChanged();
                                dataGridView1.Rows[i - 1].Cells["ItemColor"].Value = i;
                            }
                            catch
                            {
                            }
                            finally
                            {
                                ReleaseCellValueChanged();
                            }
                        }

                        decimal taxValue = 0;

                        if (ProSetting.ItemsTax)
                        {
                            try
                            {
                                var itemtotal = Math.Round((Convert.ToDecimal(dataGridView1.Rows[i - 1].Cells["UnitPrice"].Value)
                                                             * Convert.ToDecimal(dataGridView1.Rows[i - 1].Cells["Quantity"].Value))
                                    , ProSetting.Round
                                    , MidpointRounding.AwayFromZero);
                                var itemDiscountType =
                                    (DiscountType)Convert.ToByte(dataGridView1.Rows[i - 1].Cells["DiscountType"].Value);
                                var itemDiscount = itemDiscountType == DiscountType.Percentage
                                    ? Math.Round(
                                        (itemtotal * Convert.ToDecimal(
                                             dataGridView1.Rows[i - 1].Cells["Discount"].Value) /
                                         100)
                                        , ProSetting.Round
                                        , MidpointRounding.AwayFromZero)
                                    : Math.Round(Convert.ToDecimal(dataGridView1.Rows[i - 1].Cells["DiscountValue"].Value)
                                        , ProSetting.Round
                                        , MidpointRounding.AwayFromZero);

                                var additionValue =
                                    Convert.ToDecimal(dataGridView1.Rows[i - 1].Cells["AdditionValue"].Value);
                                var itemTax = dataGridView1.Rows[i - 1].Cells["ItemTax"].Value == null ? 0
                                    : Convert.ToDecimal(dataGridView1.Rows[i - 1].Cells["ItemTax"].Value);

                                var netItemSales = Math.Round((itemtotal - itemDiscount)
                                    , ProSetting.Round
                                    , MidpointRounding.AwayFromZero);
                                netItemSales = netItemSales + additionValue;
                                taxValue = Math.Round(((ProSetting.DarebaAfterDiscount ? netItemSales * itemTax / 100 : itemtotal * itemTax / 100))
                                    , ProSetting.Round
                                    , MidpointRounding.AwayFromZero);

                                vatitemsTotal += taxValue;
                            }
                            catch
                            {
                            }
                        }
                        //dataGridView1.Rows[i - 1].Cells["TotalPrice"].Value = Math.Round(((Convert.ToDecimal(dataGridView1.Rows[i - 1].Cells["Quantity"].Value.Stringify()) * Convert.ToDecimal(dataGridView1.Rows[i - 1].Cells["UnitPrice"].Value.Stringify())) * ((100 - Convert.ToDecimal(dataGridView1.Rows[i - 1].Cells["Discount"].Value.Stringify())) / 100)) + Convert.ToDecimal(Tax.Stringify()), ProSetting.Round,MidpointRounding.AwayFromZero).ToString("F" + ProSetting.Round);
                        //dataGridView1.Rows[i - 1].Cells["TotalBuy"].Value = Math.Round(((Convert.ToDecimal(dataGridView1.Rows[i - 1].Cells["Quantity"].Value.Stringify()) * Convert.ToDecimal(dataGridView1.Rows[i - 1].Cells["buyPrice"].Value.Stringify()))), ProSetting.Round,MidpointRounding.AwayFromZero).ToString("F" + ProSetting.Round);
                        //dataGridView1.Rows[i - 1].Cells["Rebhea"].Value = Math.Round(Convert.ToDecimal(dataGridView1.Rows[i - 1].Cells["TotalPrice"].Value.Stringify())-Convert.ToDecimal(Tax.Stringify()) - Convert.ToDecimal(dataGridView1.Rows[i - 1].Cells["TotalBuy"].Value.Stringify()), ProSetting.Round,MidpointRounding.AwayFromZero).ToString("F" + ProSetting.Round);
                        TB = dataGridView1.Rows[i - 1].Cells["TotalPrice"].Value.ToDecimal().RoundBy(ProSetting.Round);
                        rebhea = dataGridView1.Rows[i - 1].Cells["Rebhea"].Value.ToDecimal().RoundBy(ProSetting.Round);
                        Total += TB;
                        totalrebh += rebhea;


                    }
                    textBox5.Text = Math.Round(Total
                        , ProSetting.Round
                        , MidpointRounding.AwayFromZero).ToString("F" + ProSetting.Round);

                    RebheaText.Text = Math.Round(totalrebh - Convert.ToDecimal(textBox3.Text), ProSetting.Round, MidpointRounding.AwayFromZero).ToString("F" + ProSetting.Round);
                    ItemsVATTotalValue = vatitemsTotal;


                }
                else if (dataGridView1.Rows.Count == 1)
                {
                    if (ProSetting.SkipQuantityAssemblingOfAnItem)
                    {
                        _dcItemComponents.Clear();
                    }
                    textBox5.Text = "0";
                    if (BeanKindCom.SelectedIndex == 0)
                    {
                        textBox4.Text = ProSetting.Discount.Stringify();
                    }
                    else
                    {
                        textBox4.Text = "0";
                    }
                    RebheaText.Text = "0.00";
                }
            }
            catch { }

            if (ProSetting.SalesAutoSaveEnabled)
            {
                try
                {
                    CurrentAutoSaveModel.ItemsCount = dataGridView1.RowCount - 1;

                }
                catch (Exception exception)
                {
                }
            }
            try
            {
                decimal weight = 0;
                for (int i = 0; i < dataGridView1.Rows.Count - 1; i++)
                {
                    decimal Qnt = Convert.ToDecimal(dataGridView1.Rows[i].Cells[5].Value.Stringify());
                    decimal UnitWeight = Convert.ToDecimal(Codes.Search2("select isnull(Weight,0) from Units where Name='" + dataGridView1.Rows[i].Cells[4].Value.Stringify() + "'").Rows[0][0].Stringify());
                    weight += Qnt * UnitWeight;
                }
                textBox2.Text = Math.Round(weight, ProSetting.Round, MidpointRounding.AwayFromZero).ToString("F" + ProSetting.Round);
            }
            catch { }
            try
            {
                int Sum = 0; decimal Sum1 = 0;
                for (int i = 0; i < dataGridView1.Rows.Count - 1; i++)
                {
                    Sum1 += Math.Round((Convert.ToDecimal(dataGridView1.Rows[i].Cells[5].Value)), ProSetting.Round, MidpointRounding.AwayFromZero);

                }

                Sum = dataGridView1.Rows.Count - 1;

                if (dataGridView1.Rows.Count == 0)
                {
                    Sum = 0;
                }
                textBox19.Text = Sum.Stringify();
                textBox14.Text = Sum1.Stringify();

            }
            catch { }
            //int a = dataGridView1.CurrentRow.Index;
            dataGridView1.CurrentCell = dataGridView1.Rows[dataGridView1.Rows.Count - 1].Cells["Barcode"];
            if (ProSetting.BarcodeOrItem == "كود الصنف")
            {
                dataGridView1.CurrentCell = dataGridView1.Rows[dataGridView1.Rows.Count - 1].Cells["Barcode"];

            }
            else if (ProSetting.BarcodeOrItem == "اسم الصنف")
            {
                dataGridView1.CurrentCell = dataGridView1.Rows[dataGridView1.RowCount - 1].Cells["ItemName"];
                dataGridView1.CurrentCell.Selected = true;
            }
        }

        private void TransportValue_TextChanged(object sender, EventArgs e)
        {
            try
            {

                x = Math.Round((Convert.ToDecimal((textBox3.Text).Stringify())), ProSetting.Round, MidpointRounding.AwayFromZero);
                y = Math.Round((Convert.ToDecimal((textBox5.Text).Stringify())), ProSetting.Round, MidpointRounding.AwayFromZero);
                decimal Trans = Math.Round((Convert.ToDecimal(TransportValue.Text)), ProSetting.Round, MidpointRounding.AwayFromZero);
                if (ProSetting.DarebaAfterDiscount)
                {
                    TotAfter = Math.Round(((y - x) + (((y - x) * Convert.ToDecimal(DarebaText.Text)) / 100)), ProSetting.Round, MidpointRounding.AwayFromZero);
                }
                else
                {
                    TotAfter = Math.Round(((y - x) + ((y * Convert.ToDecimal(DarebaText.Text)) / 100)), ProSetting.Round, MidpointRounding.AwayFromZero);
                }
                textBox11.Text = Math.Round(((TotAfter + ((TotAfter / 100) * Convert.ToDecimal(textBox20.Text)) + Trans)), ProSetting.Round, MidpointRounding.AwayFromZero).ToString("F" + ProSetting.Round);

            }
            catch
            {
            }
        }

        private void label17_Click(object sender, EventArgs e)
        {

        }

        private void button12_Click(object sender, EventArgs e)
        {
            try
            {

                FrmAllSalesBill f = new FrmAllSalesBill();
                f.Show();
            }
            catch { }
        }


        public static string itName;


        private void dataGridView1_CellDoubleClick(object sender, DataGridViewCellEventArgs e)
        {
            //if (dataGridView1.Columns[e.ColumnIndex].Name == "ItemName")
            //{
            //    itName = "";
            //    //if (dataGridView1.CurrentRow.IsNewRow)
            //    {
            //        FrmSearchItemsPopUp f = new FrmSearchItemsPopUp(StoreCombo.SelectedValue.Stringify(), ProSetting.StoreMinus, "Sales");
            //        f.ShowDialog();
            //        if (itName != "")
            //        {
            //            dataGridView1.CurrentRow.Cells["ItemName"].Value = itName;
            //        }
            //    }
            //}
        }

        private void button15_Click_1(object sender, EventArgs e)
        {
            try
            {
                FrmSearchItemsPopUp f = new FrmSearchItemsPopUp(StoreCombo.SelectedValue.Stringify(), ProSetting.StoreMinus, "Sales");
                f.ShowDialog();
                if (itName != "")
                {
                    ItemCombo.SelectedValue = itName;
                }
            }
            catch { }
        }
        private void ItemCombo_TextChanged(object sender, EventArgs e)
        {
            try
            {
                //if (ItemCombo.Focused)
                //{


                //    DataTable dttt = new DataTable();
                //    dttt.Columns.Add("id");
                //    dttt.Columns.Add("name");
                //    for (int i = 0; i < dtitem.Rows.Count; i++)
                //    {
                //        string x = dtitem.Rows[i][1].Stringify().ToLower();
                //        if (x.Contains(ItemCombo.Text.ToLower()))
                //        {
                //            dttt.Rows.Add(dtitem.Rows[i][0].Stringify(), dtitem.Rows[i][1].Stringify());
                //        }
                //    }
                //    listBox1.DataSource = dttt;
                //    listBox1.DisplayMember = dttt.Columns[1].Stringify();
                //    listBox1.ValueMember = dttt.Columns[0].Stringify();
                //    listBox1.Visible = true;
                //}
            }
            catch { }



        }


        private void listBox1_MouseClick(object sender, MouseEventArgs e)
        {
            try
            {
                ItemCombo.SelectedValue = listBox1.SelectedValue;
                listBox1.Visible = false;
                this.PriceText.Focus();
            }
            catch { }
        }

        private void ItemCombo_KeyDown(object sender, KeyEventArgs e)
        {
            try
            {
                //if ((int)e.KeyValue == 37 || (int)e.KeyValue == 38 || (int)e.KeyValue == 39 || (int)e.KeyValue == 40)
                //{
                //    e.Handled = true;
                //}
                //if ((int)e.KeyValue == 40)
                //{
                //    listBox1.Focus();
                //}
            }
            catch { }
        }

        private void dataGridView1_DataError(object sender, DataGridViewDataErrorEventArgs e)
        {
            try
            {
                var ee = e.Exception;

            }
            catch { }

        }

        private void listBox1_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                try
                {
                    ItemCombo.SelectedValue = listBox1.SelectedValue;
                    listBox1.Visible = false;
                    this.PriceText.Focus();
                }
                catch { }
            }
        }

        private void PriceText_KeyPress(object sender, KeyPressEventArgs e)
        {
            try
            {
                if (((int)e.KeyChar >= 48 && (int)e.KeyChar <= 57) || (int)e.KeyChar == 46 || (int)e.KeyChar == 8)
                {
                    if ((int)e.KeyChar == 46)
                    {
                        if (PriceText.Text.Contains("."))
                            e.Handled = true;
                    }
                }
                else
                    e.Handled = true;
            }
            catch { }
        }

        private void QntText_KeyPress(object sender, KeyPressEventArgs e)
        {
            try
            {
                if (((int)e.KeyChar >= 48 && (int)e.KeyChar <= 57) || (int)e.KeyChar == 46 || (int)e.KeyChar == 8)
                {
                    if ((int)e.KeyChar == 46)
                    {
                        if (QntText.Text.Contains("."))
                            e.Handled = true;
                    }
                }
                else
                    e.Handled = true;
            }
            catch { }
        }

        private void PriceText_Leave(object sender, EventArgs e)
        {
            try
            {
                if (PriceText.Text == "")
                    PriceText.Text = "0";
            }
            catch { }
        }

        private void QntText_Leave(object sender, EventArgs e)
        {
            try
            {
                if (QntText.Text == "")
                    QntText.Text = "0";
            }
            catch { }
        }

        private void checkBox1_CheckedChanged(object sender, EventArgs e)
        {
            try
            {

                if (checkBox1.Checked == true)
                {
                    UnderDelevBill.Visible = true;
                    ProSetting.UnderDelevBill = true;
                }
                else
                {
                    UnderDelevBill.Visible = false;
                    ProSetting.UnderDelevBill = false;
                }
            }
            catch { }
        }

        private void label43_TextChanged(object sender, EventArgs e)
        {
        }

        private void label27_TextChanged(object sender, EventArgs e)
        {
            try
            {
                var dtSupplier = Codes.Search2("select id from suppliers where name=(Select Name From Clients Where ID='" + ClientCombo.SelectedValue + "')");
                if (dtSupplier.Rows.Count > 0)
                {
                    decimal Account = sc.GetSupplierAccount(dtSupplier.Rows[0][0].Stringify());

                    label43.Text = Math
                        .Round(Account, ProSetting.Round, MidpointRounding.AwayFromZero)
                        .ToString("F" + ProSetting.Round);
                    label45.Text = Math.Round(((Convert.ToDecimal(label27.Text) - Convert.ToDecimal(label43.Text))), ProSetting.Round, MidpointRounding.AwayFromZero).ToString("F" + ProSetting.Round);
                    panel8.Visible = true;
                }
                else
                {
                    panel8.Visible = false;
                    label43.Text = label45.Text = "0";
                }
            }
            catch
            {
                label43.Text = "0";
            }

            try
            {
                label22.Text = ProSetting.RassedofClientsupplier && panel8.Visible
                    ? Math.Round(
                            Convert.ToDecimal(label45.Text) + Convert.ToDecimal(textBox11.Text) -
                            Convert.ToDecimal(textBox10.Text),
                            ProSetting.Round, MidpointRounding.AwayFromZero)
                        .ToString("F" + ProSetting.Round)
                    : Math.Round(
                            Convert.ToDecimal(label27.Text) +
                            (Convert.ToDecimal(textBox11.Text) - Convert.ToDecimal(textBox10.Text)),
                            ProSetting.Round, MidpointRounding.AwayFromZero)
                        .ToString("F" + ProSetting.Round);

            }
            catch { }
        }

        private void BillKindCom_SelectedIndexChanged(object sender, EventArgs e)
        {
            #region Unused
            //try
            //{
            //    if (BillKindCom.SelectedIndex == 1)
            //    {
            //        dataGridView1.Columns["UnitPrice"].HeaderText = ProSetting.Price1;
            //        for (int index = 0; index < dataGridView1.Rows.Count; index++)
            //        {
            //            dataGridView1.Rows[index].Cells["UnitPrice"].Selected = true;
            //            dataGridView1.BeginEdit(false);
            //             var price= Codes.Search2("Select Price From ItemsUnit Join Units On ItemsUnit.UnitId= Units.Id "
            //                + "where ItemID='" + dataGridView1.Rows[index].Cells[0].Value + "'"
            //                + " and Units.Name='" + dataGridView1.Rows[index].Cells["mm"].Value + "'").Rows[0][0].Stringify();
            //             dataGridView1.Rows[index].Cells["UnitPrice"].Value = Math.Round(Convert.ToDecimal(price), ProSetting.Round);
            //            dataGridView1.EndEdit();
            //        }
            //    }
            //    else if (BillKindCom.SelectedIndex == 0)
            //    {

            //        dataGridView1.Columns["UnitPrice"].HeaderText = ProSetting.Price2;
            //        for (int index = 0; index < dataGridView1.Rows.Count; index++)
            //        {
            //            dataGridView1.Rows[index].Cells["UnitPrice"].Selected = true;

            //            dataGridView1.BeginEdit(false);

            //            var price = Codes.Search2("Select PriceInter From ItemsUnit Join Units On ItemsUnit.UnitId= Units.Id "
            //                + "where ItemID='" + dataGridView1.Rows[index].Cells[0].Value + "'"
            //                + " and Units.Name='" + dataGridView1.Rows[index].Cells["mm"].Value + "'").Rows[0][0].Stringify();
            //            dataGridView1.Rows[index].Cells["UnitPrice"].Value = Math.Round(Convert.ToDecimal(price), ProSetting.Round);
            //            dataGridView1.EndEdit();

            //        }
            //    }
            //    else if (BillKindCom.SelectedIndex == 2)
            //    {

            //        dataGridView1.Columns["UnitPrice"].HeaderText = ProSetting.Price3;
            //        for (int index = 0; index < dataGridView1.Rows.Count; index++)
            //        {
            //            dataGridView1.Rows[index].Cells["UnitPrice"].Selected = true;

            //            dataGridView1.BeginEdit(false);
            //            var price = Codes.Search2("Select HalfPrice From ItemsUnit Join Units On ItemsUnit.UnitId= Units.Id "
            //               + "where ItemID='" + dataGridView1.Rows[index].Cells[0].Value + "'"
            //               + " and Units.Name='" + dataGridView1.Rows[index].Cells["mm"].Value + "'").Rows[0][0].Stringify();
            //            dataGridView1.Rows[index].Cells["UnitPrice"].Value = Math.Round(Convert.ToDecimal(price), ProSetting.Round);

            //            dataGridView1.EndEdit();

            //        }
            //    }
            //    else if (BillKindCom.SelectedIndex == 3)
            //    {

            //        dataGridView1.Columns["UnitPrice"].HeaderText = ProSetting.Price4;
            //        for (int index = 0; index < dataGridView1.Rows.Count; index++)
            //        {
            //            dataGridView1.Rows[index].Cells["UnitPrice"].Selected = true;

            //            dataGridView1.BeginEdit(false);
            //            var price = Codes.Search2("Select Gomla1 From ItemsUnit Join Units On ItemsUnit.UnitId= Units.Id "
            //               + "where ItemID='" + dataGridView1.Rows[index].Cells[0].Value + "'"
            //               + " and Units.Name='" + dataGridView1.Rows[index].Cells["mm"].Value + "'").Rows[0][0].Stringify();
            //            dataGridView1.Rows[index].Cells["UnitPrice"].Value = Math.Round(Convert.ToDecimal(price), ProSetting.Round);

            //            dataGridView1.EndEdit();


            //        }
            //    }
            //    else if (BillKindCom.SelectedIndex == 4)
            //    {

            //        dataGridView1.Columns["UnitPrice"].HeaderText = ProSetting.Price5;
            //        for (int index = 0; index < dataGridView1.Rows.Count; index++)
            //        {
            //            dataGridView1.Rows[index].Cells["UnitPrice"].Selected = true;

            //            dataGridView1.BeginEdit(false);
            //            var price = Codes.Search2("Select Gomla2 From ItemsUnit Join Units On ItemsUnit.UnitId= Units.Id "
            //               + "where ItemID='" + dataGridView1.Rows[index].Cells[0].Value + "'"
            //               + " and Units.Name='" + dataGridView1.Rows[index].Cells["mm"].Value + "'").Rows[0][0].Stringify();
            //            dataGridView1.Rows[index].Cells["UnitPrice"].Value = Math.Round(Convert.ToDecimal(price), ProSetting.Round);

            //            dataGridView1.EndEdit();

            //        }
            //    }
            //    else
            //    {

            //        dataGridView1.Columns["UnitPrice"].HeaderText = ProSetting.Price1;
            //        for (int index = 0; index < dataGridView1.Rows.Count; index++)
            //        {
            //            dataGridView1.Rows[index].Cells["UnitPrice"].Selected = true;

            //            dataGridView1.BeginEdit(false);
            //            var price = Codes.Search2("Select Price From ItemsUnit Join Units On ItemsUnit.UnitId= Units.Id "
            //               + "where ItemID='" + dataGridView1.Rows[index].Cells[0].Value + "'"
            //               + " and Units.Name='" + dataGridView1.Rows[index].Cells["mm"].Value + "'").Rows[0][0].Stringify();
            //            dataGridView1.Rows[index].Cells["UnitPrice"].Value = Math.Round(Convert.ToDecimal(price), ProSetting.Round);

            //            dataGridView1.EndEdit();

            //        }
            //    }

            //}
            //catch { }
            //dataGridView1.ClearSelection();

            //if (ProSetting.BarcodeOrItem == "كود الصنف")
            //{
            //    dataGridView1.Rows[dataGridView1.Rows.Count - 1].Cells[1].Selected = true;
            //    SendKeys.Send("{ENTER}");
            //}
            //else if (ProSetting.BarcodeOrItem == "اسم الصنف")
            //{
            //    dataGridView1.Rows[dataGridView1.Rows.Count - 1].Cells[2].Selected = true;
            //    SendKeys.Send("{ENTER}");
            //}

            #endregion

            if (ProSetting.ChooseClient)
            {
                try
                {
                    if (ProSetting.ClientBillType)
                    {
                        ClientCombo.BindComboBox("select ID,Name from Clients WHERE Status='True' and BillType='" + BillKindCom.Text + "'" + orderClients, "<-اختر->");
                        //ClientCombo.DisplayMember = dlt.Columns["Name"].Stringify();
                        //ClientCombo.SelectedValueMember = dlt.Columns["ID"].Stringify();
                    }
                    //else
                    //{
                    //    sc.Clients(ClientCombo);
                    //}

                }
                catch { }

            }
            else
            {
                try
                {
                    if (ProSetting.ClientBillType)
                    {
                        ClientCombo.BindComboBox("select ID,Name from Clients WHERE Status='True' and BillType='" + BillKindCom.Text + "'" + orderClients);
                    }
                    //else
                    //{
                    //    sc.ClientsWithout(ClientCombo);
                    //}
                }
                catch { }
            }
        }

        private bool itemAdded = false;
        private void dataGridView1_PreviewKeyDown(object sender, PreviewKeyDownEventArgs e)
        {
            try
            {
                if ((StoreCombo.SelectedValue.ToInt32() == 0 && ClientCombo.SelectedValue.ToInt32() == 0))
                {
                    MessageBox.Show(Tr.M2.m538);
                    return;
                }
                if (StoreCombo.SelectedValue.ToInt32() == 0)
                {
                    MessageBox.Show(Tr.M2.m536);
                    return;
                }
                if (ClientCombo.SelectedValue.ToInt32() == 0)
                {
                    MessageBox.Show(Tr.M2.m537);
                    return;
                }
                if (e.KeyCode == Keys.Space)
                {
                    if (dataGridView1.CurrentCell.OwningColumn.Name == "ItemName")
                    {
                        FrmMainNEW.Selected = false; FrmMainNEW.ItemName = "";
                        _lastAddItemColumnIndex = 2;
                        FrmItemContainSearch f = new FrmItemContainSearch(
                            StoreCombo.SelectedValue.Stringify(),
                            ClientCombo.SelectedValue.Stringify()
                            , BillKindCom.Text, StoreCombo.Text);
                        f.ShowDialog();

                        if (FrmMainNEW.Selected && FrmMainNEW.ItemName != "")
                        {
                            itemAdded = true;
                            var viewCount = dataGridView1.RowCount - 1;
                            int xIndex = dataGridView1.CurrentRow.Index;
                            dataGridView1.CurrentRow.Cells["ItemName"].Value = FrmMainNEW.ItemName;
                            dataGridView1.NotifyCurrentCellDirty(false);
                            dataGridView1.EndEdit();
                            dataGridView1.NotifyCurrentCellDirty(true);
                            dataGridView1.NotifyCurrentCellDirty(false);

                            itemAdded = viewCount < dataGridView1.RowCount - 1;
                            //if (!ProSetting.OnQuantity)
                            //    SendKeys.Send("{ESC}");
                            if (xIndex > 0)
                            {
                                try
                                {
                                    if (dataGridView1.Rows[dataGridView1.Rows.Count - 2].Cells[2].Value == null)
                                    {
                                        dataGridView1.Rows.Remove(dataGridView1.Rows[dataGridView1.Rows.Count - 2]);
                                    }
                                }
                                catch { }
                            }
                            try
                            {
                                decimal TB = 0;
                                decimal Rebhea = 0;
                                for (int i = 1; i < dataGridView1.Rows.Count; i++)
                                {
                                    TB += Math.Round((Convert.ToDecimal(dataGridView1.Rows[i - 1].Cells["TotalPrice"].Value.Stringify())), ProSetting.Round, MidpointRounding.AwayFromZero);
                                    Rebhea += Math.Round((Convert.ToDecimal(dataGridView1.Rows[i - 1].Cells["Rebhea"].Value.Stringify())), ProSetting.Round, MidpointRounding.AwayFromZero);
                                    //Dis += Convert.ToDecimal(dataGridView1.Rows[i - 1].Cells[7].Value.Stringify());

                                    Total = TB;
                                    totalrebh = Rebhea;
                                    amu = false;

                                }
                                textBox5.Text = Math.Round(Total
                                    , ProSetting.Round
                                    , MidpointRounding.AwayFromZero).ToString("F" + ProSetting.Round);


                                RebheaText.Text = Math.Round(totalrebh - Convert.ToDecimal(textBox3.Text), ProSetting.Round, MidpointRounding.AwayFromZero).ToString("F" + ProSetting.Round);
                            }
                            catch { }
                            try
                            {
                                if (ProSetting.OnQuantity && itemAdded)
                                {
                                    dataGridView1.CurrentCell =
                                        dataGridView1.Rows[dataGridView1.Rows.Count - 2].Cells["Quantity"];
                                    dataGridView1.CellEndEdit -= dataGridView1_CellEndEdit;
                                    dataGridView1.CellBeginEdit -= dataGridView1_CellBeginEdit;
                                    dataGridView1.CellFormatting -= dataGridView1_CellFormatting;
                                    dataGridView1.CellValidating -= dataGridView1_CellValidating;
                                    try
                                    {

                                        dataGridView1.BeginEdit(true);
                                    }
                                    catch
                                    {
                                    }

                                    dataGridView1.CellEndEdit += dataGridView1_CellEndEdit;
                                    dataGridView1.CellBeginEdit += dataGridView1_CellBeginEdit;
                                    dataGridView1.CellFormatting += dataGridView1_CellFormatting;
                                    dataGridView1.CellValidating += dataGridView1_CellValidating;
                                }
                                else
                                {
                                    if (ProSetting.BarcodeOrItem == "كود الصنف")
                                    {
                                        dataGridView1.CurrentCell = dataGridView1.Rows[dataGridView1.Rows.Count - 1].Cells["Barcode"];
                                        if (!itemAdded && !ProSetting.OnQuantity)
                                            SendKeys.Send("{ENTER}");
                                        dataGridView1.CellEndEdit -= dataGridView1_CellEndEdit;
                                        dataGridView1.CellBeginEdit -= dataGridView1_CellBeginEdit;
                                        dataGridView1.CellFormatting -= dataGridView1_CellFormatting;
                                        dataGridView1.CellValidating -= dataGridView1_CellValidating;
                                        try
                                        {

                                            dataGridView1.BeginEdit(true);
                                        }
                                        catch
                                        {
                                        }

                                        dataGridView1.CellEndEdit += dataGridView1_CellEndEdit;
                                        dataGridView1.CellBeginEdit += dataGridView1_CellBeginEdit;
                                        dataGridView1.CellFormatting += dataGridView1_CellFormatting;
                                        dataGridView1.CellValidating += dataGridView1_CellValidating;
                                    }
                                    else if (ProSetting.BarcodeOrItem == "اسم الصنف")
                                    {
                                        dataGridView1.CurrentCell = dataGridView1.Rows[dataGridView1.Rows.Count - 1].Cells[2];
                                    }
                                    else
                                    {
                                        var index = dataGridView1.CurrentRow.Index + 1 >= dataGridView1.RowCount
                                            ? dataGridView1.RowCount - 1
                                            : dataGridView1.CurrentRow.Index + 1;

                                        var colIndex = index == dataGridView1.RowCount - 1
                                            ? _lastAddItemColumnIndex
                                            : dataGridView1.CurrentCell.ColumnIndex;

                                        dataGridView1.CurrentCell = dataGridView1.Rows[index].Cells[colIndex];
                                        dataGridView1.CurrentCell.Selected = true;
                                    }
                                    //SendKeys.Send("{ESC}");
                                }
                            }
                            catch { }

                            try
                            {
                                if (!ProSetting.ShowItemImage)
                                {
                                    CalculatePreferredWidthForColumns();
                                    //dataGridView1.AutoResizeColumns(DataGridViewAutoSizeColumnsMode.AllCells);
                                }
                            }
                            catch
                            {
                            }
                        }

                    }
                }
                if (e.KeyCode == Keys.Enter)
                {
                    if (dataGridView1.CurrentCell.OwningColumn.Name == "Quantity")
                    {
                        if (dataGridView1.CurrentRow.Cells[0].Value == null)
                        {
                            if (ProSetting.OnQuantity && QuantityChecked)
                            {
                                QuantityChecked = false;
                                dataGridView1.CurrentCell = dataGridView1.Rows[dataGridView1.CurrentRow.Index - 1].Cells["Quantity"];
                                dataGridView1.CellEndEdit -= dataGridView1_CellEndEdit;
                                dataGridView1.CellBeginEdit -= dataGridView1_CellBeginEdit;
                                dataGridView1.CellFormatting -= dataGridView1_CellFormatting;
                                dataGridView1.CellValidating -= dataGridView1_CellValidating;
                                try
                                {

                                    dataGridView1.BeginEdit(true);
                                }
                                catch
                                {
                                }

                                dataGridView1.CellEndEdit += dataGridView1_CellEndEdit;
                                dataGridView1.CellBeginEdit += dataGridView1_CellBeginEdit;
                                dataGridView1.CellFormatting += dataGridView1_CellFormatting;
                                dataGridView1.CellValidating += dataGridView1_CellValidating;
                            }
                            else if (ProSetting.BarcodeOrItem == "كود الصنف")
                            {
                                dataGridView1.CurrentCell = dataGridView1.Rows[dataGridView1.Rows.Count - 1].Cells["Barcode"];
                                dataGridView1.CellEndEdit -= dataGridView1_CellEndEdit;
                                dataGridView1.CellBeginEdit -= dataGridView1_CellBeginEdit;
                                dataGridView1.CellFormatting -= dataGridView1_CellFormatting;
                                dataGridView1.CellValidating -= dataGridView1_CellValidating;
                                try
                                {

                                    dataGridView1.BeginEdit(true);
                                }
                                catch
                                {
                                }

                                dataGridView1.CellEndEdit += dataGridView1_CellEndEdit;
                                dataGridView1.CellBeginEdit += dataGridView1_CellBeginEdit;
                                dataGridView1.CellFormatting += dataGridView1_CellFormatting;
                                dataGridView1.CellValidating += dataGridView1_CellValidating;
                            }
                            else if (ProSetting.BarcodeOrItem == "اسم الصنف")
                            {
                                dataGridView1.CurrentCell = dataGridView1.Rows[dataGridView1.Rows.Count - 1].Cells[2];
                            }
                            else
                            {
                                var index = dataGridView1.CurrentRow.Index + 1 >= dataGridView1.RowCount
                                            ? dataGridView1.RowCount - 1
                                            : dataGridView1.CurrentRow.Index + 1;

                                var colIndex = index == dataGridView1.RowCount - 1
                                    ? _lastAddItemColumnIndex
                                    : dataGridView1.CurrentCell.ColumnIndex;

                                dataGridView1.CurrentCell = dataGridView1.Rows[index].Cells[colIndex];
                                dataGridView1.CurrentCell.Selected = true;
                            }

                        }
                        else if (dataGridView1.CurrentRow.Cells[0].Value != null)
                        {
                            if (ProSetting.Qnt)
                            {
                                FrmMainNEW.QntSelected = false;
                                FrmQnt f = new FrmQnt();
                                f.ShowDialog();

                                if (FrmMainNEW.QntSelected)
                                {
                                    dataGridView1.BeginEdit(true);
                                    if (ProSetting.ColorOrSerial == "المقاس")
                                    {
                                        dataGridView1.CurrentRow.Cells["ItemColor"].Value = FrmMainNEW.ItemSize;
                                    }
                                    dataGridView1.CurrentRow.Cells["Quantity"].Value = FrmMainNEW.Qnt.NormalizeDecimalPlaces().Stringify();
                                    dataGridView1.EndEdit(DataGridViewDataErrorContexts.Commit);

                                    decimal TB = 0;
                                    decimal Rebhea = 0;
                                    for (int i = 1; i < dataGridView1.Rows.Count; i++)
                                    {
                                        TB += Math.Round((Convert.ToDecimal(dataGridView1.Rows[i - 1].Cells["TotalPrice"].Value.Stringify())), ProSetting.Round, MidpointRounding.AwayFromZero);
                                        Rebhea += Math.Round((Convert.ToDecimal(dataGridView1.Rows[i - 1].Cells["Rebhea"].Value.Stringify())), ProSetting.Round, MidpointRounding.AwayFromZero);
                                        //Dis += Convert.ToDecimal(dataGridView1.Rows[i - 1].Cells[7].Value.Stringify());

                                        Total = TB;
                                        totalrebh = Rebhea;
                                        amu = false;
                                    }
                                    textBox5.Text = Math.Round(Total
                                        , ProSetting.Round
                                        , MidpointRounding.AwayFromZero).ToString("F" + ProSetting.Round);
                                    RebheaText.Text = Math.Round(totalrebh - Convert.ToDecimal(textBox3.Text), ProSetting.Round, MidpointRounding.AwayFromZero).ToString("F" + ProSetting.Round);
                                }
                                dataGridView1.NotifyCurrentCellDirty(false);
                                dataGridView1.EndEdit();
                                dataGridView1.NotifyCurrentCellDirty(true);
                                dataGridView1.NotifyCurrentCellDirty(false);

                            }
                            //if (dataGridView1.CurrentRow.Index != dataGridView1.Rows.Count - 1)
                            {
                                try
                                {
                                    if (dataGridView1.Rows.Count == 2)
                                    {
                                        if (ProSetting.OnQuantity)
                                        {
                                            dataGridView1.CurrentCell = dataGridView1.Rows[0].Cells["Quantity"];
                                            dataGridView1.CellEndEdit -= dataGridView1_CellEndEdit;
                                            dataGridView1.CellBeginEdit -= dataGridView1_CellBeginEdit;
                                            dataGridView1.CellFormatting -= dataGridView1_CellFormatting;
                                            dataGridView1.CellValidating -= dataGridView1_CellValidating;
                                            try
                                            {

                                                dataGridView1.BeginEdit(true);
                                            }
                                            catch
                                            {
                                            }

                                            dataGridView1.CellEndEdit += dataGridView1_CellEndEdit;
                                            dataGridView1.CellBeginEdit += dataGridView1_CellBeginEdit;
                                            dataGridView1.CellFormatting += dataGridView1_CellFormatting;
                                            dataGridView1.CellValidating += dataGridView1_CellValidating;
                                        }
                                    }
                                    else
                                    {
                                        if (ProSetting.BarcodeOrItem == "كود الصنف")
                                        {
                                            dataGridView1.CurrentCell = dataGridView1.Rows[dataGridView1.Rows.Count - 1].Cells["Barcode"];
                                            dataGridView1.CellEndEdit -= dataGridView1_CellEndEdit;
                                            dataGridView1.CellBeginEdit -= dataGridView1_CellBeginEdit;
                                            dataGridView1.CellFormatting -= dataGridView1_CellFormatting;
                                            dataGridView1.CellValidating -= dataGridView1_CellValidating;
                                            try
                                            {

                                                dataGridView1.BeginEdit(true);
                                            }
                                            catch
                                            {
                                            }

                                            dataGridView1.CellEndEdit += dataGridView1_CellEndEdit;
                                            dataGridView1.CellBeginEdit += dataGridView1_CellBeginEdit;
                                            dataGridView1.CellFormatting += dataGridView1_CellFormatting;
                                            dataGridView1.CellValidating += dataGridView1_CellValidating;
                                        }
                                        else if (ProSetting.BarcodeOrItem == "اسم الصنف")
                                        {
                                            dataGridView1.CurrentCell = dataGridView1.Rows[dataGridView1.Rows.Count - 1].Cells[2];
                                        }
                                        else
                                        {
                                            var index = dataGridView1.CurrentRow.Index + 1 >= dataGridView1.RowCount
                                           ? dataGridView1.RowCount - 1
                                           : dataGridView1.CurrentRow.Index + 1;
                                            if (index == dataGridView1.RowCount - 1)
                                            {
                                                var colIndex = _lastAddItemColumnIndex;
                                                dataGridView1.CurrentCell = dataGridView1.Rows[index].Cells[colIndex];
                                                dataGridView1.CurrentCell.Selected = true;
                                            }
                                        }
                                        //}
                                    }
                                }
                                catch { }

                            }
                            //dataGridView1.CurrentCell = dataGridView1.CurrentRow.Cells["Barcode"];
                        }
                    }
                    else if (dataGridView1.CurrentCell.OwningColumn.Name == "ItemColor")
                    {
                        if (ProSetting.ColorOrSerial == "السيريال")
                        {
                            FrmMainNEW.SerialSelected = false;
                            FrmSerialContainSearch f = new FrmSerialContainSearch(dataGridView1.CurrentRow.Cells["StoreID"].Value.Stringify(), dataGridView1.CurrentRow.Cells["ItemID"].Value.Stringify());
                            f.ShowDialog();

                            if (FrmMainNEW.SerialSelected)
                            {
                                dataGridView1.CurrentRow.Cells["ItemColor"].Value = FrmMainNEW.Serial;
                            }
                        }
                        else if (ProSetting.ColorOrSerial == "اللون")
                        {
                            if (ProSetting.ColorList)
                            {
                                FrmMainNEW.ColorSelected = false;
                                FrmColorList f = new FrmColorList();
                                f.ShowDialog();

                                if (FrmMainNEW.ColorSelected)
                                {
                                    dataGridView1.CurrentRow.Cells["ItemColor"].Value = FrmMainNEW.Colors;
                                }
                            }

                        }
                        if (ProSetting.BarcodeOrItem == "كود الصنف")
                        {
                            dataGridView1.CurrentCell = dataGridView1.Rows[dataGridView1.Rows.Count - 1].Cells["Barcode"];
                            dataGridView1.CellEndEdit -= dataGridView1_CellEndEdit;
                            dataGridView1.CellBeginEdit -= dataGridView1_CellBeginEdit;
                            dataGridView1.CellFormatting -= dataGridView1_CellFormatting;
                            dataGridView1.CellValidating -= dataGridView1_CellValidating;
                            try
                            {

                                dataGridView1.BeginEdit(true);
                            }
                            catch
                            {
                            }

                            dataGridView1.CellEndEdit += dataGridView1_CellEndEdit;
                            dataGridView1.CellBeginEdit += dataGridView1_CellBeginEdit;
                            dataGridView1.CellFormatting += dataGridView1_CellFormatting;
                            dataGridView1.CellValidating += dataGridView1_CellValidating;
                        }
                        else if (ProSetting.BarcodeOrItem == "اسم الصنف")
                        {
                            dataGridView1.CurrentCell = dataGridView1.Rows[dataGridView1.Rows.Count - 1].Cells[2];
                        }
                        else
                        {
                            var index = dataGridView1.CurrentRow.Index + 1 >= dataGridView1.RowCount
                                           ? dataGridView1.RowCount - 1
                                           : dataGridView1.CurrentRow.Index + 1;

                            var colIndex = index == dataGridView1.RowCount - 1
                                ? _lastAddItemColumnIndex
                                : dataGridView1.CurrentCell.ColumnIndex;

                            dataGridView1.CurrentCell = dataGridView1.Rows[index].Cells[colIndex];
                            dataGridView1.CurrentCell.Selected = true;

                        }
                    }
                    else if (dataGridView1.CurrentCell.OwningColumn.Name == "UnitPrice")
                    {
                        //if (dataGridView1.CurrentRow.Index == dataGridView1.RowCount - 1)
                        //{
                        if (ProSetting.BarcodeOrItem == "كود الصنف")
                        {
                            dataGridView1.CurrentCell = dataGridView1.Rows[dataGridView1.Rows.Count - 1].Cells["Barcode"];
                            dataGridView1.CellEndEdit -= dataGridView1_CellEndEdit;
                            dataGridView1.CellBeginEdit -= dataGridView1_CellBeginEdit;
                            dataGridView1.CellFormatting -= dataGridView1_CellFormatting;
                            dataGridView1.CellValidating -= dataGridView1_CellValidating;
                            try
                            {

                                dataGridView1.BeginEdit(true);
                            }
                            catch
                            {
                            }

                            dataGridView1.CellEndEdit += dataGridView1_CellEndEdit;
                            dataGridView1.CellBeginEdit += dataGridView1_CellBeginEdit;
                            dataGridView1.CellFormatting += dataGridView1_CellFormatting;
                            dataGridView1.CellValidating += dataGridView1_CellValidating;
                        }
                        else if (ProSetting.BarcodeOrItem == "اسم الصنف")
                        {
                            dataGridView1.CurrentCell = dataGridView1.Rows[dataGridView1.Rows.Count - 1].Cells[2];
                        }
                        else
                        {
                            var index = dataGridView1.CurrentRow.Index + 1 >= dataGridView1.RowCount
                                            ? dataGridView1.RowCount - 1
                                            : dataGridView1.CurrentRow.Index + 1;

                            var colIndex = index == dataGridView1.RowCount - 1
                                ? _lastAddItemColumnIndex
                                : dataGridView1.CurrentCell.ColumnIndex;

                            dataGridView1.CurrentCell = dataGridView1.Rows[index].Cells[colIndex];
                            dataGridView1.CurrentCell.Selected = true;

                        }
                        //else
                        //{

                        //    try
                        //    {
                        //        dataGridView1.CurrentCell =
                        //                                dataGridView1.CurrentRow.Index < dataGridView1.RowCount - 2
                        //                                    ? dataGridView1.Rows[dataGridView1.CurrentRow.Index + 1]
                        //                                        .Cells[dataGridView1.CurrentCell.ColumnIndex]
                        //                                    : dataGridView1.Rows[dataGridView1.CurrentRow.Index + 1].Cells[1];
                        //    }
                        //    catch (Exception ex)
                        //    {
                        //    }
                        //}
                        //}
                        //else
                        //    dataGridView1.CurrentCell = dataGridView1.Rows[dataGridView1.CurrentRow.Index].Cells["UnitPrice"];
                    }
                    else
                    {
                        try
                        {
                            if (dataGridView1.CurrentCell.OwningColumn.Name == "Barcode"
                                && ProSetting.OnQuantity
                                && newRowbyBarcode)
                            {

                                if (dataGridView1.CurrentRow.IsNewRow)
                                {
                                    //dataGridView1.NotifyCurrentCellDirty(true);
                                    //dataGridView1.EndEdit();
                                    //dataGridView1.NotifyCurrentCellDirty(false);

                                    dataGridView1.CurrentCell
                                        = dataGridView1.Rows.Count == 2
                                            ? dataGridView1.Rows[0].Cells["Quantity"]
                                            : dataGridView1.Rows[dataGridView1.RowCount - 2].Cells["Quantity"];

                                }
                                else
                                {
                                    dataGridView1.CurrentCell = dataGridView1.CurrentRow.Cells["Quantity"];

                                }
                                dataGridView1.CellEndEdit -= dataGridView1_CellEndEdit;
                                dataGridView1.CellBeginEdit -= dataGridView1_CellBeginEdit;
                                dataGridView1.CellFormatting -= dataGridView1_CellFormatting;
                                dataGridView1.CellValidating -= dataGridView1_CellValidating;
                                try
                                {

                                    dataGridView1.BeginEdit(true);
                                }
                                catch
                                {
                                }

                                dataGridView1.CellEndEdit += dataGridView1_CellEndEdit;
                                dataGridView1.CellBeginEdit += dataGridView1_CellBeginEdit;
                                dataGridView1.CellFormatting += dataGridView1_CellFormatting;
                                dataGridView1.CellValidating += dataGridView1_CellValidating;
                                newRowbyBarcode = false;
                            }
                            else
                            {
                                if (dataGridView1.Rows[dataGridView1.Rows.Count - 2].Cells[0].Value == null &&
                                    dataGridView1.Rows[dataGridView1.Rows.Count - 2].Cells[1].Value == null &&
                                    dataGridView1.Rows[dataGridView1.Rows.Count - 2].Cells[2].Value == null)
                                {
                                    try
                                    {
                                        dataGridView1.Rows.Remove(dataGridView1.Rows[dataGridView1.Rows.Count - 2]);
                                    }
                                    catch (Exception ee)
                                    {
                                    }
                                }
                                if (ProSetting.BarcodeOrItem == "كود الصنف")
                                {
                                    dataGridView1.CurrentCell = dataGridView1.Rows[dataGridView1.Rows.Count - 1].Cells["Barcode"];
                                    dataGridView1.CellEndEdit -= dataGridView1_CellEndEdit;
                                    dataGridView1.CellBeginEdit -= dataGridView1_CellBeginEdit;
                                    dataGridView1.CellFormatting -= dataGridView1_CellFormatting;
                                    dataGridView1.CellValidating -= dataGridView1_CellValidating;
                                    try
                                    {

                                        dataGridView1.BeginEdit(true);
                                    }
                                    catch
                                    {
                                    }

                                    dataGridView1.CellEndEdit += dataGridView1_CellEndEdit;
                                    dataGridView1.CellBeginEdit += dataGridView1_CellBeginEdit;
                                    dataGridView1.CellFormatting += dataGridView1_CellFormatting;
                                    dataGridView1.CellValidating += dataGridView1_CellValidating;
                                }
                                else if (ProSetting.BarcodeOrItem == "اسم الصنف")
                                {
                                    dataGridView1.CurrentCell = dataGridView1.Rows[dataGridView1.Rows.Count - 1].Cells[2];

                                }
                                //else
                                //{

                                //    try
                                //    {
                                //        dataGridView1.CurrentCell =
                                //            dataGridView1.CurrentRow.Index < dataGridView1.RowCount - 2
                                //                ? dataGridView1.Rows[dataGridView1.CurrentRow.Index + 1]
                                //                    .Cells[dataGridView1.CurrentCell.ColumnIndex]
                                //                : dataGridView1.Rows[dataGridView1.CurrentRow.Index + 1].Cells[1];
                                //    }
                                //    catch (Exception ex)
                                //    {
                                //    }
                                //}
                            }
                        }
                        catch { }
                    }
                    if (dataGridView1.Rows[dataGridView1.Rows.Count - 2].Cells[0].Value == null &&
                        dataGridView1.Rows[dataGridView1.Rows.Count - 2].Cells[1].Value == null &&
                        dataGridView1.Rows[dataGridView1.Rows.Count - 2].Cells[2].Value == null)
                    {
                        try
                        {
                            dataGridView1.Rows.Remove(dataGridView1.Rows[dataGridView1.Rows.Count - 2]);
                        }
                        catch (Exception ee)
                        {
                        }
                    }
                }
            }
            catch { }
        }
        string Bar = "";
        private void dataGridView1_MouseClick(object sender, MouseEventArgs e)
        {
            try
            {

                if ((StoreCombo.SelectedValue.ToInt32() == 0 && ClientCombo.SelectedValue.ToInt32() == 0))
                {
                    MessageBox.Show(Tr.M2.m538);
                    return;
                }
                if (StoreCombo.SelectedValue.ToInt32() == 0)
                {
                    MessageBox.Show(Tr.M2.m536);
                    return;
                }
                if (ClientCombo.SelectedValue.ToInt32() == 0)
                {
                    MessageBox.Show(Tr.M2.m537);
                    return;
                }

                var cellClicked = dataGridView1.HitTest(e.X, e.Y);
                var rowindex = cellClicked.RowIndex;
                var columnIndex = cellClicked.ColumnIndex;
                if (rowindex < 0)
                    return;
                // ItemName
                if (columnIndex == dataGridView1.Columns["ItemName"].Index && ProSetting.ItemCombo)
                {
                    FrmMainNEW.Selected = false;
                    FrmMainNEW.ItemName = null;
                    _lastAddItemColumnIndex = 2;
                    FrmItemContainSearch f = new FrmItemContainSearch(
                        StoreCombo.SelectedValue.Stringify(),
                        ClientCombo.SelectedValue.Stringify()
                        , BillKindCom.Text, StoreCombo.Text);
                    f.ShowDialog();

                    if (FrmMainNEW.Selected)
                    {
                        itemAdded = true;
                        var viewCount = dataGridView1.RowCount - 1;
                        dataGridView1.CurrentRow.Cells["ItemName"].Value = FrmMainNEW.ItemName;
                        itemAdded = viewCount < dataGridView1.RowCount - 1;
                        dataGridView1.NotifyCurrentCellDirty(false);
                        dataGridView1.EndEdit();
                        dataGridView1.NotifyCurrentCellDirty(true);
                        dataGridView1.NotifyCurrentCellDirty(false);

                        try
                        {
                            if (!ProSetting.ShowItemImage)
                            {
                                CalculatePreferredWidthForColumns();
                                //dataGridView1.AutoResizeColumns(DataGridViewAutoSizeColumnsMode.AllCells);
                            }

                        }
                        catch
                        {
                        }
                        try
                        {
                            if (ProSetting.OnQuantity && itemAdded)
                            {
                                dataGridView1.CurrentCell =
                                    dataGridView1.Rows[dataGridView1.Rows.Count - 2].Cells["Quantity"];
                                dataGridView1.CellEndEdit -= dataGridView1_CellEndEdit;
                                dataGridView1.CellBeginEdit -= dataGridView1_CellBeginEdit;
                                dataGridView1.CellFormatting -= dataGridView1_CellFormatting;
                                dataGridView1.CellValidating -= dataGridView1_CellValidating;
                                try
                                {

                                    dataGridView1.BeginEdit(true);
                                }
                                catch
                                {
                                }

                                dataGridView1.CellEndEdit += dataGridView1_CellEndEdit;
                                dataGridView1.CellBeginEdit += dataGridView1_CellBeginEdit;
                                dataGridView1.CellFormatting += dataGridView1_CellFormatting;
                                dataGridView1.CellValidating += dataGridView1_CellValidating;
                            }
                            else
                            {
                                if (ProSetting.BarcodeOrItem == "كود الصنف")
                                {
                                    dataGridView1.CurrentCell = dataGridView1.Rows[dataGridView1.Rows.Count - 1].Cells["Barcode"];
                                    if (!itemAdded && !ProSetting.OnQuantity)
                                        SendKeys.Send("{ENTER}");
                                    dataGridView1.CellEndEdit -= dataGridView1_CellEndEdit;
                                    dataGridView1.CellBeginEdit -= dataGridView1_CellBeginEdit;
                                    dataGridView1.CellFormatting -= dataGridView1_CellFormatting;
                                    dataGridView1.CellValidating -= dataGridView1_CellValidating;
                                    try
                                    {

                                        dataGridView1.BeginEdit(true);
                                    }
                                    catch
                                    {
                                    }

                                    dataGridView1.CellEndEdit += dataGridView1_CellEndEdit;
                                    dataGridView1.CellBeginEdit += dataGridView1_CellBeginEdit;
                                    dataGridView1.CellFormatting += dataGridView1_CellFormatting;
                                    dataGridView1.CellValidating += dataGridView1_CellValidating;

                                }
                                else if (ProSetting.BarcodeOrItem == "اسم الصنف")
                                {
                                    dataGridView1.CurrentCell = dataGridView1.Rows[dataGridView1.Rows.Count - 1].Cells[2];
                                }
                                else
                                {

                                    var index = dataGridView1.CurrentRow.Index + 1 >= dataGridView1.RowCount
                                           ? dataGridView1.RowCount - 1
                                           : dataGridView1.CurrentRow.Index + 1;

                                    var colIndex = index == dataGridView1.RowCount - 1
                                        ? _lastAddItemColumnIndex
                                        : dataGridView1.CurrentCell.ColumnIndex;

                                    dataGridView1.CurrentCell = dataGridView1.Rows[index].Cells[colIndex];
                                    dataGridView1.CurrentCell.Selected = true;
                                }
                            }
                        }
                        catch { }
                        //dataGridView1.CurrentCell = dataGridView1.CurrentRow.Cells["Quantity"];
                        //dataGridView1.BeginEdit(true);
                        try
                        {
                            decimal TB = 0;
                            decimal Rebhea = 0;
                            for (int i = 1; i < dataGridView1.Rows.Count; i++)
                            {
                                TB += Math.Round((Convert.ToDecimal(dataGridView1.Rows[i - 1].Cells["TotalPrice"].Value.Stringify()))
                                    , ProSetting.Round
                                    , MidpointRounding.AwayFromZero);
                                Rebhea += Math.Round((Convert.ToDecimal(dataGridView1.Rows[i - 1].Cells["Rebhea"].Value.Stringify())), ProSetting.Round, MidpointRounding.AwayFromZero);

                                Total = TB;
                                totalrebh = Rebhea;
                                amu = false;
                            }
                            textBox5.Text = Math.Round(Total
                                , ProSetting.Round
                                , MidpointRounding.AwayFromZero).ToString("F" + ProSetting.Round);
                            RebheaText.Text = Math.Round(totalrebh - Convert.ToDecimal(textBox3.Text), ProSetting.Round, MidpointRounding.AwayFromZero).ToString("F" + ProSetting.Round);
                            Total = 0;
                            totalrebh = 0;
                        }
                        catch { }
                        try
                        {
                            decimal weight = 0;
                            for (int i = 0; i < dataGridView1.Rows.Count - 1; i++)
                            {
                                decimal Qnt = Convert.ToDecimal(dataGridView1.Rows[i].Cells[5].Value.Stringify());
                                decimal UnitWeight = Convert.ToDecimal(Codes.Search2("select isnull(Weight,0) from Units where Name='" + dataGridView1.Rows[i].Cells[4].Value.Stringify() + "'").Rows[0][0].Stringify());
                                weight += Qnt * UnitWeight;
                            }
                            textBox2.Text = Math.Round(weight, ProSetting.Round, MidpointRounding.AwayFromZero).ToString("F" + ProSetting.Round);
                        }
                        catch { }
                    }
                }
                //Barcode
                if (columnIndex == dataGridView1.Columns["Barcode"].Index)
                {
                    if (ProSetting.Barcode)
                    {
                        try
                        {
                            if (StoreCombo.Text == "<-اختر->")
                            {
                                MessageBox.Show(Tr.M1.m0299);
                            }
                            else
                            {
                                ItemIDbyBarcode = ""; decimal Buy = 0; ItemBarcode = "";
                                _lastAddItemColumnIndex = 1;
                                FrmSearchBarcode f = new FrmSearchBarcode(StoreCombo.SelectedValue.Stringify());
                                f.ShowDialog();
                                if (ItemIDbyBarcode == "")
                                {
                                    return;
                                }
                                if (ItemBarcode == "")
                                {
                                    return;
                                }
                                itemAdded = true;
                                var viewCount = dataGridView1.RowCount - 1;
                                dataGridView1.Rows[viewCount].Cells["Barcode"].Value = ItemBarcode;
                                itemAdded = viewCount < dataGridView1.RowCount - 1;
                                dataGridView1.NotifyCurrentCellDirty(false);
                                dataGridView1.EndEdit();
                                dataGridView1.NotifyCurrentCellDirty(true);
                                dataGridView1.NotifyCurrentCellDirty(false);

                                try
                                {
                                    if (!ProSetting.ShowItemImage)
                                    {
                                        CalculatePreferredWidthForColumns();
                                        //dataGridView1.AutoResizeColumns(DataGridViewAutoSizeColumnsMode.AllCells);
                                    }
                                }
                                catch
                                {
                                }


                                try
                                {
                                    if (ProSetting.OnQuantity && itemAdded)
                                    {
                                        dataGridView1.CurrentCell =
                                            dataGridView1.Rows[dataGridView1.Rows.Count - 2].Cells["Quantity"];
                                        dataGridView1.CellEndEdit -= dataGridView1_CellEndEdit;
                                        dataGridView1.CellBeginEdit -= dataGridView1_CellBeginEdit;
                                        dataGridView1.CellFormatting -= dataGridView1_CellFormatting;
                                        dataGridView1.CellValidating -= dataGridView1_CellValidating;
                                        try
                                        {

                                            dataGridView1.BeginEdit(true);
                                        }
                                        catch
                                        {
                                        }

                                        dataGridView1.CellEndEdit += dataGridView1_CellEndEdit;
                                        dataGridView1.CellBeginEdit += dataGridView1_CellBeginEdit;
                                        dataGridView1.CellFormatting += dataGridView1_CellFormatting;
                                        dataGridView1.CellValidating += dataGridView1_CellValidating;
                                    }
                                    else
                                    {
                                        if (ProSetting.BarcodeOrItem == "كود الصنف")
                                        {
                                            dataGridView1.CurrentCell = dataGridView1.Rows[dataGridView1.Rows.Count - 1].Cells["Barcode"];
                                            if (!itemAdded && !ProSetting.OnQuantity)
                                                SendKeys.Send("{ENTER}");
                                            dataGridView1.CellEndEdit -= dataGridView1_CellEndEdit;
                                            dataGridView1.CellBeginEdit -= dataGridView1_CellBeginEdit;
                                            dataGridView1.CellFormatting -= dataGridView1_CellFormatting;
                                            dataGridView1.CellValidating -= dataGridView1_CellValidating;
                                            try
                                            {

                                                dataGridView1.BeginEdit(true);
                                            }
                                            catch
                                            {
                                            }

                                            dataGridView1.CellEndEdit += dataGridView1_CellEndEdit;
                                            dataGridView1.CellBeginEdit += dataGridView1_CellBeginEdit;
                                            dataGridView1.CellFormatting += dataGridView1_CellFormatting;
                                            dataGridView1.CellValidating += dataGridView1_CellValidating;

                                        }
                                        else if (ProSetting.BarcodeOrItem == "اسم الصنف")
                                        {
                                            dataGridView1.CurrentCell = dataGridView1.Rows[dataGridView1.Rows.Count - 1].Cells[2];
                                        }
                                        else
                                        {
                                            var index = dataGridView1.CurrentRow.Index + 1 >= dataGridView1.RowCount
                                             ? dataGridView1.RowCount - 1
                                             : dataGridView1.CurrentRow.Index + 1;

                                            var colIndex = index == dataGridView1.RowCount - 1
                                                ? _lastAddItemColumnIndex
                                                : dataGridView1.CurrentCell.ColumnIndex;

                                            dataGridView1.CurrentCell = dataGridView1.Rows[index].Cells[colIndex];
                                            dataGridView1.CurrentCell.Selected = true;
                                        }
                                    }
                                }
                                catch { }
                                //dataGridView1.CurrentCell = dataGridView1.CurrentRow.Cells["Quantity"];
                                //dataGridView1.BeginEdit(true);
                                try
                                {
                                    decimal TB = 0;
                                    decimal Rebhea = 0;
                                    for (int i = 1; i < dataGridView1.Rows.Count; i++)
                                    {
                                        TB += Math.Round((Convert.ToDecimal(dataGridView1.Rows[i - 1].Cells["TotalPrice"].Value.Stringify()))
                                            , ProSetting.Round
                                            , MidpointRounding.AwayFromZero);
                                        Rebhea += Math.Round((Convert.ToDecimal(dataGridView1.Rows[i - 1].Cells["Rebhea"].Value.Stringify())), ProSetting.Round, MidpointRounding.AwayFromZero);

                                        Total = TB;
                                        totalrebh = Rebhea;
                                        amu = false;
                                    }
                                    textBox5.Text = Math.Round(Total
                                        , ProSetting.Round
                                        , MidpointRounding.AwayFromZero).ToString("F" + ProSetting.Round);
                                    RebheaText.Text = Math.Round(totalrebh - Convert.ToDecimal(textBox3.Text), ProSetting.Round, MidpointRounding.AwayFromZero).ToString("F" + ProSetting.Round);
                                    Total = 0;
                                    totalrebh = 0;
                                }
                                catch { }
                                try
                                {
                                    decimal weight = 0;
                                    for (int i = 0; i < dataGridView1.Rows.Count - 1; i++)
                                    {
                                        decimal Qnt = Convert.ToDecimal(dataGridView1.Rows[i].Cells[5].Value.Stringify());
                                        decimal UnitWeight = Convert.ToDecimal(Codes.Search2("select isnull(Weight,0) from Units where Name='" + dataGridView1.Rows[i].Cells[4].Value.Stringify() + "'").Rows[0][0].Stringify());
                                        weight += Qnt * UnitWeight;
                                    }
                                    textBox2.Text = Math.Round(weight, ProSetting.Round, MidpointRounding.AwayFromZero).ToString("F" + ProSetting.Round);
                                }
                                catch { }
                            }
                        }
                        catch { }
                        try
                        {
                            decimal weight = 0;
                            for (int i = 0; i < dataGridView1.Rows.Count - 1; i++)
                            {
                                decimal Qnt = Convert.ToDecimal(dataGridView1.Rows[i].Cells[5].Value.Stringify());
                                decimal UnitWeight = Convert.ToDecimal(Codes.Search2("select isnull(Weight,0) from Units where Name='" + dataGridView1.Rows[i].Cells[4].Value.Stringify() + "'").Rows[0][0].Stringify());
                                weight += Qnt * UnitWeight;
                            }
                            textBox2.Text = Math.Round(weight, ProSetting.Round, MidpointRounding.AwayFromZero).ToString("F" + ProSetting.Round);
                        }
                        catch { }
                    }
                }
                //ColorOrSerial
                else if (columnIndex == dataGridView1.Columns["ItemColor"].Index)
                {
                    if (ProSetting.ColorOrSerial == "السيريال")
                    {
                        FrmMainNEW.SerialSelected = false;
                        FrmSerialContainSearch f = new FrmSerialContainSearch(dataGridView1.CurrentRow.Cells["StoreID"].Value.Stringify(), dataGridView1.CurrentRow.Cells["ItemID"].Value.Stringify());
                        f.ShowDialog();

                        if (FrmMainNEW.SerialSelected)
                        {
                            dataGridView1.CurrentRow.Cells["ItemColor"].Value = FrmMainNEW.Serial;

                        }
                    }
                    else if (ProSetting.ColorOrSerial == "اللون")
                    {
                        if (ProSetting.ColorList)
                        {
                            FrmMainNEW.ColorSelected = false;
                            FrmColorList f = new FrmColorList();
                            f.ShowDialog();

                            if (FrmMainNEW.ColorSelected)
                            {
                                dataGridView1.CurrentRow.Cells["ItemColor"].Value = FrmMainNEW.Colors;
                            }
                        }
                    }
                }
                // Quantity
                else if (columnIndex == dataGridView1.Columns["Quantity"].Index)
                {
                    if (dataGridView1.CurrentRow.Cells[0].Value != null)
                    {
                        if (ProSetting.Qnt)
                        {
                            FrmMainNEW.QntSelected = false;
                            FrmQnt f = new FrmQnt();
                            f.ShowDialog();

                            if (FrmMainNEW.QntSelected)
                            {
                                dataGridView1.BeginEdit(true);
                                if (ProSetting.ColorOrSerial == "المقاس")
                                {
                                    dataGridView1.CurrentRow.Cells["ItemColor"].Value = FrmMainNEW.ItemSize;
                                }
                                dataGridView1.CurrentRow.Cells["Quantity"].Value = FrmMainNEW.Qnt.NormalizeDecimalPlaces().Stringify();

                                decimal TB = 0;
                                decimal Rebhea = 0;
                                for (int i = 1; i < dataGridView1.Rows.Count; i++)
                                {
                                    TB += Math.Round((Convert.ToDecimal(dataGridView1.Rows[i - 1].Cells["TotalPrice"].Value.Stringify())), ProSetting.Round, MidpointRounding.AwayFromZero);
                                    Rebhea += Math.Round((Convert.ToDecimal(dataGridView1.Rows[i - 1].Cells["Rebhea"].Value.Stringify())), ProSetting.Round, MidpointRounding.AwayFromZero);
                                    //Dis += Convert.ToDecimal(dataGridView1.Rows[i - 1].Cells[7].Value.Stringify());

                                    Total = TB;
                                    totalrebh = Rebhea;
                                    amu = false;
                                }
                                textBox5.Text = Math.Round(Total, ProSetting.Round, MidpointRounding.AwayFromZero).ToString("F" + ProSetting.Round);
                                RebheaText.Text = Math.Round(totalrebh - Convert.ToDecimal(textBox3.Text), ProSetting.Round, MidpointRounding.AwayFromZero).ToString("F" + ProSetting.Round);
                            }
                            dataGridView1.NotifyCurrentCellDirty(false);
                            dataGridView1.EndEdit();
                            dataGridView1.NotifyCurrentCellDirty(true);
                            dataGridView1.NotifyCurrentCellDirty(false);
                            if (ProSetting.BarcodeOrItem == "كود الصنف")
                            {
                                dataGridView1.CurrentCell = dataGridView1.Rows[dataGridView1.Rows.Count - 1].Cells["Barcode"];
                                dataGridView1.CellEndEdit -= dataGridView1_CellEndEdit;
                                dataGridView1.CellBeginEdit -= dataGridView1_CellBeginEdit;
                                dataGridView1.CellFormatting -= dataGridView1_CellFormatting;
                                dataGridView1.CellValidating -= dataGridView1_CellValidating;
                                try
                                {

                                    dataGridView1.BeginEdit(true);
                                }
                                catch
                                {
                                }

                                dataGridView1.CellEndEdit += dataGridView1_CellEndEdit;
                                dataGridView1.CellBeginEdit += dataGridView1_CellBeginEdit;
                                dataGridView1.CellFormatting += dataGridView1_CellFormatting;
                                dataGridView1.CellValidating += dataGridView1_CellValidating;
                            }
                            else if (ProSetting.BarcodeOrItem == "اسم الصنف")
                            {
                                dataGridView1.CurrentCell = dataGridView1.Rows[dataGridView1.Rows.Count - 1].Cells[2];
                            }
                            else
                            {
                                var index = dataGridView1.CurrentRow.Index + 1 >= dataGridView1.RowCount
                                            ? dataGridView1.RowCount - 1
                                            : dataGridView1.CurrentRow.Index + 1;

                                var colIndex = index == dataGridView1.RowCount - 1
                                    ? _lastAddItemColumnIndex
                                    : dataGridView1.CurrentCell.ColumnIndex;

                                dataGridView1.CurrentCell = dataGridView1.Rows[index].Cells[colIndex];
                                dataGridView1.CurrentCell.Selected = true;
                            }
                        }
                    }
                }
                // Printlabel
                else if (columnIndex == dataGridView1.Columns["Printlabel"].Index)
                {
                    dataSet11.Clear();
                    dataSet11.PrintSaleslabel.Rows.Add(CompanyNamelbl.Text,
                        dataGridView1.CurrentRow.Cells["ItemName"].Value.Stringify(),
                        dataGridView1.CurrentRow.Cells["Barcode"].Value.Stringify(),
                        dataGridView1.CurrentRow.Cells["Quantity"].Value.Stringify(),
                        dataGridView1.CurrentRow.Cells["TotalPrice"].Value.Stringify());

                    CrystalDecisions.CrystalReports.Engine.ReportDocument rpt = new CrystalDecisions.CrystalReports.Engine.ReportDocument();
                    rpt.Load(Application.StartupPath + @"\Reports\PrintSalesLabel.rpt");
                    rpt.SetDataSource(dataSet11);
                    var viewer = new CrystalReportViewer();
                    viewer.ReportSource = rpt;
                    System.Windows.Forms.Cursor.Current = System.Windows.Forms.Cursors.Default;
                    dataGridView1.SelectNextControl(dataGridView1, true, true, false, false);
                    viewer.Select();
                    viewer.Focus();
                    viewer.PrintReport();
                    // rpt.PrintToPrinter(1,true, 1, 1);

                    try
                    {
                        if (ProSetting.BarcodeOrItem == "كود الصنف")
                        {
                            dataGridView1.CurrentCell = dataGridView1.Rows[dataGridView1.RowCount - 1].Cells[1];
                            dataGridView1.CellEndEdit -= dataGridView1_CellEndEdit;
                            dataGridView1.CellBeginEdit -= dataGridView1_CellBeginEdit;
                            dataGridView1.CellFormatting -= dataGridView1_CellFormatting;
                            dataGridView1.CellValidating -= dataGridView1_CellValidating;
                            try
                            {

                                dataGridView1.BeginEdit(true);
                            }
                            catch
                            {
                            }

                            dataGridView1.CellEndEdit += dataGridView1_CellEndEdit;
                            dataGridView1.CellBeginEdit += dataGridView1_CellBeginEdit;
                            dataGridView1.CellFormatting += dataGridView1_CellFormatting;
                            dataGridView1.CellValidating += dataGridView1_CellValidating;
                        }
                        else if (ProSetting.BarcodeOrItem == "اسم الصنف")
                        {
                            dataGridView1.CurrentCell = dataGridView1.Rows[dataGridView1.Rows.Count - 1].Cells[2];
                        }
                        else
                        {
                            var index = dataGridView1.CurrentRow.Index + 1 >= dataGridView1.RowCount
                                            ? dataGridView1.RowCount - 1
                                            : dataGridView1.CurrentRow.Index + 1;

                            var colIndex = index == dataGridView1.RowCount - 1
                                ? _lastAddItemColumnIndex
                                : dataGridView1.CurrentCell.ColumnIndex;

                            dataGridView1.CurrentCell = dataGridView1.Rows[index].Cells[colIndex];
                            dataGridView1.CurrentCell.Selected = true;
                            //dataGridView1.BeginEdit(true);
                        }
                    }
                    catch
                    {
                    }

                }

            }
            catch { }

        }
        private void Control_KeyPress(object sender, KeyPressEventArgs e)
        {
            //e.Handled = true;
            //try
            //{
            //    if (e.KeyChar == (char)Keys.Enter)
            //    {
            //        if (dataGridView1.CurrentCell.OwningColumn.Name == "ItemName")
            //        {
            //            FrmItemContainSearch f = new FrmItemContainSearch(StoreCombo.SelectedValue.Stringify());
            //            f.ShowDialog();
            //            dataGridView1.CurrentRow.Cells["ItemName"].Value = FrmMainNEW.ItemName;
            //            dataGridView1.CurrentCell = dataGridView1.CurrentRow.Cells["Quantity"];
            //            dataGridView1.BeginEdit(true);
            //        }
            //        else if (dataGridView1.CurrentCell.OwningColumn.Name == "Quantity")
            //        {
            //            dataGridView1.CurrentCell = dataGridView1.CurrentRow.Cells["Barcode"];
            //        }
            //    }
            //}
            //catch { }
        }

        private void dataGridView1_KeyDown(object sender, KeyEventArgs e)
        {
            //try
            //{
            //    if (e.KeyCode == Keys.Enter)
            //    {

            //        if (dataGridView1.CurrentCell.OwningColumn.Name == "ItemName")
            //        {
            //            FrmItemContainSearch f = new FrmItemContainSearch(StoreCombo.SelectedValue.Stringify());
            //            f.ShowDialog();
            //            dataGridView1.CurrentRow.Cells["ItemName"].Value = FrmMainNEW.ItemName;
            //            dataGridView1.CurrentCell = dataGridView1.CurrentRow.Cells["Quantity"];
            //            dataGridView1.BeginEdit(true);
            //        }
            //        else if (dataGridView1.CurrentCell.OwningColumn.Name == "Quantity")
            //        {
            //            dataGridView1.CurrentCell = dataGridView1.CurrentRow.Cells["Barcode"];
            //        }
            //    }
            //}
            //catch { }
        }

        private void PriceText_MouseHover(object sender, EventArgs e)
        {
            if (ProSetting.BuyPriceHint && AllowToShowBuyPriceInSales)
            {
                toolTip1.RemoveAll();
                toolTip1.SetToolTip(PriceText, (Tr.M2.m047shortcut + " =") + Math.Round(Convert.ToDecimal(PayPrice), ProSetting.Round, MidpointRounding.AwayFromZero).ToString("F" + ProSetting.Round));
            }
            else
            {
                toolTip1.RemoveAll();
            }
        }

        private void SellerCombo_SelectedIndexChanged(object sender, EventArgs e)
        {
            try
            {
                decimal target = 0;
                DataTable dt = Codes.Search2("select distinct billno,seller,afterdiscount from sales where seller='" + SellerCombo.SelectedValue + "' and month(date)=" + dateTimePicker1.Value.Month + " and Year(Date)= " + dateTimePicker2.Value.Year);
                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    target += Convert.ToDecimal(dt.Rows[i][2].Stringify());
                }
                label49.Text = target.Stringify();
                label51.Text = Codes.Search2("select target from sellers where id =" + SellerCombo.SelectedValue).Rows[0][0].Stringify();
            }
            catch { }
        }

        private void NesbaLblsNew_TextChanged(object sender, EventArgs e)
        {
        }

        private void dataGridView1_MouseHover(object sender, EventArgs e)
        {
            try
            {

                if (ProSetting.RaseedDisappear)
                {
                    dataGridView1.CurrentRow.Cells[5].ToolTipText = Tr.M2.balance + @" / " + Math.Round(Convert.ToDecimal(dataGridView1.CurrentRow.Cells["qntStore"].Value.Stringify()), ProSetting.Round, MidpointRounding.AwayFromZero).ToString("F" + ProSetting.Round);
                }
            }
            catch { }
        }

        private void checkBox2_CheckedChanged(object sender, EventArgs e)
        {

            if (!ChkSearchByMobile.Checked)
            {
                txtMobile.ReadOnly = true;
                if (ClientCombo.SelectedIndex >= 0)
                    return;
                if (ProSetting.ChooseClient)
                {
                    try
                    {
                        if (ProSetting.ClientBillType)
                        {
                            ClientCombo.BindComboBox("select ID,Name from Clients WHERE Status='True' and BillType='" + BillKindCom.Text + "'" + orderClients, "<-اختر->");

                        }
                        else
                        {
                            ClientCombo.BindComboBox("select ID,Name from Clients WHERE Status='True'" + orderClients, "<-اختر->");
                            //ClientCombo.SelectedValue = dtk.Rows[0][0].Stringify();
                        }

                    }
                    catch { }
                }
                else
                {
                    try
                    {
                        if (ProSetting.ClientBillType)
                        {
                            ClientCombo.BindComboBox("select ID,Name from Clients WHERE Status='True' and BillType='" + BillKindCom.Text + "'" + orderClients);
                        }
                        else
                        {
                            ClientCombo.BindComboBox("select ID,Name from Clients WHERE Status='True'" + orderClients);
                        }
                    }
                    catch { }
                }
                try
                {
                    ClientCombo.Focus();
                    ClientCombo_SelectedValueChanged(sender, e);
                    LoadClientRassed();
                }
                catch
                {
                }
            }
            else
            {
                txtMobile.ReadOnly = false;
                txtMobile.Focus();
                txtMobile.SelectAll();
            }
        }
        bool filterbyMobile = false;
        bool selectedbymobileFilter = false;
        private void textBox6_TextChanged(object sender, EventArgs e)
        {
            if (filterbyMobile)
                return;
            filterbyMobile = true;

            try
            {
                if (ChkSearchByMobile.Checked && txtMobile.Focused)
                {
                    if (ProSetting.ClientBillType)
                    {
                        DataTable dmt = Codes.Search2("select ID,Name from Clients WHERE Status='True' and BillType='" + BillKindCom.Text + "'  and Mobile like '%" + txtMobile.Text + "%'" + orderClients);
                        // dtClients = dmt;

                        if (dmt.Rows.Count > 0)
                        {
                            if (dmt.Rows.Count == 1)
                            {
                                if (ClientCombo.DroppedDown)
                                {
                                    ClientCombo.SelectedIndex = -1;
                                    ClientCombo.DroppedDown = false;
                                    selectedbymobileFilter = true;
                                    ClientCombo.SelectedValue = 0;
                                }
                                selectedbymobileFilter = true;
                                ClientCombo.Focus();
                                ClientCombo.SelectedValue = dmt.Rows[0]["ID"].ToInt32();
                                ClientCombo_SelectedValueChanged(sender, e);
                                LoadClientRassed();
                            }
                            else
                            {
                                ClientCombo.FilterBy(dmt);
                                //listBox2.DataSource = dmt;
                                //listBox2.DisplayMember = dmt.Columns[1].Stringify();
                                //listBox2.ValueMember = dmt.Columns[0].Stringify();
                                //listBox2.Visible = true;
                            }
                        }
                        else if (dmt.Rows.Count == 0)
                        {
                            if (ClientCombo.DroppedDown)
                            {
                                ClientCombo.SelectedIndex = -1;
                                ClientCombo.DroppedDown = false;
                                selectedbymobileFilter = true;
                                ClientCombo.SelectedValue = 0;
                            }
                            selectedbymobileFilter = true;
                            if (button9.Enabled)
                            {
                                if (MessageBox.Show(Tr.M1.m0374, Tr.M1.sure, MessageBoxButtons.YesNo) == DialogResult.Yes)
                                {
                                    FrmClients f = new FrmClients();
                                    f.ShowDialog();
                                    DataTable dt2 = new DataTable();
                                    if (ProSetting.OrderClientsByName)
                                    {
                                        ClientCombo.BindComboBox("select ID,Name from Clients WHERE Status='True' and BillType='" + BillKindCom.Text + "'" + orderClients);
                                    }
                                    else
                                    {
                                        ClientCombo.BindComboBox("select ID,Name from Clients WHERE Status='True' and BillType='" + BillKindCom.Text + "' order by ID Desc");
                                    }
                                    ClientCombo_SelectedValueChanged(sender, e);
                                    LoadClientRassed();
                                }
                                else if (ClientCombo.SelectedIndex < 0)
                                {
                                    ClientCombo.SelectedIndex = 0;
                                    ClientCombo_SelectedValueChanged(sender, e);
                                    LoadClientRassed();
                                }



                            }
                            else
                            {
                                if (ClientCombo.SelectedIndex < 0)
                                {
                                    ClientCombo.SelectedIndex = 0;
                                    ClientCombo_SelectedValueChanged(sender, e);
                                    LoadClientRassed();
                                }
                                MessageBox.Show(Tr.M2.m620);
                                //listBox2.Visible = false;
                            }
                        }
                    }
                    else
                    {
                        DataTable dt = Codes.Search2("select ID,Name from Clients WHERE Status='True' and Mobile like '%" + txtMobile.Text + "%'" + orderClients);
                        //  dtClients = dt;                        
                        if (dt.Rows.Count > 0)
                        {
                            if (dt.Rows.Count == 1)
                            {
                                if (ClientCombo.DroppedDown)
                                {
                                    ClientCombo.SelectedIndex = -1;
                                    ClientCombo.DroppedDown = false;
                                    selectedbymobileFilter = true;
                                    ClientCombo.SelectedValue = 0;
                                }
                                selectedbymobileFilter = true;
                                ClientCombo.Focus();
                                ClientCombo.SelectedValue = dt.Rows[0]["ID"].ToInt32();
                                ClientCombo_SelectedValueChanged(sender, e);
                                LoadClientRassed();
                            }
                            else
                            {
                                ClientCombo.FilterBy(dt);
                                //listBox2.DataSource = dt;
                                //listBox2.DisplayMember = dt.Columns[1].Stringify();
                                //listBox2.ValueMember = dt.Columns[0].Stringify();
                                //listBox2.Visible = true;
                            }
                        }
                        else if (dt.Rows.Count == 0)
                        {


                            if (ClientCombo.DroppedDown)
                            {
                                ClientCombo.SelectedIndex = -1;
                                ClientCombo.DroppedDown = false;
                                selectedbymobileFilter = true;
                                ClientCombo.SelectedValue = 0;
                            }
                            selectedbymobileFilter = true;
                            ClientCombo.Focus();
                            if (button9.Enabled)
                            {
                                if (MessageBox.Show(Tr.M1.m0374, Tr.M1.sure, MessageBoxButtons.YesNo) == DialogResult.Yes)
                                {
                                    FrmClients f = new FrmClients();
                                    f.ShowDialog();
                                    DataTable dt2 = new DataTable();
                                    if (ProSetting.OrderClientsByName)
                                    {
                                        ClientCombo.BindComboBox("select ID,Name from Clients WHERE Status='True'" + orderClients);
                                    }
                                    else
                                    {
                                        ClientCombo.BindComboBox("select ID,Name from Clients WHERE Status='True' " + "order by ID Desc");
                                    }
                                    ClientCombo_SelectedValueChanged(sender, e);
                                    LoadClientRassed();
                                }
                                else if (ClientCombo.SelectedIndex < 0)
                                {
                                    ClientCombo.SelectedIndex = 0;
                                    ClientCombo_SelectedValueChanged(sender, e);
                                    LoadClientRassed();
                                }


                            }
                            else
                            {
                                MessageBox.Show(Tr.M2.m620);
                                if (ClientCombo.SelectedIndex < 0)
                                {
                                    ClientCombo.SelectedIndex = 0;
                                    ClientCombo_SelectedValueChanged(sender, e);
                                    LoadClientRassed();
                                }
                                //listBox2.Visible = false;
                            }
                        }
                    }

                }
            }
            catch { }
            finally { filterbyMobile = selectedbymobileFilter = false; }
        }

 
        private void textBox8_MouseClick(object sender, MouseEventArgs e)
        {
            try
            {
                if (ProSetting.ColorOrSerial == "السيريال")
                {
                    FrmMainNEW.SerialSelected = false;
                    FrmSerialContainSearch f = new FrmSerialContainSearch(StoreCombo.SelectedValue.Stringify(), ItemCombo.SelectedValue.Stringify());
                    f.ShowDialog();

                    if (FrmMainNEW.SerialSelected)
                    {
                        textBox8.Text = FrmMainNEW.Serial;
                    }
                }
                else if (ProSetting.ColorOrSerial == "اللون")
                {
                    if (ProSetting.ColorList)
                    {
                        FrmMainNEW.ColorSelected = false;
                        FrmColorList f = new FrmColorList();
                        f.ShowDialog();

                        if (FrmMainNEW.ColorSelected)
                        {
                            textBox8.Text = FrmMainNEW.Colors;
                        }
                    }
                }
            }
            catch { }
        }

        private void textBox8_PreviewKeyDown(object sender, PreviewKeyDownEventArgs e)
        {
            try
            {
                if (e.KeyCode == Keys.Enter)
                {
                    if (ProSetting.ColorOrSerial == "السيريال")
                    {
                        FrmMainNEW.SerialSelected = false;
                        FrmSerialContainSearch f = new FrmSerialContainSearch(StoreCombo.SelectedValue.Stringify(), ItemCombo.SelectedValue.Stringify());
                        f.ShowDialog();

                        if (FrmMainNEW.SerialSelected)
                        {
                            textBox8.Text = FrmMainNEW.Serial;
                        }
                    }
                    else if (ProSetting.ColorOrSerial == "اللون")
                    {
                        if (ProSetting.ColorList)
                        {
                            FrmMainNEW.ColorSelected = false;
                            FrmColorList f = new FrmColorList();
                            f.ShowDialog();

                            if (FrmMainNEW.ColorSelected)
                            {
                                textBox8.Text = FrmMainNEW.Colors;
                            }
                        }
                    }
                }

            }
            catch { }
        }

        private void textBox8_TextChanged(object sender, EventArgs e)
        {
            try
            {
                if (ProSetting.ColorOrSerial == "السيريال")
                {
                    if (textBox8.Text.Length > 0)
                    {
                        QntText.Text = "1";
                        QntText.ReadOnly = true;
                    }
                    else
                    {
                        QntText.Text = "1";
                        QntText.ReadOnly = false;
                    }
                }
            }
            catch { }
        }

        private void textBox9_KeyPress(object sender, KeyPressEventArgs e)
        {
            try
            {
                if (((int)e.KeyChar >= 48 && (int)e.KeyChar <= 57) || (int)e.KeyChar == 46 || (int)e.KeyChar == 8)
                {
                    if ((int)e.KeyChar == 46)
                    {
                        if (textBox9.Text.Contains("."))
                            e.Handled = true;
                    }
                }
                else
                    e.Handled = true;
            }
            catch { }
        }

        private void TxtDeliveredAmountFromClient_KeyPress(object sender, KeyPressEventArgs e)
        {
            try
            {
                if (((int)e.KeyChar >= 48 && (int)e.KeyChar <= 57) || (int)e.KeyChar == 46 || (int)e.KeyChar == 8)
                {
                    if ((int)e.KeyChar == 46)
                    {
                        if (textBox9.Text.Contains("."))
                            e.Handled = true;
                    }
                }
                else
                    e.Handled = true;
            }
            catch { }
        }

        private void textBox9_Leave(object sender, EventArgs e)
        {
            try
            {
                if (textBox9.Text == "")
                    textBox9.Text = "0";
            }
            catch { }
        }
        private void TxtDeliveredAmountFromClient_Leave(object sender, EventArgs e)
        {
            try
            {
                if (TxtDeliveredAmountFromClient.Text == "")
                    TxtDeliveredAmountFromClient.Text = "0";
            }
            catch { }
            try
            {
                decimal value = 0;
                decimal.TryParse(TxtDeliveredAmountFromClient.Text, out value);
                var cachPaid = Math.Round((Convert.ToDecimal(textBox9.Text)), ProSetting.Round, MidpointRounding.AwayFromZero);

                if (value > 0)
                {
                    if (cachPaid > 0)
                    {
                        if (value < cachPaid)
                        {
                            MessageBox.Show(Tr.M1.m0261);
                            textBox9.Text = value.Stringify();
                            return;
                        }
                    }
                }
                else
                    LblRemainingAmountToTheClient.Text = "0.00";
            }
            catch { }

        }

        private void textBox12_Leave(object sender, EventArgs e)
        {
            try
            {
                if (textBox12.Text == "")
                    textBox12.Text = "0";
            }
            catch { }
        }

        private void textBox12_KeyPress(object sender, KeyPressEventArgs e)
        {
            try
            {
                if (((int)e.KeyChar >= 48 && (int)e.KeyChar <= 57) || (int)e.KeyChar == 46 || (int)e.KeyChar == 8)
                {
                    if ((int)e.KeyChar == 46)
                    {
                        if (textBox12.Text.Contains("."))
                            e.Handled = true;
                    }
                }
                else
                    e.Handled = true;
            }
            catch { }
        }


        private void textBox9_TextChanged(object sender, EventArgs e)
        {

            //try
            //{
            //    var textSender = sender as TextBox;
            //    if (textSender.Text.Length > 9)
            //    {
            //        MessageBox.Show("لقد تجاوزت الحد الطبيعي الأقصي للمبلغ المسموح بكتابته");
            //        textBox9.Text = "0";
            //        return;
            //    }
            //}
            //catch (Exception exc)
            //{
            //}
            try
            {
                textBox10.Text = Math
                    .Round(((Convert.ToDecimal(textBox9.Text) + Convert.ToDecimal(textBox12.Text))),
                        ProSetting.Round, MidpointRounding.AwayFromZero)
                    .ToString("F" + ProSetting.Round);
            }
            catch
            {
            }

            try
            {
                decimal CashValue = 0;
                decimal.TryParse(textBox9.Text, out CashValue);

                if (!ProSetting.LinkBilltypeWithCashFromClient)
                    return;
                var deliveredAmount = Math.Round((Convert.ToDecimal(TxtDeliveredAmountFromClient.Text)),
                    ProSetting.Round, MidpointRounding.AwayFromZero);
                if (!TxtDeliveredAmountFromClient.Focused && !textBox9.Focused)
                {
                    TxtDeliveredAmountFromClient.Text =
                        CashValue.ToString("F" + ProSetting.Round);
                }
                else
                {

                    if (deliveredAmount > 0 &&
                        textBox9.Text.Substring(0, TxtDeliveredAmountFromClient.Text.Length) !=
                        TxtDeliveredAmountFromClient.Text)
                    {
                        if (deliveredAmount < CashValue)
                        {
                            MessageBox.Show(Tr.M1.m261);
                            CashValue = deliveredAmount;
                            textBox9.TextChanged -= textBox9_TextChanged;
                            textBox9.Text =
                                deliveredAmount.ToString(
                                    "F" + ProSetting.Round);
                            textBox9.TextChanged += textBox9_TextChanged;

                        }

                        LblRemainingAmountToTheClient.Text = Math
                            .Round(((deliveredAmount - CashValue)), ProSetting.Round,
                                MidpointRounding.AwayFromZero)
                            .ToString("F" + ProSetting.Round);
                    }
                    else
                        TxtDeliveredAmountFromClient.Text =
                            CashValue.ToString("F" + ProSetting.Round);

                }
            }
            catch
            {
            }
        }

        private void TxtDeliveredAmountFromClient_TextChanged(object sender, EventArgs e)
        {
            try
            {
                decimal value = 0;
                decimal.TryParse(TxtDeliveredAmountFromClient.Text, out value);
                var cachPaid = Math.Round((Convert.ToDecimal(textBox9.Text)), ProSetting.Round, MidpointRounding.AwayFromZero);

                //if (value > 0 && cachPaid == value )
                //{
                //    textBox9.Text= value.Stringify();                    
                //}
                LblRemainingAmountToTheClient.Text = Math.Round(((value - cachPaid)), ProSetting.Round, MidpointRounding.AwayFromZero).ToString("F" + ProSetting.Round);
            }
            catch { }
        }

        private void QntText_MouseClick(object sender, MouseEventArgs e)
        {
            try
            {
                if (ProSetting.Qnt)
                {
                    FrmMainNEW.QntSelected = false;
                    FrmQnt f = new FrmQnt();
                    f.ShowDialog();

                    if (FrmMainNEW.QntSelected)
                    {
                        QntText.Text = FrmMainNEW.Qnt.Stringify();
                        if (ProSetting.ColorOrSerial == "المقاس")
                        {
                            textBox8.Text = FrmMainNEW.ItemSize;
                        }
                    }
                }
            }
            catch { }
        }

        private void QntText_PreviewKeyDown(object sender, PreviewKeyDownEventArgs e)
        {
            try
            {
                if (ProSetting.Qnt)
                {
                    FrmMainNEW.QntSelected = false;
                    FrmQnt f = new FrmQnt();
                    f.ShowDialog();

                    if (FrmMainNEW.QntSelected)
                    {
                        QntText.Text = FrmMainNEW.Qnt.Stringify();
                        if (ProSetting.ColorOrSerial == "المقاس")
                        {
                            textBox8.Text = FrmMainNEW.ItemSize;
                        }
                    }
                }
            }
            catch { }
        }
        private string AddItemsMove(string ItemId, string StoreId, string IncomeQnt, string IncomePrice, string OutcomeQnt, string OutcomePrice, string Bayan, string MoveDate, string UserId, string Time, string Type)
        {
            return @"INSERT INTO ItemsMove
(ItemId, StoreId, IncomeQnt, IncomePrice, OutcomeQnt, OutcomePrice, LastQnt, LastIncomePrice, LastOutComePrice, Bayan, MoveDate, UserId, Time,Type)
Select '" + ItemId + "','" + StoreId + "','" + IncomeQnt + "','" + IncomePrice + "','" + OutcomeQnt + "','" + OutcomePrice + "'," + @" 
Isnull((select Quantity from store where ItemID='" + ItemId + "' and StoreID='" + StoreId + @"'),0), 
Isnull((select Price from store where ItemID = '" + ItemId + "' and StoreID = '" + StoreId + "'),0)," + @"
Isnull((select Price from Items where ID='" + ItemId + "' and Items.Active = 1),0)," + @"
'" + Bayan + "','" + MoveDate + "','" + UserId + "','" + Time + "','" + Type + "';";
        }
        private DataTable Search2(SqlCommand cmd, string Selectcmdmand)
        {
            DataTable dt = new DataTable();
            cmd.CommandType = CommandType.Text;
            cmd.CommandText = Selectcmdmand;
            SqlDataAdapter da = new SqlDataAdapter(cmd);
            da.Fill(dt);
            return dt;
        }
        private decimal GetLastQnt(SqlCommand cmd, string StoreId, string ItemId)
        {
            decimal Qnt = 0;
            DataTable dt = Search2(cmd, "select Quantity from store where ItemID='" + ItemId + "' and StoreID='" + StoreId + "'");
            Qnt = dt.Rows.Count == 0 ? 0 : Convert.ToDecimal(dt.Rows[0][0].Stringify());
            return Qnt;
        }
        private decimal GetLastIncomePrice(SqlCommand cmd, string StoreId, string ItemId)
        {
            decimal LastIncomePrice = 0;
            DataTable dt = Search2(cmd, "select Price from store where ItemID='" + ItemId + "' and StoreID='" + StoreId + "'");
            LastIncomePrice = dt.Rows.Count == 0 ? 0 : Convert.ToDecimal(dt.Rows[0][0].Stringify());
            return LastIncomePrice;
        }
        private decimal GetLastOutComePrice(SqlCommand cmd, string StoreId, string ItemId)
        {
            decimal LastOucomePrice = 0;
            DataTable dt = Search2(cmd, "select Price from Items where ID='" + ItemId + "' and Items.Active = 1");
            LastOucomePrice = dt.Rows.Count == 0 ? 0 : Convert.ToDecimal(dt.Rows[0][0].Stringify());
            return LastOucomePrice;
        }

        private void button17_Click(object sender, EventArgs e)
        {
            panel19.Visible = false;
            dataGridView1.Dock = DockStyle.Fill;
        }

        private void BillKindCom_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode.ToText() == "Return")
            {
                GetNextControl((Control)sender, false);
                ClientCombo.Focus();
            }
        }
        decimal TotAfter = 0;
        private void dataGridView1_RowsAdded(object sender, DataGridViewRowsAddedEventArgs e)
        {
            try
            {
                Total = 0;
                totalrebh = 0;
                if (dataGridView1.Rows.Count > 1)
                {
                    itemAdded = true;
                    decimal TB = 0;
                    decimal rebhea = 0;
                    decimal vatitemsTotal = 0, itemtotal = 0, itemDiscount = 0, netSale = 0;
                    for (int i = 1; i < dataGridView1.Rows.Count; i++)
                    {
                        if (dataGridView1.Rows[i - 1].Cells["Barcode"].Value == null
                            || dataGridView1.Rows[i - 1].Cells["ItemID"].Value == null)
                            continue;
                        decimal taxValue = 0;
                        itemtotal = Math.Round(
                            (Convert.ToDecimal(dataGridView1.Rows[i - 1].Cells["UnitPrice"].Value)
                             * Convert.ToDecimal(dataGridView1.Rows[i - 1].Cells["Quantity"].Value))
                            , ProSetting.Round
                            , MidpointRounding.AwayFromZero);

                        var itemDiscountType =
                            (DiscountType)Convert.ToByte(dataGridView1.Rows[i].Cells["DiscountType"]
                                .Value);

                        itemDiscount = itemDiscountType == DiscountType.Percentage
                            ? Math.Round((itemtotal
                                          * Convert.ToDecimal(dataGridView1.Rows[i - 1].Cells["Discount"].Value) / 100),
                                ProSetting.Round
                                , MidpointRounding.AwayFromZero)
                            : Math.Round(Convert.ToDecimal(dataGridView1.Rows[i - 1].Cells["DiscountValue"].Value)
                                , ProSetting.Round
                                , MidpointRounding.AwayFromZero);


                        var itemTax = dataGridView1.Rows[i - 1].Cells["ItemTax"].Value == null
                            ? 0
                            : Convert.ToDecimal(dataGridView1.Rows[i - 1].Cells["ItemTax"].Value);
                        netSale = Math.Round((itemtotal - itemDiscount)
                            , ProSetting.Round
                            , MidpointRounding.AwayFromZero);

                        if (ProSetting.ItemsAdditionValue)
                        {
                            var additionValue = Convert.ToDecimal(dataGridView1.Rows[i - 1].Cells["AdditionValue"].Value)
                                                * Convert.ToDecimal(dataGridView1.Rows[i - 1].Cells["Quantity"].Value);

                            netSale = netSale + additionValue;
                        }
                        else if (ProSetting.ItemsTax)
                        {
                            try
                            {
                                taxValue = Math.Round(((ProSetting.DarebaAfterDiscount ? netSale : itemtotal) * itemTax / 100)
                                    , ProSetting.Round
                                    , MidpointRounding.AwayFromZero);

                                vatitemsTotal += taxValue;
                            }
                            catch
                            {
                            }
                        }



                        try
                        {
                            HandleCellValueChanged();

                            var itemTotal = (netSale + taxValue);
                            dataGridView1.Rows[i - 1].Cells["TotalPrice"].Value = itemTotal.NormalizeDecimalPlaces(ProSetting.Round).Stringify();


                            dataGridView1.Rows[i - 1].Cells["TotalBuy"].Value = Math.Round(((Convert.ToDecimal(dataGridView1.Rows[i - 1].Cells["Quantity"].Value) * Convert.ToDecimal(dataGridView1.Rows[i - 1].Cells["buyPrice"].Value))), ProSetting.Round, MidpointRounding.AwayFromZero).ToString("F" + ProSetting.Round);
                            dataGridView1.Rows[i - 1].Cells["Rebhea"].Value = Math.Round(Convert.ToDecimal(dataGridView1.Rows[i - 1].Cells["TotalPrice"].Value) - Convert.ToDecimal(taxValue) - Convert.ToDecimal(dataGridView1.Rows[i - 1].Cells["TotalBuy"].Value), ProSetting.Round, MidpointRounding.AwayFromZero).ToString("F" + ProSetting.Round);

                            var itemQnt = dataGridView1.Rows[i - 1].Cells["Quantity"].Value.ToDecimal();
                            var itemFactor = dataGridView1.Rows[i - 1].Cells["mainIt"].Value.ToDecimal();

                            var qntByMainUnit = (itemQnt * itemFactor);

                            dataGridView1.Rows[i - 1].Cells["countItemmain"].Value = qntByMainUnit.NormalizeDecimalPlaces().Stringify();

                            var itemMainUnitPrice = dataGridView1.Rows[i - 1].Cells["UnitPrice"].Value.ToDecimal()
                                / dataGridView1.Rows[i - 1].Cells["mainIt"].Value.ToDecimal();

                            dataGridView1.Rows[i - 1].Cells["MainUnitPrice"].Value = itemMainUnitPrice.NormalizeDecimalPlaces(ProSetting.Round).Stringify();
                        }
                        catch (Exception excep)
                        {
                        }
                        finally
                        {
                            ReleaseCellValueChanged();

                        }

                        TB = Math.Round((Convert.ToDecimal(dataGridView1.Rows[i - 1].Cells["TotalPrice"].Value)), ProSetting.Round, MidpointRounding.AwayFromZero);
                        rebhea = Math.Round((Convert.ToDecimal(dataGridView1.Rows[i - 1].Cells["Rebhea"].Value)), ProSetting.Round, MidpointRounding.AwayFromZero);
                        Total += TB;
                        totalrebh += rebhea;

                    }

                    textBox5.Text = Math.Round(Total
                            , ProSetting.Round
                            , MidpointRounding.AwayFromZero)
                        .ToString("F" + ProSetting.Round);

                    RebheaText.Text = Math.Round(totalrebh - Convert.ToDecimal(textBox3.Text), ProSetting.Round, MidpointRounding.AwayFromZero).ToString("F" + ProSetting.Round);
                    ItemsVATTotalValue = vatitemsTotal;


                }
            }
            catch (Exception exc)
            {
            }

            try
            {
                if (ProSetting.SalesAutoSaveEnabled)
                    CurrentAutoSaveModel.ItemsCount = dataGridView1.RowCount - 1;

            }
            catch (Exception exception)
            {
            }
            try
            {
                int Sum = 0; decimal Sum1 = 0;
                decimal rebhea = 0;
                for (int i = 0; i < dataGridView1.Rows.Count - 1; i++)
                {
                    Sum1 += Math.Round((Convert.ToDecimal(dataGridView1.Rows[i].Cells[5].Value)), ProSetting.Round, MidpointRounding.AwayFromZero);

                }

                Sum = dataGridView1.Rows.Count - 1;
                if (dataGridView1.Rows.Count == 0)
                {
                    Sum = 0;
                }
                textBox19.Text = Sum.Stringify();
                textBox14.Text = Sum1.Stringify();
            }
            catch { }
            //try
            //{
            //    if (ProSetting.OnQuantity)
            //    {
            //        //addRow = false;
            //        dataGridView1.CellEndEdit -= new DataGridViewCellEventHandler(dataGridView1_CellEndEdit);
            //        dataGridView1.EditingControlShowing -= new DataGridViewEditingControlShowingEventHandler(dataGridView1_EditingControlShowing);
            //        dataGridView1.PreviewKeyDown -= new PreviewKeyDownEventHandler(dataGridView1_PreviewKeyDown);
            //        dataGridView1.RowsRemoved -= new DataGridViewRowsRemovedEventHandler(dataGridView1_RowsRemoved);

            //        dataGridView1.CurrentCell = dataGridView1.Rows[dataGridView1.Rows.Count - 2].Cells["Quantity"];

            //        dataGridView1.CellEndEdit += new DataGridViewCellEventHandler(dataGridView1_CellEndEdit);
            //        dataGridView1.EditingControlShowing += new DataGridViewEditingControlShowingEventHandler(dataGridView1_EditingControlShowing);
            //        dataGridView1.PreviewKeyDown += new PreviewKeyDownEventHandler(dataGridView1_PreviewKeyDown);
            //        dataGridView1.RowsRemoved += new DataGridViewRowsRemovedEventHandler(dataGridView1_RowsRemoved);
            //        //dataGridView1.Rows[dataGridView1.Rows.Count - 2].Cells["Quantity"].Selected = true;
            //    }
            //}
            //catch { }
        }

        private void textBox20_TextChanged(object sender, EventArgs e)
        {
            try
            {

                x = Math.Round((Convert.ToDecimal((textBox3.Text).Stringify())), ProSetting.Round, MidpointRounding.AwayFromZero);
                y = Math.Round((Convert.ToDecimal((textBox5.Text).Stringify())), ProSetting.Round, MidpointRounding.AwayFromZero);
                decimal Trans = Math.Round((Convert.ToDecimal(TransportValue.Text)), ProSetting.Round, MidpointRounding.AwayFromZero);
                if (ProSetting.DarebaAfterDiscount)
                {
                    TotAfter = Math.Round(((y - x) + (((y - x) * Convert.ToDecimal(DarebaText.Text)) / 100)), ProSetting.Round,
                        MidpointRounding.AwayFromZero);
                }
                else
                {
                    TotAfter = Math.Round(((y - x) + ((y * Convert.ToDecimal(DarebaText.Text)) / 100)),
                        ProSetting.Round, MidpointRounding.AwayFromZero);
                }
                textBox11.Text = Math.Round((TotAfter + ((TotAfter / 100) * Convert.ToDecimal(textBox20.Text)) + Trans)
                    , ProSetting.Round
                    , MidpointRounding.AwayFromZero).Stringify();

            }
            catch
            {
            }
        }

        private void textBox20_KeyPress(object sender, KeyPressEventArgs e)
        {
            try
            {
                if (((int)e.KeyChar >= 48 && (int)e.KeyChar <= 57) || (int)e.KeyChar == 46 || (int)e.KeyChar == 8)
                {
                    if ((int)e.KeyChar == 46)
                    {
                        if (textBox20.Text.Contains("."))
                            e.Handled = true;
                    }
                }
                else
                    e.Handled = true;
            }
            catch { }
        }

        private void textBox20_Leave(object sender, EventArgs e)
        {
            try
            {
                if (textBox20.Text == "")
                    textBox20.Text = "0";
            }
            catch { }
        }

        private void textBox13_TextChanged(object sender, EventArgs e)
        {
            //if (StoreCombo.Text == "<-اختر->")
            //{
            //    MessageBox.Show("من فضلك قم باختيار اسم مخزن صحيح");

            //}
            //else
            //{

            //    if (ProSetting.StoreMinus == false)
            //    {
            //        DataTable dt1 = Codes.Search2("select Items.ID,Items.Price,Store.Price,Store.Quantity from Items,Store where Store.StoreID = " + StoreCombo.SelectedValue.Stringify() + " and Items.ID = Store.ItemID and Store.Quantity > 0 and Items.Barcode ='" + textBox2.Text + "'");
            //        ItemCombo.SelectedValue = dt1.Rows[0][0].Stringify();
            //    }
            //    else
            //    {
            //        DataTable dt1 = Codes.Search2("select Items.ID,Items.Price,Store.Price,Store.Quantity from Items,Store where Store.StoreID = " + StoreCombo.SelectedValue.Stringify() + " and Items.ID = Store.ItemID and  Items.Barcode ='" + textBox2.Text + "'");
            //        ItemCombo.SelectedValue = dt1.Rows[0][0].Stringify();
            //    }
            //}

        }

        private void textBox13_Leave(object sender, EventArgs e)
        {
            if (StoreCombo.Text == "<-اختر->")
            {
                MessageBox.Show(Tr.M1.m0299);

            }
            else
            {
                if (textBox13.Text == "")
                {

                }
                else
                {
                    if (ProSetting.StoreMinus || ProSetting.UniderDelevItem)
                    {
                        DataTable dt1 = Codes.Search2("select Items.ID,Items.Price,Store.Price,Store.Quantity from Items,Store where Store.StoreID = " + StoreCombo.SelectedValue.Stringify() + " and Items.ID = Store.ItemID and Active = 1 and  Items.Barcode ='" + textBox13.Text + "'");
                        if (dt1.Rows.Count > 0)
                        {
                            ItemCombo.SelectedValue = dt1.Rows[0][0].Stringify();
                        }
                        else
                        {
                            MessageBox.Show(Tr.M2.m726);
                            textBox13.Clear();
                            textBox13.Focus();
                        }
                    }
                    else
                    {
                        DataTable dt1 = Codes.Search2("select Items.ID,Items.Price,Store.Price,Store.Quantity from Items,Store where Store.StoreID = " + StoreCombo.SelectedValue.Stringify() + " and Items.ID = Store.ItemID and Active = 1 and (Store.Quantity>0 or Items.Khadamy=1) and Items.Barcode ='" + textBox13.Text + "'");
                        if (dt1.Rows.Count > 0)
                        {
                            ItemCombo.SelectedValue = dt1.Rows[0][0].Stringify();
                        }
                        else
                        {
                            MessageBox.Show(Tr.M2.m726);
                            textBox13.Clear();
                            textBox13.Focus();
                        }
                    }

                }


            }
        }

        private void pButton2_Click(object sender, EventArgs e)
        {
            FrmReturnSales f = new FrmReturnSales();
            if (ProSetting.StockClose == true)
            {
                if (ProSetting.StoreClose == true)
                {
                    f.Show();
                }
                else
                {
                    MessageBox.Show(Tr.M1.m0344);
                    f.Close();
                }
            }
            else
            {
                MessageBox.Show(Tr.M1.m0345);
                f.Close();
            }
        }

        private void pButton3_Click(object sender, EventArgs e)
        {
            FrmReturnSalesClient f = new FrmReturnSalesClient();
            if (ProSetting.StockClose == true)
            {
                if (ProSetting.StoreClose == true)
                {
                    f.Show();
                }
                else
                {
                    MessageBox.Show(Tr.M1.m0344);
                    f.Close();
                }
            }
            else
            {
                MessageBox.Show(Tr.M1.m0345);
                f.Close();
            }
        }

        private void BeanKindCom_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (BeanKindCom.SelectedIndex == 0)
            {
                textBox4.Text = ProSetting.Discount.Stringify();
            }
            else
            {
                textBox4.Text = "0";
            }
        }

        private void dataGridView1_KeyDown_1(object sender, KeyEventArgs e)
        {
            if (e.KeyData == Keys.Enter)
            {

                //if (dataGridView1.CurrentCell.OwningColumn.Name == "Barcode" && ProSetting.OnQuantity && newRowbyBarcode)
                //{
                //    if (dataGridView1.CurrentRow.IsNewRow)
                //    {
                //        dataGridView1.CurrentCell = dataGridView1.Rows[dataGridView1.Rows.Count - 2].Cells["Quantity"];
                //    }
                //    else
                //    {
                //        dataGridView1.CurrentCell = dataGridView1.CurrentRow.Cells["Quantity"];
                //    }
                //}
                //else
                //{

                //    if (ProSetting.BarcodeOrItem == "كود الصنف")
                //    {
                //        dataGridView1.CurrentCell = dataGridView1.Rows[dataGridView1.Rows.Count - 1].Cells["Barcode"];
                //    }
                //    else if (ProSetting.BarcodeOrItem == "اسم الصنف")
                //    {
                //        dataGridView1.CurrentCell = dataGridView1.Rows[dataGridView1.Rows.Count - 1].Cells[2];
                //    }

                //}
            }
        }

        private void pButton4_Click(object sender, EventArgs e)
        {
            FrmClientAccounts f = new FrmClientAccounts();
            f.ShowDialog();
        }

        private void label70_Click(object sender, EventArgs e)
        {
            panel10.Visible = false;
        }

        private void button22_Click(object sender, EventArgs e)
        {
            try
            {
                bool x = false;
                for (int i = 0; i < dataGridView3.Rows.Count; i++)
                {
                    if (comboBox7.Text == dataGridView3.Rows[i].Cells[1].Value.Stringify())
                    {
                        MessageBox.Show(Tr.M2.m733);
                        x = true;
                        break;
                    }
                }
                if (x == false)
                {
                    dataGridView3.Rows.Add(comboBox7.SelectedValue.Stringify(), comboBox7.Text);
                }
            }
            catch { }
        }

        private void button23_Click(object sender, EventArgs e)
        {
            try
            {
                if (dataGridView3.Rows.Count > 0)
                {
                    for (int i = 0; i < dataGridView3.Rows.Count; i++)
                    {
                        dtServices.Rows.Add(dataGridView3.Rows[i].Cells[0].Value.Stringify(), dataGridView3.Rows[i].Cells[1].Value.Stringify());
                    }
                    MessageBox.Show(Tr.M2.m702);
                    panel10.Visible = false;
                }
                else
                {
                    MessageBox.Show(Tr.M2.m703);
                }
            }
            catch { }
        }

        private void pButton5_Click(object sender, EventArgs e)
        {
            try
            {
                panel10.Visible = true;
                dataGridView3.Rows.Clear();
                for (int i = 0; i < dtServices.Rows.Count; i++)
                {
                    dataGridView3.Rows.Add(dtServices.Rows[i][0].Stringify(), dtServices.Rows[i][1].Stringify());
                }
            }
            catch { }
        }



        private void pButton6_Click(object sender, EventArgs e)
        {
            FormClient5 f = new FormClient5();
            f.Show();
        }

        private void timer2_Tick(object sender, EventArgs e)
        {
            timer2.Enabled = false;
            SendKeys.Send("{ESC}");
        }

        private void ChkDelivery_CheckedChanged(object sender, EventArgs e)
        {
            try
            {
                if (ProSetting.LinkBilltypeWithCashFromClient)
                {
                    PayedKindCom.Enabled = true;
                    TransportValue.Text = ChkDelivery.Checked ? ProSetting.DeliveryValue.Stringify() : "0.00";
                }
                else
                {
                    if (ProSetting.CancelMadfo && !ChkDelivery.Checked)
                    {
                        PayedKindCom.Enabled = false;
                        PayedKindCom.SelectedIndex = 0;
                    }
                    else if (ProSetting.CancelMadfoForNakdi &&
                            ProSetting.NakdiClient == ClientCombo.SelectedValue.ToInt32() &&
                            !ChkDelivery.Checked)
                    {
                        PayedKindCom.Enabled = false;
                        PayedKindCom.Enabled = false;
                        PayedKindCom.SelectedIndex = 0;
                    }
                    else
                    {
                        PayedKindCom.Enabled = true;
                        PayedKindCom.SelectedIndex = ProSetting.MadfooSafey && !ChkDelivery.Checked ? 0 : 1;
                        TransportValue.Text = ChkDelivery.Checked ? ProSetting.DeliveryValue.Stringify() : "0.00";

                    }
                }
            }
            catch
            {
            }
        }

        private void dataGridView1_ColumnHeaderMouseClick(object sender, System.Windows.Forms.DataGridViewCellMouseEventArgs e)
        {

        }
        private void dataGridView1_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {

        }
        decimal MaxSale = 0;


        private void QntText_TextChanged(object sender, EventArgs e)
        {
            try
            {
                DataTable dtMaxSale = Codes.Search2("select isnull(MaxSale,0) from Items Where Items.Active = 1 and ID=" + ItemCombo.SelectedValue.Stringify());
                if (dtMaxSale.Rows.Count > 0)
                {
                    MaxSale = Math.Round((Convert.ToDecimal(dtMaxSale.Rows[0][0].Stringify())), ProSetting.Round
                        , MidpointRounding.AwayFromZero);
                }
                else
                {
                    MaxSale = 0;
                }
                if (Convert.ToDecimal(QntText.Text) > MaxSale && MaxSale != 0)
                {
                    MessageBox.Show(Tr.M1.m0365);
                    QntText.Text = "1";
                }
            }
            catch { }
        }

        private void ClientCombo_Leave(object sender, EventArgs e)
        {
            //try
            //{
            //    if (client != ClientCombo.SelectedValue.Stringify())
            //    {
            //        if (ProSetting.SalesDebtAge)
            //        {
            //            int DaynAge = Convert.ToInt32(Codes.Search2("select DebtAgeDays from clients where id=" + ClientCombo.SelectedValue.Stringify()).Rows[0][0].Stringify());
            //            if (DaynAge != 0)
            //            {
            //                DateTime date = DateTime.Today;
            //                date = date.AddDays((-1) * DaynAge);
            //                DataTable dta = Codes.Search2("select isnull(sum(madeen),0)- isnull(sum(daen),0)from client5 where ClientId=" + ClientCombo.SelectedValue.Stringify());
            //                decimal val = Convert.ToDecimal(dta.Rows[0][0].Stringify());
            //                if (val > 0)
            //                {
            //                    DataTable dtb = Codes.Search2("select top 1 date from client5 where clientid=" + ClientCombo.SelectedValue.Stringify() + " order by [date] desc");
            //                    if (Convert.ToDateTime(dtb.Rows[0][0].Stringify()) <= date)
            //                    {
            //                        //if (client != ClientCombo.SelectedValue.Stringify())
            //                        {
            //                            MessageBox.Show("لا يمكن عمل فاتورة لهذا العميل لتعديه عمر الدين بالأيام المسموح به");
            //                            bill = false;
            //                        }
            //                    }
            //                }
            //                client = ClientCombo.SelectedValue.Stringify();
            //            }
            //        }
            //    }
            //    else
            //    {
            //        client = ClientCombo.SelectedValue.Stringify();
            //    }
            //}
            //catch { }
        }
        private bool isFormClosed = true;

        private void SalesBtn_Click(object sender, EventArgs e)
        {
            isFormClosed = true;
            this.Close();
            if (isFormClosed)
            {
                FrmSales f = new FrmSales();
                f.Show();
            }

        }

        private void textBox15_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                try
                {


                    if (ProSetting.ClientBillType)
                    {
                        DataTable dmt = Codes.Search("select ID,Name,Isnull(Status,0) as Status from Clients WHERE BillType='" + BillKindCom.Text + "'  and id = " + TxtClientCode.Text + " " + orderClients, "");
                        // dtClients = dmt;

                        if (dmt.Rows.Count > 0)
                        {
                            if (dmt.Rows.Count == 1)
                            {
                                var status = Convert.ToBoolean(dmt.Rows[0]["Status"].Stringify());
                                if (!status)
                                {
                                    MessageBox.Show(Tr.M2.m670, Tr.M1.error, MessageBoxButtons.OK, MessageBoxIcon.Warning);
                                    return;
                                }
                                ClientCombo.SelectedValue = dmt.Rows[0]["ID"].ToInt32();
                                ClientCombo.Focus();
                                ClientCombo_SelectedValueChanged(sender, e);
                                ClientCombo_SelectedIndexChanged(sender, e);
                            }

                        }
                        else
                        {

                        }

                    }
                    else
                    {
                        DataTable dt = Codes.Search("select ID,Name,Isnull(Status,0) as Status from Clients WHERE id=" + TxtClientCode.Text + " " + orderClients, "");

                        if (dt.Rows.Count > 0)
                        {
                            if (dt.Rows.Count == 1)
                            {
                                var status = Convert.ToBoolean(dt.Rows[0]["Status"].Stringify());
                                if (!status)
                                {
                                    MessageBox.Show(Tr.M2.m670, Tr.M1.error, MessageBoxButtons.OK, MessageBoxIcon.Warning);
                                    return;
                                }
                                ClientCombo.SelectedValue = dt.Rows[0]["ID"].ToInt32();
                                ClientCombo.Focus();
                                ClientCombo_SelectedValueChanged(sender, e);
                                ClientCombo_SelectedIndexChanged(sender, e);
                            }

                        }

                    }


                }
                catch { }
            }


        }

        private void ChkSearchByClientCode_CheckedChanged(object sender, EventArgs e)
        {
            TxtClientCode.Enabled = ChkSearchByClientCode.Checked;
        }

        private void btnBean_Click(object sender, EventArgs e)
        {
            checkBox3.Visible = ProSetting.UniderDelevItem;
            panel13.Visible = true;
            numericUpDown2.Focus();
        }

        private bool _BayanLoading = false;
        private void importbtn_Click(object sender, EventArgs e)
        {
            try
            {

                var underDeliveryBayan = false;
                DataTable dtBayan = Codes.Search2("select * from BayanBills2 where BayanNo='" + numericUpDown2.Value + "'");
                if (dtBayan.Rows.Count > 0)
                {
                    try
                    {
                        underDeliveryBayan = !string.IsNullOrEmpty(dtBayan.Rows[0]["UnderDelevDate"].Stringify());
                    }
                    catch
                    {
                    }

                    if (!Convert.ToBoolean(dtBayan.Rows[0]["Billed"].Stringify()))
                    {

                        try
                        {
                            dataGridView1.Rows.Clear();
                        }
                        catch
                        {
                        }
                        _BayanLoading = true;
                        clear();
                        BillKindCom.Enabled = false;
                        BillKindCom.Text = dtBayan.Rows[0][5].Stringify();

                        ClientCombo.SelectedValue = dtBayan.Rows[0][2].ToInt32();
                        ClientCombo.Text =
                            Codes.Search2("select name from clients where id='" + dtBayan.Rows[0][2].Stringify() + "'")
                                .Rows[0][0].Stringify();

                        LoadClientRassed();

                        _BayanLoading = false;
                        SellerCombo.SelectedValue = dtBayan.Rows[0][4].Stringify();

                        TransportValue.Text = dtBayan.Rows[0][11].Stringify();
                        Total = 0;

                        DataTable dt1 = Codes.Search2(
                            @"
SELECT Distinct    
Items.Barcode, 
isnull(BayanItems2.ItemName,Items.Name) as ItemName,
 BayanItems2.Qnt, BayanItems2.UnitPrice, 
BayanItems2.discount, BayanItems2.QntDiscount, BayanItems2.Total, 
Items.ID as ItemID, BayanItems2.StoreID, ItemsUnit.ItMain, Units.Name AS UnitName,
 BayanItems2.UnitID, 
 CASE WHEN dbo.ItemsUnit.ItMain=1 and IsNull(dbo.Store.Price,0) > 0 
 THEN dbo.Store.Price - ((dbo.Store.Price * Isnull(Items.discountincoming,0))/100)
 ELSE  (dbo.ItemsUnit.BuyPrice - ((dbo.ItemsUnit.BuyPrice * Isnull(Items.discountincoming,0))/100)) End as BuyPrice , 
(BayanItems2.Total - (BayanItems2.Qnt * ItemsUnit.ItMain *  (dbo.ItemsUnit.BuyPrice - ((dbo.ItemsUnit.BuyPrice * Isnull(Items.discountincoming,0))/100)))) AS Profit,
 BayanItems2.Qnt * ItemsUnit.ItMain *  (dbo.ItemsUnit.BuyPrice - ((dbo.ItemsUnit.BuyPrice * Isnull(Items.discountincoming,0))/100)) AS BuyPriceTotal, 
'False' AS CheckedState,
BayanItems2.Serial,
Items.Active,
BayanItems2.Id 
, isnull(BayanItems2.UnderDeliveryItem,0) UnderDeliveryItem 
,Isnull((Select Quantity From Store Where ItemId= BayanItems2.ItemId and StoreId=BayanItems2.StoreId),0) as StoreQnt 
,(BayanItems2.Qnt * ItemsUnit.ItMain) as countItemmain,
isnull(BayanItems2.ItemTax,0) as ItemTax ,
(select isnull(
(select  Point from Itemspoint where  ItemID= BayanItems2.ItemID and Datefrom <= Convert(varchar(10),GetDate(),23) + ' 00:00:00'
and  isnull(DateTo,'01-01-1900') >= case when DateTo is null or Year(DateTo)='1900' then '01-01-1900' else  Convert(varchar(10),GetDate(),23) + ' 00:00:00'  end),0)) as Points,
Isnull((Select Cast(Sum(amount * itMains) as nvarchar(50)) From UnderDelivery Where ItemID = BayanItems2.ItemID 
and StoreId=BayanItems2.StoreId),'0')
+ '/' 
+ Isnull((Select Cast(Sum(amount * itMains) as nvarchar(50)) From UnderDelivery 
Where ItemID= ItemsUnit.ItemID ),0) as UnderDeliveryQnt
FROM   BayanItems2 INNER JOIN
Items ON BayanItems2.ItemID = Items.ID INNER JOIN
Units ON BayanItems2.UnitID = Units.ID Inner Join Store On Store.ItemId= Items.Id and Store.StoreID=BayanItems2.StoreID INNER JOIN
ItemsUnit ON BayanItems2.ItemID = ItemsUnit.ItemID AND BayanItems2.UnitID = ItemsUnit.UnitID
and BayanItems2.BayanNo='" + numericUpDown2.Value + "' order by BayanItems2.id");
                        DataTable dtNotFound = new DataTable();
                        var NotEnoughQuantityRowIndexes = "";
                        dtNotFound.Columns.Add("اسم الصنف");
                        dtNotFound.Columns.Add("الكمية");
                        dtNotFound.Columns.Add("الوحدة");
                        for (int i = 0; i < dt1.Rows.Count; i++)
                        {
                            var QuanNotEnoungh = false;
                            if (Convert.ToBoolean(dt1.Rows[i]["Active"].Stringify()))
                            {
                                ms = new MemoryStream();
                                byte[] img1 = null;

                                DataTable dtitempic =
                                    Codes.Search2(@"select Picture,Items.StoreCode from Items 
where ID = '" + dt1.Rows[i]["ItemID"] + "'");
                                if (dtitempic.Rows[0][0].ToText() != "")
                                {
                                    SqlBytes bytes = new SqlBytes((byte[])dtitempic.Rows[0][0]);
                                    img1 = (byte[])dtitempic.Rows[0][0];

                                }

                                decimal buyPrice = 0M, UnitPrice = 0M, taxRatio = 0M,
                                    TaxValue = 0M,
                                    itemTotal = 0M, netSale = 0M,
                                    discount_val = 0M;
                                var unitPrice = Convert.ToDecimal(dt1.Rows[i]["UnitPrice"].Stringify());
                                itemTotal = Math.Round(
                                    (Convert.ToDecimal(dt1.Rows[i]["Qnt"].Stringify()) *
                                     Convert.ToDecimal(dt1.Rows[i]["UnitPrice"].Stringify()))
                                    , ProSetting.Round
                                    , MidpointRounding.AwayFromZero);

                                taxRatio = Math.Round(
                                    Convert.ToDecimal(dt1.Rows[i]["ItemTax"]),
                                    ProSetting.Round
                                    , MidpointRounding.AwayFromZero);

                                try
                                {
                                    discount_val = Math.Round(
                                        (itemTotal * (Convert.ToDecimal(dt1.Rows[i]["discount"].Stringify()) / 100))
                                        , ProSetting.Round
                                        , MidpointRounding.AwayFromZero);
                                }
                                catch
                                {
                                }

                                netSale = Math.Round((itemTotal - discount_val)
                                    , ProSetting.Round
                                    , MidpointRounding.AwayFromZero);

                                decimal additionValue = 0;
                                if (ProSetting.ItemsAdditionValue)
                                {
                                    additionValue = Convert.ToDecimal(dt1.Rows[i]["AdditionValue"])
                                                        * Convert.ToDecimal(dt1.Rows[i]["Quantity"]);

                                    netSale = netSale + additionValue;
                                }
                                else if (ProSetting.ItemsTax)
                                {
                                    try
                                    {
                                        TaxValue = Math.Round(((ProSetting.DarebaAfterDiscount ? netSale : itemTotal)
                                                               * (taxRatio / 100))
                                            , ProSetting.Round
                                            , MidpointRounding.AwayFromZero);
                                    }
                                    catch
                                    {
                                    }
                                }


                                var colorT = AutomaticColorTextInSales
                                    ? (string.IsNullOrEmpty(textBox8.Text)
                                        ? (dataGridView1.Rows.Count).Stringify()
                                        : textBox8.Text)
                                    : textBox8.Text;
                                var totalPrice = Math.Round((netSale + TaxValue)
                                    , ProSetting.Round
                                    , MidpointRounding.AwayFromZero);
                                StoreQty = dt1.Rows[i]["StoreQnt"].ToDecimal();

                                var mainunitPrice = Math.Round(Convert.ToDecimal(dt1.Rows[i]["UnitPrice"])
                                                               / Convert.ToDecimal(dt1.Rows[i]["ItMain"]),
                                    ProSetting.Round,
                                    MidpointRounding.AwayFromZero);

                                selectedItemPoints = Convert.ToDecimal(dt1.Rows[i]["Points"].Stringify());
                                selectedUnderDeliveryQnt = dt1.Rows[i]["UnderDeliveryQnt"].Stringify();
                                if ((checkBox3.Checked || underDeliveryBayan)
                                    && ProSetting.UniderDelevItem)
                                {


                                    dataGridView1.Rows.Add(dt1.Rows[i]["ItemID"].Stringify(),
                                        dt1.Rows[i]["Barcode"].Stringify(),
                                        dt1.Rows[i][1].Stringify(),
                                        "",
                                        dt1.Rows[i]["UnitName"].Stringify(),
                                        dt1.Rows[i]["Qnt"].Stringify(),
                                        dt1.Rows[i]["UnitPrice"].Stringify(),
                                        Convert.ToDecimal(dt1.Rows[i]["discount"].Stringify())
                                            .ToString("F" + ProSetting.Round),
                                        discount_val.ToString("F" + ProSetting.Round),
                                        additionValue,
                                        Math.Round(
                                            Convert.ToDecimal(dt1.Rows[i]["Qnt"].Stringify()) *
                                            (Convert.ToDecimal(dt1.Rows[i]["ItMain"].Stringify())),
                                            ProSetting.Round,
                                            MidpointRounding.AwayFromZero),
                                        mainunitPrice,
                                        Convert.ToDecimal(dt1.Rows[i]["Total"].Stringify())
                                            .ToString("F" + ProSetting.Round),
                                        dt1.Rows[i]["StoreID"].Stringify(),
                                        Convert.ToDecimal(dt1.Rows[i]["ItMain"].Stringify()),
                                        Convert.ToDecimal(dt1.Rows[i]["BuyPrice"].Stringify())
                                            .ToString("F" + ProSetting.Round),
                                        Math.Round(Convert.ToDecimal(dt1.Rows[i]["Profit"].Stringify()),
                                                ProSetting.Round,
                                                MidpointRounding.AwayFromZero).ToString("F" + ProSetting.Round),
                                        Math.Round(Convert.ToDecimal(dt1.Rows[i]["BuyPriceTotal"].Stringify()),
                                                ProSetting.Round,
                                                MidpointRounding.AwayFromZero)
                                            .ToString("F" + ProSetting.Round),
                                        dtitempic.Rows[0]["StoreCode"].Stringify(),
                                        Math.Round(StoreQty, ProSetting.Round,
                                                MidpointRounding.AwayFromZero)
                                            .ToString("F" + ProSetting.Round),
                                        true,
                                        img1,
                                        taxRatio,
                                        "طباعة",
                                        (byte)DiscountType.Percentage,
                                        selectedItemPoints,//25
                                        selectedUnderDeliveryQnt,//26
                                        dt1.Rows[i]["BuyPrice"].ToDecimal()//27
                                        );
                                }
                                else
                                {
                                    if (StoreQty.NormalizeDecimalPlaces(ProSetting.Round) < (dt1.Rows[i]["Qnt"].ToDecimal() *
                                                    dt1.Rows[i]["ItMain"].ToDecimal()).NormalizeDecimalPlaces(ProSetting.Round))
                                    {

                                        if (ProSetting.UniderDelevItem)
                                        {
                                            if (!string.IsNullOrEmpty(dt1.Rows[i]["UnderDeliveryItem"].Stringify()) &&
                                                Convert.ToBoolean(dt1.Rows[i]["UnderDeliveryItem"].Stringify()))
                                            {
                                                dataGridView1.Rows.Add(dt1.Rows[i]["ItemID"].Stringify(),
                                                    dt1.Rows[i]["Barcode"].Stringify(),
                                                    dt1.Rows[i][1].Stringify(),
                                                    "",
                                                    dt1.Rows[i]["UnitName"].Stringify(),
                                                    dt1.Rows[i]["Qnt"].Stringify(),
                                                    dt1.Rows[i]["UnitPrice"].Stringify(),
                                                    Convert.ToDecimal(dt1.Rows[i]["discount"].Stringify())
                                                        .ToString("F" + ProSetting.Round),
                                                    discount_val.ToString("F" + ProSetting.Round),
                                                    additionValue,
                                                    Math.Round(
                                                        Convert.ToDecimal(dt1.Rows[i]["Qnt"].Stringify()) *
                                                        (Convert.ToDecimal(dt1.Rows[i]["ItMain"].Stringify())),
                                                        ProSetting.Round,
                                                        MidpointRounding.AwayFromZero),
                                                    mainunitPrice,
                                                    Convert.ToDecimal(dt1.Rows[i]["Total"].Stringify())
                                                        .ToString("F" + ProSetting.Round),
                                                    dt1.Rows[i]["StoreID"].Stringify(),
                                                    Convert.ToDecimal(dt1.Rows[i]["ItMain"].Stringify()),
                                                    Convert.ToDecimal(dt1.Rows[i]["BuyPrice"].Stringify())
                                                        .ToString("F" + ProSetting.Round),
                                                    Math.Round(Convert.ToDecimal(dt1.Rows[i]["Profit"].Stringify()),
                                                            ProSetting.Round,
                                                            MidpointRounding.AwayFromZero)
                                                        .ToString("F" + ProSetting.Round),
                                                    Math.Round(Convert.ToDecimal(dt1.Rows[i]["BuyPriceTotal"].Stringify()),
                                                            ProSetting.Round,
                                                            MidpointRounding.AwayFromZero)
                                                        .ToString("F" + ProSetting.Round),
                                                    dtitempic.Rows[0]["StoreCode"].Stringify(),
                                                    Math.Round(StoreQty, ProSetting.Round,
                                                            MidpointRounding.AwayFromZero)
                                                        .ToString("F" + ProSetting.Round
                                                                  .Stringify()),
                                                    true,
                                                    img1,
                                                    taxRatio,
                                                    "طباعة",
                                                    (byte)DiscountType.Percentage,
                                                    selectedItemPoints,
                                                    selectedUnderDeliveryQnt,
                                                     dt1.Rows[i]["BuyPrice"].ToDecimal());
                                            }
                                            else
                                            {
                                                if (ProSetting.StoreMinus)
                                                {
                                                    QuanNotEnoungh = false;
                                                    dataGridView1.Rows.Add(dt1.Rows[i]["ItemID"].Stringify(),
                                                        dt1.Rows[i]["Barcode"].Stringify(),
                                                        dt1.Rows[i][1].Stringify(),
                                                        "",
                                                        dt1.Rows[i]["UnitName"].Stringify(),
                                                        dt1.Rows[i]["Qnt"].Stringify(),
                                                        dt1.Rows[i]["UnitPrice"].Stringify(),
                                                        Convert.ToDecimal(dt1.Rows[i]["discount"].Stringify())
                                                            .ToString(
                                                                "F" + ProSetting.Round),
                                                        discount_val.ToString(
                                                            "F" + ProSetting.Round),
                                                        additionValue,
                                                        Math.Round(
                                                            Convert.ToDecimal(dt1.Rows[i]["Qnt"].Stringify()) *
                                                            (Convert.ToDecimal(dt1.Rows[i]["ItMain"].Stringify())),
                                                            ProSetting.Round,
                                                            MidpointRounding.AwayFromZero),
                                                        mainunitPrice,
                                                        Convert.ToDecimal(dt1.Rows[i]["Total"].Stringify())
                                                            .ToString(
                                                                "F" + ProSetting.Round),
                                                        dt1.Rows[i]["StoreID"].Stringify(),
                                                        Convert.ToDecimal(dt1.Rows[i]["ItMain"].Stringify()),
                                                        Convert.ToDecimal(dt1.Rows[i]["BuyPrice"].Stringify())
                                                            .ToString(
                                                                "F" + ProSetting.Round),
                                                        Math.Round(Convert.ToDecimal(dt1.Rows[i]["Profit"].Stringify()),
                                                                ProSetting.Round,
                                                                MidpointRounding.AwayFromZero)
                                                            .ToString(
                                                                "F" + ProSetting.Round),
                                                        Math.Round(Convert.ToDecimal(dt1.Rows[i]["BuyPriceTotal"].Stringify()),
                                                                ProSetting.Round,
                                                                MidpointRounding.AwayFromZero)
                                                            .ToString(
                                                                "F" + ProSetting.Round),
                                                        dtitempic.Rows[0]["StoreCode"].Stringify(),
                                                        Math.Round(StoreQty,
                                                                ProSetting.Round,
                                                                MidpointRounding.AwayFromZero)
                                                            .ToString(
                                                                "F" + ProSetting.Round
                                                                .Stringify()),
                                                        Convert.ToBoolean(dt1.Rows[i]["UnderDeliveryItem"].Stringify()),
                                                        img1,
                                                        taxRatio,
                                                        "طباعة",
                                                        (byte)DiscountType.Percentage,
                                                        selectedItemPoints,
                                                        selectedUnderDeliveryQnt,
                                                         dt1.Rows[i]["BuyPrice"].ToDecimal());
                                                }
                                                else
                                                    QuanNotEnoungh = true;
                                            }

                                        }
                                        else if (ProSetting.StoreMinus)
                                        {
                                            QuanNotEnoungh = false;

                                            dataGridView1.Rows.Add(dt1.Rows[i]["ItemID"].Stringify(),
                                                dt1.Rows[i]["Barcode"].Stringify(),
                                                dt1.Rows[i][1].Stringify(),
                                                "",
                                                dt1.Rows[i]["UnitName"].Stringify(),
                                                dt1.Rows[i]["Qnt"].Stringify(),
                                                dt1.Rows[i]["UnitPrice"].Stringify(),
                                                Convert.ToDecimal(dt1.Rows[i]["discount"].Stringify())
                                                    .ToString("F" + ProSetting.Round),
                                                discount_val.ToString(
                                                    "F" + ProSetting.Round),
                                                additionValue,
                                                Math.Round(
                                                    Convert.ToDecimal(dt1.Rows[i]["Qnt"].Stringify()) *
                                                    (Convert.ToDecimal(dt1.Rows[i]["ItMain"].Stringify())),
                                                    ProSetting.Round,
                                                    MidpointRounding.AwayFromZero),
                                                mainunitPrice,
                                                Convert.ToDecimal(dt1.Rows[i]["Total"].Stringify())
                                                    .ToString("F" + ProSetting.Round),
                                                dt1.Rows[i]["StoreID"].Stringify(),
                                                Convert.ToDecimal(dt1.Rows[i]["ItMain"].Stringify()),
                                                Convert.ToDecimal(dt1.Rows[i]["BuyPrice"].Stringify())
                                                    .ToString("F" + ProSetting.Round),
                                                Math.Round(Convert.ToDecimal(dt1.Rows[i]["Profit"].Stringify()),
                                                        ProSetting.Round,
                                                        MidpointRounding.AwayFromZero)
                                                    .ToString("F" + ProSetting.Round),
                                                Math.Round(Convert.ToDecimal(dt1.Rows[i]["BuyPriceTotal"].Stringify()),
                                                        ProSetting.Round,
                                                        MidpointRounding.AwayFromZero)
                                                    .ToString("F" + ProSetting.Round),
                                                dtitempic.Rows[0]["StoreCode"].Stringify(),
                                                Math.Round(StoreQty, ProSetting.Round,
                                                        MidpointRounding.AwayFromZero)
                                                    .ToString(
                                                        "F" + ProSetting.Round),
                                                Convert.ToBoolean(dt1.Rows[i]["UnderDeliveryItem"].Stringify()),
                                                img1,
                                                taxRatio,
                                                "طباعة",
                                                (byte)DiscountType.Percentage,
                                                selectedItemPoints,//25
                                                selectedUnderDeliveryQnt,
                                                 dt1.Rows[i]["BuyPrice"].ToDecimal());
                                        }
                                        else
                                            QuanNotEnoungh = true;


                                        if (QuanNotEnoungh)
                                        {
                                            DataRow dr = dt1.Rows[i];

                                            dtNotFound.Rows.Add(dt1.Rows[i][1].Stringify(),
                                                dt1.Rows[i]["Qnt"].Stringify(),
                                                dt1.Rows[i]["UnitName"].Stringify());


                                            try
                                            {
                                                NotEnoughQuantityRowIndexes += i.Stringify() + ",";
                                            }
                                            catch
                                            {
                                            }
                                        }

                                    }
                                    else
                                    {


                                        dataGridView1.Rows.Add(dt1.Rows[i]["ItemID"].Stringify(),
                                            dt1.Rows[i]["Barcode"].Stringify(),
                                            dt1.Rows[i][1].Stringify(),
                                            "",
                                            dt1.Rows[i]["UnitName"].Stringify(),
                                            dt1.Rows[i]["Qnt"].Stringify(),
                                            dt1.Rows[i]["UnitPrice"].Stringify(),
                                            Convert.ToDecimal(dt1.Rows[i]["discount"].Stringify())
                                                .ToString("F" + ProSetting.Round),
                                            discount_val.ToString("F" + ProSetting.Round),
                                            additionValue,
                                            Math.Round(
                                                Convert.ToDecimal(dt1.Rows[i]["Qnt"].Stringify()) *
                                                (Convert.ToDecimal(dt1.Rows[i]["ItMain"].Stringify())),
                                                ProSetting.Round,
                                                MidpointRounding.AwayFromZero),
                                            mainunitPrice,
                                            Convert.ToDecimal(dt1.Rows[i]["Total"].Stringify())
                                                .ToString("F" + ProSetting.Round),
                                            dt1.Rows[i]["StoreID"].Stringify(),
                                            Convert.ToDecimal(dt1.Rows[i]["ItMain"].Stringify()),
                                            Convert.ToDecimal(dt1.Rows[i]["BuyPrice"].Stringify())
                                                .ToString("F" + ProSetting.Round),
                                            Math.Round(Convert.ToDecimal(dt1.Rows[i]["Profit"].Stringify()),
                                                    ProSetting.Round,
                                                    MidpointRounding.AwayFromZero)
                                                .ToString("F" + ProSetting.Round),
                                            Math.Round(Convert.ToDecimal(dt1.Rows[i]["BuyPriceTotal"].Stringify()),
                                                    ProSetting.Round,
                                                    MidpointRounding.AwayFromZero)
                                                .ToString("F" + ProSetting.Round),
                                            dtitempic.Rows[0]["StoreCode"].Stringify(),
                                            Math.Round(StoreQty, ProSetting.Round,
                                                    MidpointRounding.AwayFromZero)
                                                .ToString(
                                                    "F" + ProSetting.Round),
                                            Convert.ToBoolean(dt1.Rows[i]["UnderDeliveryItem"].Stringify()),
                                            img1,
                                            taxRatio,
                                            "طباعة",
                                            (byte)DiscountType.Percentage,
                                            selectedItemPoints,//25
                                            selectedUnderDeliveryQnt,
                                             dt1.Rows[i]["BuyPrice"].ToDecimal());
                                    }
                                }
                            }
                            else
                            {
                                MessageBox.Show(Tr.M1.m0274 + Environment.NewLine + dt1.Rows[i][1] + Tr.M1.m275);
                                clear();
                                break;
                            }

                            try
                            {
                                DataGridViewComboBoxCell dgvCmbCell;
                                dgvCmbCell =
                                    (DataGridViewComboBoxCell)dataGridView1.Rows[dataGridView1.Rows.Count - 2]
                                        .Cells[4];

                                DataTable dtUnits = new DataTable();
                                dtUnits = Codes.Search2(@"SELECT     dbo.Units.ID, dbo.Units.Name
FROM         dbo.ItemsUnit INNER JOIN
                      dbo.Units ON dbo.ItemsUnit.UnitID = dbo.Units.ID where ItemsUnit.ItemID = '" +
                                                        dt1.Rows[i]["ItemID"].Stringify() + "' order by ItemsUnit.ID");

                                dgvCmbCell.DataSource = dtUnits;
                                dgvCmbCell.DisplayMember = dtUnits.Columns[1].Stringify();
                            }
                            catch
                            {
                            }
                        }

                        try
                        {

                            decimal TB = 0;
                            decimal Rebhea = 0;

                            for (int i = 1; i < dataGridView1.Rows.Count; i++)
                            {
                                TB += Convert.ToDecimal(dataGridView1.Rows[i - 1].Cells["TotalPrice"].Value.Stringify());
                                Rebhea += Convert.ToDecimal(dataGridView1.Rows[i - 1].Cells["Rebhea"].Value.Stringify());
                                //Dis += Convert.ToDecimal(dataGridView1.Rows[i - 1].Cells[7].Value.Stringify());

                                Total = TB;
                                totalrebh = Rebhea;
                                amu = false;
                            }

                            textBox5.Text = Math.Round(Total
                                    , ProSetting.Round
                                    , MidpointRounding.AwayFromZero)
                                .ToString("F" + ProSetting.Round);

                            RebheaText.Text = Math
                                .Round(totalrebh - Convert.ToDecimal(textBox3.Text),
                                    ProSetting.Round, MidpointRounding.AwayFromZero)
                                .ToString("F" + ProSetting.Round);
                        }
                        catch
                        {
                        }

                        if (dtNotFound.Rows.Count > 0)
                        {
                            FrmItemsNotFound f = new FrmItemsNotFound(dtNotFound, false, numericUpDown2.Value.Stringify());
                            var res = f.ShowDialog();
                            if (res == DialogResult.Abort)
                            {
                                importbtn_Click(sender, e);
                            }

                        }
                        var bayanDisountRate = dtBayan.Rows[0]["DiscountNesba"].ToDecimal().NormalizeDecimalPlaces();
                        var bayanDisountValue = dtBayan.Rows[0]["DiscountValue"].ToDecimal().NormalizeDecimalPlaces();
                        if (bayanDisountRate > 0 || bayanDisountValue > 0)
                        {
                            var calculatedDiscountAmount = (textBox5.Text.ToDecimal() * bayanDisountRate) / 100;
                            if (calculatedDiscountAmount == bayanDisountValue)
                            {
                                RBDiscountPercentage.Checked = true;
                                discountChanged = true;
                                textBox4.Text = bayanDisountRate.Stringify();
                            }
                            else
                            {
                                RBDiscountValue.Checked = true;
                                discountChanged = true;
                                textBox3.Text = bayanDisountValue.Stringify();
                            }
                        }
                        else
                        {
                            RBDiscountPercentage.Checked = true;
                            discountChanged = true;
                            textBox4.Text = "0.00";
                        }
                        var bayanVatRate = dtBayan.Rows[0]["Dareeba"].ToDecimal().NormalizeDecimalPlaces();
                        var bayanTransportAmount = dtBayan.Rows[0]["TransportValue"].ToDecimal().NormalizeDecimalPlaces();
                        if(bayanVatRate > 0)
                            DarebaText.Text = bayanVatRate.Stringify();
                        if(bayanTransportAmount > 0)
                            TransportValue.Text = bayanTransportAmount.Stringify();

                    }
                    else
                    {
                        MessageBox.Show(Tr.M1.m0891);
                    }

                }
                else
                {
                    MessageBox.Show(Tr.M1.m0669);
                }
            }
            catch (Exception ex)
            {

                if (MessageBox.Show(Tr.M1.m0453 + Environment.NewLine + Tr.M1.m0346,
                                                                    Tr.M1.error,
                                                                    MessageBoxButtons.OKCancel,
                                                                    MessageBoxIcon.Error, MessageBoxDefaultButton.Button2) == DialogResult.OK)
                {
                    MessageBox.Show(ex.Message, Tr.M1.m0213,
                        MessageBoxButtons.OK,
                        MessageBoxIcon.Asterisk);
                }
            }
        }

        private void label60_Click(object sender, EventArgs e)
        {
            panel13.Visible = false;
        }

        private void btnClientsPointEshar_Click(object sender, EventArgs e)
        {
            var frm = new FrmClientsPointEshar();
            frm.ShowDialog();
        }

        private void numericUpDown2_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                e.Handled = true;
                importbtn.PerformClick();
            }
        }

        private void btnUnderdelevebill_Click(object sender, EventArgs e)
        {
            var fm = new UnderDelevBillFrm();
            fm.Icon = FrmMainNEW.Instance.Icon;
            fm.Show();
        }

        private void btnUnderdeleveitem_Click(object sender, EventArgs e)
        {
            var f = new FrmUnderDelivery();
            f.Icon = FrmMainNEW.Instance.Icon;
            f.Show();
        }

        private void dataGridView1_CellBeginEdit(object sender, DataGridViewCellCancelEventArgs e)
        {
            try
            {
                if (dataGridView1.Rows[e.RowIndex].IsNewRow
                    && ClientCombo.SelectedValue.ToInt32() == 0)
                {
                    MessageBox.Show(Tr.M1.m0272);
                    e.Cancel = true;
                }
                if (dataGridView1.Rows[e.RowIndex].IsNewRow
                    && StoreCombo.SelectedValue.ToInt32() == 0)
                {
                    MessageBox.Show(Tr.M1.m0271);
                    e.Cancel = true;
                }
            }
            catch
            {
            }
        }

        private void BtnPrint_Click(object sender, EventArgs e)
        {
            try
            {
                dataSet11.Clear();
                if (ClientCombo.SelectedItem == null)
                {
                    MessageBox.Show(Tr.M1.m0270);
                }
                else
                {
                    if (dataGridView1.Rows.Count > 1)
                    {
                        FillDataSetToPrinting();
                        var fm = new FrmReportSalesBill2(dataSet11);
                        if (!ProSetting.LivePrint)
                            fm.ShowDialog();
                    }
                    else
                    {
                        MessageBox.Show(Tr.M1.m0129);
                    }
                }
            }
            catch (Exception ex)
            {
            }
        }

        private void FillDataSetToPrinting()
        {
            DateTime? dat1 = null;
            if (ProSetting.UnderDelevBill)
            {
                if (checkBox1.Checked)
                {
                    dat1 = dateTimePicker2.Value;
                }
            }

            for (var index = 0; index < dataGridView1.RowCount - 1; index++)
            {

                dataSet11.Sales.Rows.Add(index + 1,
                    BillNoT.Text,
                    ClientCombo.SelectedValue,
                    dataGridView1.Rows[index].Cells["ItemID"].Value.Stringify(),
                    dataGridView1.Rows[index].Cells["Quantity"].Value.Stringify(),
                    Math.Round(Convert.ToDecimal(dataGridView1.Rows[index].Cells["UnitPrice"].Value.Stringify()),
                            ProSetting.Round, MidpointRounding.AwayFromZero)
                        .ToString("F" + ProSetting.Round),
                    dataGridView1.Rows[index].Cells["TotalPrice"].Value.Stringify(),
                    Convert.ToDateTime(dateTimePicker1.Value.ToString("yyyy-MM-dd")),
                    SellerCombo.SelectedValue.Stringify(),
                    dataGridView1.Rows[index].Cells["ItemName"].Value + " " + dataGridView1.Rows[index].Cells["ItemColor"].Value,
                    dataGridView1.Rows[index].Cells["Discount"].Value.Stringify(),
                    0,
                    dataGridView1.Rows[index].Cells["StoreID"].Value.Stringify(),
                    DarebaText.Text,
                    dataGridView1.Rows[index].Cells["mainIt"].Value.Stringify(),
                    Codes.Search2("Select Id From Units Where Name='" + dataGridView1.Rows[index].Cells[4].Value + "'").Rows[0][0],
                    dataGridView1.Rows[index].Cells[4].Value.Stringify(),
                    BillKindCom.Text,
                    textBox11.Text,
                    ProSetting.UserIdLo,
                    ct.NoToTxt(Convert.ToDouble(Convert.ToDecimal(dataGridView1.Rows[index].Cells["Quantity"].Value).NormalizeDecimalPlaces(ProSetting.Round)),
                        "صحيح", "جزء"),
                    TransportValue.Text,
                    DateTime.Now.ToString("hh:mm tt", CultureInfo.InvariantCulture),
                    BuyPrice.ToString("F" + ProSetting.Round),
                    textBox1.Text,
                    dataGridView1.Rows[index].Cells[3].Value.Stringify(),
                    dat1,
                    "",
                    "",
                    null,
                    0,
                    ProSetting.UserNameLo,
                    null,
                    "",
                    dataGridView1.Rows[index].Cells[1].Value.Stringify(),
                    dataGridView1.Rows[index].Cells["ItemTax"].Value.Stringify());
            }

            decimal paidValue;
            if (ProSetting.LinkBilltypeWithCashFromClient)
            {
                paidValue = Convert.ToDecimal(textBox10.Text);
            }
            else
            {
                if (ProSetting.CancelMadfo)
                {
                    paidValue = Convert.ToDecimal(textBox11.Text);
                }
                else if (ProSetting.CancelMadfoForNakdi &&
                         ProSetting.NakdiClient ==
                         ClientCombo.SelectedValue.ToInt32())
                {
                    paidValue = Convert.ToDecimal(textBox11.Text);
                }
                else
                {
                    paidValue = Convert.ToDecimal(textBox10.Text);
                }
            }

            dataSet11.ClientMove.Rows.Add(1,
                ClientCombo.SelectedValue,
                BillNoT.Text,
                textBox5.Text,
                Convert.ToDecimal(textBox4.Text),
                Convert.ToDecimal(textBox3.Text), textBox11.Text,
                Convert.ToDateTime(dateTimePicker1.Value.ToString("yyyy-MM-dd")),
                BeanKindCom.SelectedItem.Stringify(),
                DarebaText.Text,
                ProSetting.UserIdLo,
                SellerCombo.SelectedValue.Stringify(),
                PayedKindCom.Text,
                TransportValue.Text,
                StockCombo.SelectedValue.Stringify(),
                Convert.ToDateTime(dateTimePicker1.Value.ToString("yyyy-MM-dd")),
                label18.Text,
                "بيع عادى",
                paidValue,
                ItemsVATTotalValue);

            dataSet11.Client5.Rows.Add(0, ClientCombo.SelectedValue.Stringify(),
                textBox10.Text,
                textBox11.Text,
                0,
                "",
                dateTimePicker1.Value.Date, "", BillNoT.Text);

            dataSet11.BillPaids.Rows.Add(0,
                1,
                StockCombo.SelectedValue.Stringify(),
                textBox9.Text,
                BankCombo.SelectedValue.Stringify(),
                textBox12.Text);

            dataSet11.Clients.Rows.Add(ClientCombo.SelectedValue.Stringify(), ClientCombo.Text);

        }

        private void ChkAddBillPointsAsDiscount_CheckedChanged(object sender, EventArgs e)
        {
            try
            {
                if (!ChkAddBillPointsAsDiscount.Checked)
                {
                    PnlPoints.Visible = false;
                    LblBillPoints.Text = "0";

                    RBDiscountPercentage.Enabled =
                        textBox3.Enabled =
                                textBox4.Enabled = true;
                    RBDiscountPercentage.Checked = true;
                    discountChanged = true;
                    textBox4.Text = ProSetting.Discount.ToString("F" + ProSetting.Round);
                }
                else
                {
                    RBDiscountValue.Checked = true;
                    PnlPoints.Visible = true;

                    RBDiscountPercentage.Enabled =
                        textBox3.Enabled =
                                textBox4.Enabled = false;
                    decimal pointsNo = 0M, pointPrice = 0M, billPointsTotalAmount = 0M, billPointsCount = 0;

                    try
                    {
                        pointsNo = Convert.ToDecimal(
                            Codes.Search2("select PointNo from ProSetting").Rows[0][0].Stringify());
                    }
                    catch
                    {
                        pointsNo = 0;
                    }

                    try
                    {
                        pointPrice = Convert.ToDecimal(
                            Codes.Search2("select PointPrice from ProSetting").Rows[0][0].Stringify());
                    }
                    catch
                    {
                        pointPrice = 0;
                    }


                    for (int i = 1; i < dataGridView1.Rows.Count; i++)
                    {

                        var quantity = Convert.ToDecimal(dataGridView1.Rows[i - 1].Cells["Quantity"].Value);
                        var ItMain = Convert.ToDecimal(dataGridView1.Rows[i - 1].Cells["mainIt"].Value);
                        var itemPoints =
                            Convert.ToDecimal(dataGridView1.Rows[i - 1].Cells["ItemPoints"].Value) * quantity * ItMain;
                        billPointsTotalAmount += Math.Round(((itemPoints * pointPrice) / pointsNo),
                            ProSetting.Round);
                        billPointsCount += itemPoints;

                    }
                    discountChanged = true;
                    if (billPointsTotalAmount > 0)
                    {
                        textBox3.Text = billPointsTotalAmount.ToString("F" + ProSetting.Round);
                        LblBillPoints.Text = Math.Round(billPointsCount, ProSetting.Round)
                            .ToString("F" + ProSetting.Round);
                    }
                    else
                        textBox3.Text = LblBillPoints.Text = "0";
                }
            }
            catch (Exception exc)
            {
            }
        }

        private void BtnKeysShortcuts_Click(object sender, EventArgs e)
        {
            try
            {
                var frm = new FrmKeysShortcuts(_keyshortcuts,
                    _formName,
                    "إختصارات المبيعات السريعة");
                var result = frm.ShowAndGetResult(this);
                if (result.Key == DialogResult.OK)
                {
                    _keyshortcuts = result.Value;
                    UpdateShortcutControls();
                }

                dataGridView1.Focus();

            }
            catch (Exception ex)
            {
                MessageBox.Show(Tr.M1.m0262 + ex.Message, Tr.M1.error, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void UpdateShortcutControls()
        {
            foreach (var shortcut in _keyshortcuts)
            {
                try
                {

                    if (!string.IsNullOrEmpty(shortcut.ShortcutControlName))
                    {
                        var control = shortcut.ShortcutControl ?? Controls.Find(shortcut.ShortcutControlName, true)[0];
                        var shortcutKeyText = shortcut.ShortcutKeys[0].Stringify();

                        if (shortcut.ShortcutKeys.Length > 1)
                        {
                            shortcutKeyText = shortcut.ShortcutKeys
                                    .Select(shrtK => shrtK.Stringify()).Aggregate((curr, next) => curr + "," + next)
                                .Replace(" ", "")
                                .Trim().TrimEnd(',');
                        }

                        var keys = shortcutKeyText.Replace(" ", "")
                                .Replace(Keys.Control.Stringify(), "")
                                .Replace(",,", ",")
                                .Trim().TrimEnd(',')
                                .Split(',');
                        if (keys.Length == 2)
                        {
                            var kys = keys.Where(ky => ky != Keys.Control.Stringify());
                            if (kys.Any(ky => ky == "F9" || ky == "F1"))
                                shortcutKeyText = "CTRL+F1 | CTRL+F9";
                        }
                        else
                            shortcutKeyText = shortcutKeyText.Contains(Keys.Control.Stringify())
                                ? "CTRL+" + keys[0]
                                : keys[0];


                        control.Text = shortcut.Active
                            ? control.Text.Contains(shortcutKeyText) ? control.Text :
                            control.Text + " " + shortcutKeyText
                            : control.Text.Replace(shortcutKeyText, "")
                                .Replace('\r', ' ')
                                .Replace('\n', ' ')
                                .Trim();
                    }
                }
                catch (Exception exc)
                {
                }
            }
        }

        private void dataGridView1_CellEnter(object sender, DataGridViewCellEventArgs e)
        {
            //dataGridView1.Focus();
            //return;
            //try
            //{
            //    if (ProSetting.Barcode || ProSetting.BarcodeOrItem != "كود الصنف")
            //        return;
            //    if (e.ColumnIndex == 1 && ProSetting.OnQuantity 
            //                           && (newRowbyBarcode || dataGridView1.CurrentCell.IsInEditMode))
            //    {
            //        SendKeys.Send("{ENTER}");
            //        return;
            //    }
            //    //if (e.ColumnIndex == 1  && ProSetting.OnQuantity && !QuantityChecked)
            //    //{
            //    //    dataGridView1.EndEdit();
            //    //    return;
            //    //}
            //    if (e.ColumnIndex != 1
            //        || e.RowIndex < 0 || e.RowIndex != dataGridView1.RowCount - 1)
            //    {


            //       // SendKeys.Send("{ESC}");

            //        dataGridView1.CellEndEdit -= dataGridView1_CellEndEdit;
            //        try
            //        {

            //            dataGridView1.EndEdit();
            //        }
            //        catch
            //        {
            //        }

            //        dataGridView1.CellEndEdit += dataGridView1_CellEndEdit;

            //        return;
            //    }

            //    dataGridView1.CellBeginEdit -= dataGridView1_CellBeginEdit;
            //    try
            //    {

            //            dataGridView1.BeginEdit(true);
            //    }
            //    catch 
            //    {
            //    }
            //    dataGridView1.CellBeginEdit += dataGridView1_CellBeginEdit;


            //}
            //catch 
            //{
            //}
        }

        private void BtnDesginSalesColumns_Click(object sender, EventArgs e)
        {
            //try
            //{
            //    new FrmDesignSalesColumns().ShowDialog(this);
            //}
            //catch (Exception exc)
            //{
            //}
        }

        private void BtnUpdateItemsSellPrices_Click(object sender, EventArgs e)
        {
            if (dataGridView1.RowCount <= 1)
            {
                MessageBox.Show(Tr.M2.m847, "", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }
            var confirmMessage = Program.language != "en"
                ? "سيتم تحديث سعر بيع جميع الاصناف المباعة لـسعر [" + BillKindCom.Text + "]  في حالة أن \n" +
                "  السعر المسجل للصنف في قاعدة البيانات اكبر من الصفر \n" +
                "  .. هل أنت متأكد من إتمام العملية ؟"
                : "The selling price for all sold items will be updated to the selected invoice type .. " +
                "in case  if the price recorded for the item in the database is greater than zero. . \n" +
                "Are you sure the process is completed?\r\n";
            var resultMessage = "";
            var currentIndex = 0;
            if (MessageBox.Show(confirmMessage, "", MessageBoxButtons.YesNo, MessageBoxIcon.Question)
                == DialogResult.Yes)
            {
                try
                {
                    dataGridView1.Enabled = false;
                    List<string> ItemIdsList = new List<string>();
                    List<string> UnitsNamesList = new List<string>();
                    for (int index = 0; index < dataGridView1.RowCount - 1; index++)
                    {
                        var itemId = dataGridView1.Rows[index].Cells[0].Value.Stringify();
                        var unitName = dataGridView1.Rows[index].Cells["mm"].Value.Stringify();

                        if (!string.IsNullOrEmpty(itemId) && !ItemIdsList.Contains(itemId))
                        {
                            ItemIdsList.Add(itemId);
                        }
                        if (!string.IsNullOrEmpty(unitName) && !ItemIdsList.Contains("'" + unitName + "'"))
                        {
                            UnitsNamesList.Add("'" + unitName + "'");
                        }
                    }
                    var UpdatedSellPriceColName = BillKindCom.Text == "قطاعي"
                        ? "Price"
                        : BillKindCom.Text == "جملة"
                            ? "PriceInter"
                            : BillKindCom.Text == "نصف جملة"
                                ? "HalfPrice"
                                : BillKindCom.Text == "جملة 1"
                                    ? "Gomla1"
                                    : BillKindCom.Text == "جملة 2"
                                        ? "Gomla2"
                                        : "Price";
                    var profitSellColumn = BillKindCom.Text == "قطاعي"
                        ? "ProfitSell"
                        : BillKindCom.Text == "جملة"
                            ? "ProfitGomla"
                            : BillKindCom.Text == "نصف جملة"
                                ? "ProfitHalfGomla"
                                : BillKindCom.Text == "جملة 1"
                                    ? "ProfitGomla1"
                                    : BillKindCom.Text == "جملة 2"
                                        ? "ProfitGomla2"
                                        : "ProfitSell";

                    var discountColumn = BillKindCom.Text == "قطاعي"
                        ? "discountbuy"
                        : BillKindCom.Text == "جملة"
                            ? "discountgomla"
                            : BillKindCom.Text == "نصف جملة"
                                ? "discounthalfgomla"
                                : BillKindCom.Text == "جملة 1"
                                    ? "discountgomla1"
                                    : BillKindCom.Text == "جملة 2"
                                        ? "discountgomla2"
                                        : "discountbuy";

                    var itemIds = string.Join(",", ItemIdsList.Distinct().ToArray());
                    var itemsUnitNames = string.Join(",", UnitsNamesList.Distinct().ToArray());

                    var dtAllSellPrices = Codes.Search2(@"
Select ItemID, 
ItemsUnit.UnitID,
Units.Name as UnitName,
ItemsUnit.Barcode ,
ItemsUnit." + UpdatedSellPriceColName + @",
" + profitSellColumn + @",
" + discountColumn + @",
Isnull(IsInDiscountList,0) as IsInDiscountList
From ItemsUnit Join Items on ItemsUnit.ItemID = Items.ID
Join Units on ItemsUnit.UnitID = Units.ID
Where ItemID in (" + itemIds.Trim().TrimEnd(',') + @") 
and Units.Name in (" + itemsUnitNames.Trim().TrimEnd(',') + @") 
Order by ItemID,ItemsUnit.UnitID");

                    try
                    {
                        HandleCellValueChanged();

                        decimal TB = 0;
                        decimal rebhea = 0;
                        decimal vatitemsTotal = 0;
                        Total = 0M;

                        for (int index = 0; index < dataGridView1.RowCount - 1; index++)
                        {
                            currentIndex = index;
                            var itemId = dataGridView1.Rows[index].Cells["ItemID"].Value.ToInt32();
                            var unitName = dataGridView1.Rows[index].Cells["mm"].Value.Stringify();
                            var itemName = dataGridView1.Rows[index].Cells["ItemName"].Value.Stringify();
                            var itemColor = dataGridView1.Rows[index].Cells["ItemColor"].Value.ToText();
                            if (!string.IsNullOrEmpty(itemColor))
                                itemName += " " + itemColor;

                            var buyPrice = dataGridView1.Rows[index].Cells["ItemBuyPrice"].Value.ToDecimal();
                            DataRow itemUnit = null;

                            try
                            {
                                itemUnit = dtAllSellPrices
                                                        .Select("ItemID = " + itemId
                                                        + " and UnitName = '" + unitName + "'").First();
                            }
                            catch (Exception ex)
                            {
                            }
                            if (itemUnit != null)
                            {
                                var isItemInDiscountList = itemUnit["IsInDiscountList"].ToBool();

                                var newPrice =
                                    (!ProSetting.UpdateItemsSellPricesOnChangeOfBuyPrice
                                            || itemUnit[profitSellColumn].ToDecimal() == 0
                                            || isItemInDiscountList
                                                ? itemUnit[UpdatedSellPriceColName].ToDecimal().RoundBy(ProSetting.Round)
                                                : (buyPrice *
                                                    ((100 + itemUnit[profitSellColumn].ToDecimal()) / 100)).RoundBy(ProSetting.Round));
                                if (newPrice == 0 && !isItemInDiscountList)
                                {
                                    resultMessage += Tr.M2.m826 + itemName + Tr.M2.m827 + unitName + Tr.M2.m828 + BillKindCom.Text + Tr.M2.m829 + Environment.NewLine;

                                }
                                else if (newPrice < buyPrice)
                                {
                                    if (ProSetting.SaleMinBuy || ProSetting.SaleMinBuy2)
                                    {
                                        if (ProSetting.SaleMinBuy2)
                                        {
                                            newPrice = buyPrice;
                                            resultMessage += (Program.language != "en" ? "تم تحديث سعر البيع لصنف [" + itemName + "] بالوحدة [" + unitName + "] لقيمة سعر الشراء لان سعرالـ" + BillKindCom.Text + " أقل من سعر الشراء "
                                      : "the Sell price of  item [" + itemName + "] with unit [" + unitName + "] was updated to its buy Price because the price that is related to the invoice type is less than the buy Price") + Environment.NewLine;
                                        }
                                        else
                                        {
                                            resultMessage += (Program.language != "en" ? "صنف [" + itemName + "] بالوحدة [" + unitName + "]  سعرالـ" + BillKindCom.Text + " أقل من سعر الشراء "
                                       : "the Sell price of  item [" + itemName + "] with unit [" + unitName + "] was updated to its buy Price because the price that is related to the invoice type is less than the buy Price") + Environment.NewLine;
                                        }
                                    }
                                }
                                if (newPrice > 0)
                                {
                                    dataGridView1.Rows[index].Cells["UnitPrice"].Value = newPrice.NormalizeDecimalPlaces(ProSetting.Round).Stringify();

                                    if (isItemInDiscountList)
                                    {
                                        var itemdiscountRate = itemUnit[discountColumn].ToDecimal();
                                        dataGridView1.Rows[index].Cells["Discount"].Value = itemdiscountRate.NormalizeDecimalPlaces().Stringify();

                                        dataGridView1.Rows[index].Cells["DiscountType"].Value = (byte)DiscountType.Percentage;
                                    }
                                }

                                if (newPrice > 0)
                                    CalculateItemTotalsForGrid(index);
                                decimal taxValue = 0;
                                if (ProSetting.ItemsTax)
                                {
                                    try
                                    {
                                        var itemtotal =
                                            (dataGridView1.Rows[index].Cells["UnitPrice"].Value.ToDecimal()
                                             * dataGridView1.Rows[index].Cells["Quantity"].Value.ToDecimal())
                                             .RoundBy(ProSetting.Round);


                                        var currentitemDiscountType =
                                            (DiscountType)Convert.ToByte(dataGridView1.Rows[index].Cells["DiscountType"]
                                                .Value);

                                        var itemDiscount = currentitemDiscountType == DiscountType.Percentage
                                            ? (itemtotal * dataGridView1.Rows[index].Cells["Discount"].Value.ToDecimal() / 100)
                                                .RoundBy(ProSetting.Round)
                                            : dataGridView1.Rows[index].Cells["DiscountValue"].Value.ToDecimal()
                                                .RoundBy(ProSetting.Round);

                                        var itemTax = dataGridView1.Rows[index].Cells["ItemTax"].Value.ToDecimal();
                                        var additionValue = dataGridView1.Rows[index].Cells["AdditionValue"].Value.ToDecimal();

                                        var netItemSales = (itemtotal - itemDiscount).RoundBy(ProSetting.Round);

                                        netItemSales = netItemSales + additionValue;

                                        taxValue = (ProSetting.DarebaAfterDiscount
                                                ? netItemSales * itemTax / 100
                                                : itemtotal * itemTax / 100).RoundBy(ProSetting.Round);

                                        vatitemsTotal += taxValue;
                                    }
                                    catch
                                    {
                                    }
                                }

                                TB = dataGridView1.Rows[index].Cells["TotalPrice"].Value.ToDecimal().RoundBy(ProSetting.Round);
                                rebhea = dataGridView1.Rows[index].Cells["Rebhea"].Value.ToDecimal().RoundBy(ProSetting.Round);
                                Total += TB;
                                totalrebh += rebhea;
                            }
                            else
                            {

                            }
                        }
                        textBox5.Text = Total.ToString("F" + ProSetting.Round);
                        RebheaText.Text = (totalrebh - textBox3.Text.ToDecimal()).ToString("F" + ProSetting.Round);
                        ItemsVATTotalValue = vatitemsTotal;
                        if (string.IsNullOrEmpty(resultMessage))
                            resultMessage = Tr.M2.m790;
                        new FrmMessageDialog(resultMessage, "", this, DialogResult.OK).Show(this);
                    }
                    finally
                    {
                        ReleaseCellValueChanged();

                    }
                }
                catch (Exception ex)
                {
                    if (MessageBox.Show(resultMessage + Environment.NewLine + Tr.M2.m848 + (currentIndex + 1) + Environment.NewLine + Tr.M1.m0346, Tr.M1.error, MessageBoxButtons.OKCancel, MessageBoxIcon.Error, MessageBoxDefaultButton.Button2) == DialogResult.OK)
                    {
                        new FrmExceptionDetails(ex.Message,
                            "Trace :" + Environment.NewLine + ex.StackTrace + "" + Environment.NewLine + @"-------" + Environment.NewLine +
                            "Source :" + Environment.NewLine + ex.Source).ShowDialog();

                    }
                }
                finally
                {
                    dataGridView1.Enabled = true;
                }
            }
        }
        private void CalculateItemTotalsForGrid(int rowIndex)
        {
            decimal TaxValue = 0M, itemtotal = 0M, itemDiscount = 0M, netSale = 0M;
            itemtotal =
                (dataGridView1.Rows[rowIndex].Cells["UnitPrice"].Value.ToDecimal()
                 * dataGridView1.Rows[rowIndex].Cells["Quantity"].Value.ToDecimal()).RoundBy(ProSetting.Round);
            var itemDiscountType =
                (DiscountType)Convert.ToByte(dataGridView1.Rows[rowIndex].Cells["DiscountType"]
                    .Value);

            var discountPercentage = dataGridView1.Rows[rowIndex].Cells["Discount"].Value.ToDecimal().RoundBy(ProSetting.Round);

            itemDiscount = itemDiscountType == DiscountType.Percentage
                ? ((itemtotal * discountPercentage) / 100).RoundBy(ProSetting.Round)
                : dataGridView1.Rows[rowIndex].Cells["DiscountValue"].Value.ToDecimal().RoundBy(ProSetting.Round);



            netSale = (itemtotal - itemDiscount).RoundBy(ProSetting.Round);
            if (ProSetting.ItemsAdditionValue)
            {
                var additionValue = (dataGridView1.Rows[rowIndex].Cells["AdditionValue"].Value.ToDecimal()
                                    * dataGridView1.Rows[rowIndex].Cells["Quantity"].Value.ToDecimal());

                netSale = netSale + additionValue;
            }
            else if (ProSetting.ItemsTax)
            {
                try
                {
                    var itemTax = dataGridView1.Rows[rowIndex].Cells["ItemTax"].Value == null
                        ? 0
                        : dataGridView1.Rows[rowIndex].Cells["ItemTax"].Value.ToDecimal();
                    TaxValue = ((ProSetting.DarebaAfterDiscount ? netSale : itemtotal) * itemTax / 100).RoundBy(ProSetting.Round);
                }
                catch { }
            }

            try
            {
                //HandleCellValueChanged();

                try
                {
                    var itemTotalPrice = (netSale + TaxValue);
                    dataGridView1.Rows[rowIndex].Cells["TotalPrice"].Value = itemTotalPrice.NormalizeDecimalPlaces(ProSetting.Round).Stringify();


                    dataGridView1.Rows[rowIndex].Cells["TotalBuy"].Value =
                        (dataGridView1.Rows[rowIndex].Cells["Quantity"].Value.ToDecimal()
                        * dataGridView1.Rows[rowIndex].Cells["buyPrice"].Value.ToDecimal())
                        .ToString("F" + ProSetting.Round);

                    dataGridView1.Rows[rowIndex].Cells["Rebhea"].Value =
                       (dataGridView1.Rows[rowIndex].Cells["TotalPrice"].Value.ToDecimal()
                                   - TaxValue
                                   - dataGridView1.Rows[rowIndex].Cells["TotalBuy"].Value.ToDecimal()
                                   ).ToString("F" + ProSetting.Round);

                    var itemFactor = dataGridView1.Rows[rowIndex].Cells["mainIt"].Value.ToDecimal();
                    itemFactor = itemFactor == 0 ? 1 : itemFactor;

                    var itemMainUnitPrice = dataGridView1.Rows[rowIndex].Cells["UnitPrice"].Value.ToDecimal()
                        / itemFactor;

                    dataGridView1.Rows[rowIndex].Cells["MainUnitPrice"].Value = itemMainUnitPrice.NormalizeDecimalPlaces(ProSetting.Round).Stringify();

                }
                catch
                {
                }
                try
                {
                    if (itemDiscountType == DiscountType.Percentage)
                        dataGridView1.Rows[rowIndex].Cells["DiscountValue"].Value = itemDiscount.NormalizeDecimalPlaces(ProSetting.Round).Stringify();

                    else
                    {
                        var calcRate = ((itemDiscount / itemtotal) * 100);

                        dataGridView1.Rows[rowIndex].Cells["Discount"].Value = calcRate.NormalizeDecimalPlaces().Stringify();
                    }
                }
                catch
                {
                }

            }
            catch (Exception ex)
            {
            }
            finally
            {
                //ReleaseCellValueChanged();
            }
        }
        private void panel17_Paint(object sender, PaintEventArgs e)
        {

        }

        private void FrmSalesQuickly_ResizeBegin(object sender, EventArgs e)
        {
            TLPContainer.AutoScroll = false;
        }

        private void FrmSalesQuickly_ResizeEnd(object sender, EventArgs e)
        {
            TLPContainer.AutoScroll = true;
            PnlActions1.CenterHorizontally();
            PnlActions2.CenterHorizontally(PnlActions1);
        }

        private void BtnPayViaTerminal_Click(object sender, EventArgs e)
        {
            if (ProSetting.TerminalSettings == null)
            {
                MessageBox.Show(Tr.M1.m0249, Tr.M1.error, MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }

            PayViaTerminal();
            var result = new FrmMessageDialog(Tr.M2.m535, Tr.M1.sure, this, DialogResult.Yes, DialogResult.No).ShowDialog(this);
            saveBill(result == DialogResult.Yes, true);
        }

        private void pictureBox1_MouseEnter(object sender, EventArgs e)
        {

            try
            {
                if (ProSetting.ShowItemImage
                        && !_hoverBox.Visible)
                {
                    Point mousePosition = System.Windows.Forms.Cursor.Position;
                    var location = pictureBox1.PointToClient(mousePosition);
                    _hoverBox.Location = new Point(location.X, panel1.Bottom);
                    var image = pictureBox1.BackgroundImage ?? pictureBox1.Image;

                    if (image == null)
                        return;
                    _hoverBox.Size = new Size(300, 300);
                    _hoverBox.BackgroundImage = image;
                    _hoverBox.Visible = true;
                    _hoverBox.BringToFront();
                }
            }
            catch (Exception exc)
            {

            }
        }

        private void pictureBox1_MouseLeave(object sender, EventArgs e)
        {
            _hoverBox.BackgroundImage = null;
            _hoverBox.Visible = false;
        }
        private void Chk_StateChanged(object sender, EventArgs e)
        {
            try
            {
                var chk = (CheckBox)sender;
                chk.BackColor = chk.Checked ? Color.FromArgb(192, 64, 0) : Color.FromArgb(55, 55, 55);
            }
            catch (Exception ex)
            {
            }
        }

        private void checkBox4_CheckedChanged(object sender, EventArgs e)
        {
            if (checkBox4.Checked)
            {
                PnlShowPoints.Size = new System.Drawing.Size(PnlClientData.Width, PnlShowPoints.Height);
                lbRestpoint.Text = "0";
                try
                {
                    try
                    {
                        decimal takePoint = Convert.ToDecimal(Codes.Search2("select isnull( sum(Pointstake),0) from ClientPoint where ClientId='" + ClientCombo.SelectedValue + "'  ").Rows[0][0].Stringify());
                        decimal AddPoint = Convert.ToDecimal(Codes.Search2("select isnull( sum(PointsAdd),0) from ClientPoint where ClientId='" + ClientCombo.SelectedValue + "'  ").Rows[0][0].Stringify());

                        decimal saLespoints = 0, ReturnPoints = 0, totalPoints = 0, pointsNo = 0, pointPrice = 0;
                        try
                        {
                            saLespoints = Convert.ToDecimal((Codes.Search2(@"Select isNull(Sum(ItemPoint),0) from
(select( isnull((select  Point from Itemspoint where  ItemID= Sales.ItemID and
 Datefrom <= Sales.Date and  isnull(DateTo,'01-01-1900') >= case when DateTo is null
 or Year(DateTo)='1900' then '01-01-1900' else Sales.Date end),0)
* isnull(Quantity,0)*isnull(ItMain,1)) as ItemPoint
from Sales where ClientID='" + ClientCombo.SelectedValue + "') As Points ")).Rows[0][0].Stringify());
                        }
                        catch { saLespoints = 0; }

                        try
                        {
                            ReturnPoints = Convert.ToDecimal(Codes.Search2(@"Select isNull(Sum(ReturnItemPoint),0) from(select( 
isnull((select  Point from Itemspoint where  ItemID= ReturnSales.ItemID and
 Datefrom <= ReturnSales.BillDate and  isnull(DateTo,'01-01-1900') >= case when DateTo is null
 or Year(DateTo)='1900' then '01-01-1900' else ReturnSales.BillDate end),0)
* isnull(Quantity,0)*isnull(ItemMain,1)) as ReturnItemPoint from ReturnSales 
where ClientID ='" + ClientCombo.SelectedValue + "' )As ReturnPoints").Rows[0][0]);
                        }
                        catch { ReturnPoints = 0; }
                        try
                        {
                            totalPoints = saLespoints - ReturnPoints;

                        }
                        catch { totalPoints = 0; }
                        try
                        {
                            var dtPointCalculations =
                                Codes.Search2("select Isnull(PointNo,0),Isnull(PointPrice,0) from ProSetting");
                            pointsNo = Convert.ToDecimal(dtPointCalculations.Rows[0][0]);
                            pointPrice = Convert.ToDecimal(dtPointCalculations.Rows[0][1]);
                        }
                        catch
                        {
                        }

                        //totalpay = Math.Round((totalPoints + AddPoint - takePoint) * pointPrice / pointsNo, ProSetting.Round);
                        lbRestpoint.Text = Math.Round(totalPoints + AddPoint - takePoint, 2).Stringify();
                        lbPoint.Text = Math.Round(totalPoints + AddPoint, ProSetting.Round).Stringify();
                        lbspentpoint.Text = Math.Round(takePoint, ProSetting.Round).Stringify();
                    }
                    catch (Exception ex)
                    {

                    }

                }
                catch { }
            }
            else
                PnlShowPoints.Size = new System.Drawing.Size(checkBox4.Width, PnlShowPoints.Height);
        }

        private void label36_Click(object sender, EventArgs e)
        {

        }
        private void PayViaTerminal()
        {

            BankCombo.SelectedValue = ProSetting.ConnectedTerminalBank;

            textBox9.TextChanged -= new System.EventHandler(this.textBox9_TextChanged);
            textBox12.TextChanged -= new System.EventHandler(this.textBox9_TextChanged);
            textBox9.Text = "0";
            textBox12.Text = textBox11.Text;
            textBox9.TextChanged += new System.EventHandler(this.textBox9_TextChanged);
            textBox12.TextChanged += new System.EventHandler(this.textBox9_TextChanged);
            PayedKindCom.Text = "نقدى";

            textBox9_TextChanged(textBox12, new EventArgs());
        }

        private bool billDateChecked = false, keepbillDateChecked;

        private void dateTimePicker1_ValueChanged(object sender, EventArgs e)
        {
            if (dateTimePicker1.Checked != billDateChecked)
            {
                billDateChecked = dateTimePicker1.Checked;
                if (billDateChecked)
                {
                    var messageResult =
                        MessageBox.Show(Tr.M1.m0273, Tr.M1.sure, MessageBoxButtons.YesNo, MessageBoxIcon.Question);

                    keepbillDateChecked = messageResult == DialogResult.Yes;
                }
                else
                {
                    dateTimePicker1.ValueChanged -= dateTimePicker1_ValueChanged;
                    dateTimePicker1.Value = DateTime.Today;
                    dateTimePicker1.Checked = false;
                    dateTimePicker1.ValueChanged += dateTimePicker1_ValueChanged;
                    keepbillDateChecked = false;
                }
            }
        }
        private void listBox2_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                try
                {
                    ClientCombo.Focus();
                    ClientCombo.SelectedValue = listBox2.SelectedValue;
                    listBox2.Visible = false;
                    try
                    {
                        LoadClientRassed();
                    }
                    catch { }
                    ClientCombo.SelectAll();

                }
                catch { }
            }
        }

        private void listBox2_MouseClick(object sender, MouseEventArgs e)
        {
            try
            {
                ClientCombo.Focus();
                ClientCombo.SelectedValue = listBox2.SelectedValue;
                listBox2.Visible = false;
                try
                {
                    LoadClientRassed();
                }
                catch
                {
                }
                ClientCombo.SelectAll();
            }
            catch { }
        }

        private void ClientCombo_KeyDown(object sender, KeyEventArgs e)
        {
            try
            {
                //if ((int)e.KeyValue == 37 || (int)e.KeyValue == 38 || (int)e.KeyValue == 39 || (int)e.KeyValue == 40)
                //{
                //    e.Handled = true;
                //}
                //if ((int)e.KeyValue == 40)
                //{
                //    listBox2.Focus();
                //}
            }
            catch { }
        }

        private void ClientCombo_TextChanged(object sender, EventArgs e)
        {
            try
            {
                //if ((ClientCombo.Focused || textBox6.Focused) && !_BayanLoading)
                //{
                //    DataTable dttt = new DataTable();
                //    dttt.Columns.Add("id");
                //    dttt.Columns.Add("name");
                //    for (int i = 0; i < dtClients.Rows.Count; i++)
                //    {
                //        string x = dtClients.Rows[i][1].Stringify();
                //        if (x.Contains(ClientCombo.Text))
                //        {
                //            dttt.Rows.Add(dtClients.Rows[i][0].Stringify(), dtClients.Rows[i][1].Stringify());
                //        }
                //    }
                //    listBox2.DataSource = dttt;
                //    listBox2.DisplayMember = dttt.Columns[1].Stringify();
                //    listBox2.ValueMember = dttt.Columns[0].Stringify();
                //    listBox2.Visible = true;
                //}
            }
            catch { }
        }

        private void dataGridView1_MouseDoubleClick(object sender, MouseEventArgs e)
        {
            try
            {
                if (StoreCombo.SelectedValue.ToInt32() == 0 && ClientCombo.SelectedValue.ToInt32() == 0)
                {
                    MessageBox.Show(Tr.M2.m538);
                    return;
                }
                if (StoreCombo.SelectedValue.ToInt32() == 0)
                {
                    MessageBox.Show(Tr.M2.m536);
                    return;
                }
                if (ClientCombo.SelectedValue.ToInt32() == 0)
                {
                    MessageBox.Show(Tr.M2.m537);
                    return;
                }
                if (dataGridView1.CurrentCell.OwningColumn.Name == "ItemName" && ProSetting.ItemCombo == false)
                {
                    if (dataGridView1.IsCurrentCellInEditMode)
                    {
                        dataGridView1.EditingControl.Hide();
                        return;
                    }
                    FrmMainNEW.Selected = false;
                    FrmMainNEW.ItemName = null;
                    _lastAddItemColumnIndex = 2;
                    FrmItemContainSearch f = new FrmItemContainSearch(
                        StoreCombo.SelectedValue.Stringify(),
                        ClientCombo.SelectedValue.Stringify()
                        , BillKindCom.Text, StoreCombo.Text);
                    f.ShowDialog();

                    if (FrmMainNEW.Selected)
                    {

                        dataGridView1.CurrentRow.Cells["ItemName"].Value = FrmMainNEW.ItemName;
                        dataGridView1.NotifyCurrentCellDirty(false);
                        dataGridView1.EndEdit();
                        dataGridView1.NotifyCurrentCellDirty(true);
                        dataGridView1.NotifyCurrentCellDirty(false);

                        if (itemBarcodeIsNull)
                        {
                            try
                            {
                                try
                                {
                                    if (ProSetting.SkipQuantityAssemblingOfAnItem)
                                    {
                                        var currentitemID = dataGridView1.Rows[dataGridView1.CurrentRow.Index]
                                               .Cells["ItemID"].Value.ToInt32();
                                        var currentitemStoreID = dataGridView1.Rows[dataGridView1.CurrentRow.Index]
                                           .Cells["StoreID"].Value.ToInt32();
                                        var deletedItem = new KeyValuePair<int, int>(currentitemID, currentitemStoreID);

                                        _dcItemComponents.Remove(deletedItem);
                                    }
                                }
                                catch (Exception ex)
                                {
                                }

                                dataGridView1.Rows.Remove(dataGridView1.CurrentRow);

                            }
                            catch
                            {
                            }
                            itemBarcodeIsNull = false;
                        }


                        try
                        {
                            if (ProSetting.OnQuantity)
                            {

                                dataGridView1.CurrentCell = dataGridView1.Rows[dataGridView1.Rows.Count - 2].Cells["Quantity"];
                                dataGridView1.CellEndEdit -= dataGridView1_CellEndEdit;
                                dataGridView1.CellBeginEdit -= dataGridView1_CellBeginEdit;
                                dataGridView1.CellFormatting -= dataGridView1_CellFormatting;
                                dataGridView1.CellValidating -= dataGridView1_CellValidating;
                                try
                                {

                                    dataGridView1.BeginEdit(true);
                                }
                                catch
                                {
                                }

                                dataGridView1.CellEndEdit += dataGridView1_CellEndEdit;
                                dataGridView1.CellBeginEdit += dataGridView1_CellBeginEdit;
                                dataGridView1.CellFormatting += dataGridView1_CellFormatting;
                                dataGridView1.CellValidating += dataGridView1_CellValidating;
                            }
                            else
                            {
                                if (ProSetting.BarcodeOrItem == "كود الصنف")
                                {
                                    dataGridView1.CurrentCell = dataGridView1.Rows[dataGridView1.Rows.Count - 1].Cells["Barcode"];
                                    dataGridView1.CellEndEdit -= dataGridView1_CellEndEdit;
                                    dataGridView1.CellBeginEdit -= dataGridView1_CellBeginEdit;
                                    dataGridView1.CellFormatting -= dataGridView1_CellFormatting;
                                    dataGridView1.CellValidating -= dataGridView1_CellValidating;
                                    try
                                    {

                                        dataGridView1.BeginEdit(true);
                                    }
                                    catch
                                    {
                                    }

                                    dataGridView1.CellEndEdit += dataGridView1_CellEndEdit;
                                    dataGridView1.CellBeginEdit += dataGridView1_CellBeginEdit;
                                    dataGridView1.CellFormatting += dataGridView1_CellFormatting;
                                    dataGridView1.CellValidating += dataGridView1_CellValidating;
                                }
                                else if (ProSetting.BarcodeOrItem == "اسم الصنف")
                                {
                                    dataGridView1.CurrentCell = dataGridView1.Rows[dataGridView1.Rows.Count - 1].Cells[2];
                                }
                                else
                                {
                                    var index = dataGridView1.CurrentRow.Index + 1 >= dataGridView1.RowCount
                                            ? dataGridView1.RowCount - 1
                                            : dataGridView1.CurrentRow.Index + 1;

                                    var colIndex = index == dataGridView1.RowCount - 1
                                        ? _lastAddItemColumnIndex
                                        : dataGridView1.CurrentCell.ColumnIndex;

                                    dataGridView1.CurrentCell = dataGridView1.Rows[index].Cells[colIndex];
                                    dataGridView1.CurrentCell.Selected = true;
                                }
                            }
                        }
                        catch { }
                        //dataGridView1.CurrentCell = dataGridView1.CurrentRow.Cells["Quantity"];
                        //dataGridView1.BeginEdit(true);
                        try
                        {
                            decimal TB = 0;
                            decimal Rebhea = 0;
                            for (int i = 1; i < dataGridView1.Rows.Count; i++)
                            {
                                TB += Math.Round((Convert.ToDecimal(dataGridView1.Rows[i - 1].Cells["TotalPrice"].Value.Stringify())), ProSetting.Round, MidpointRounding.AwayFromZero);
                                Rebhea += Math.Round((Convert.ToDecimal(dataGridView1.Rows[i - 1].Cells["Rebhea"].Value.Stringify())), ProSetting.Round, MidpointRounding.AwayFromZero);

                                Total = TB;
                                totalrebh = Rebhea;
                                amu = false;
                            }
                            textBox5.Text = Math.Round(Total,
                                ProSetting.Round,
                               MidpointRounding.AwayFromZero)
                               .ToString("F" + ProSetting.Round);

                            RebheaText.Text = Math.Round(totalrebh - Convert.ToDecimal(textBox3.Text), ProSetting.Round, MidpointRounding.AwayFromZero).ToString("F" + ProSetting.Round);
                            Total = 0;
                            totalrebh = 0;
                        }
                        catch { }
                        try
                        {
                            decimal weight = 0;
                            for (int i = 0; i < dataGridView1.Rows.Count - 1; i++)
                            {
                                decimal Qnt = Math.Round((Convert.ToDecimal(dataGridView1.Rows[i].Cells[5].Value.Stringify())), ProSetting.Round, MidpointRounding.AwayFromZero);
                                decimal UnitWeight = Math.Round((Convert.ToDecimal(Codes.Search2("select isnull(Weight,0) from Units where Name='" + dataGridView1.Rows[i].Cells[4].Value.Stringify() + "'").Rows[0][0].Stringify())), ProSetting.Round, MidpointRounding.AwayFromZero);
                                weight += Qnt * UnitWeight;
                            }
                            textBox2.Text = Math.Round(weight, ProSetting.Round, MidpointRounding.AwayFromZero).ToString("F" + ProSetting.Round);
                        }
                        catch { }
                    }
                }
            }
            catch (Exception ex) { }
        }

        private void dataGridView1_CellValidating(object sender, DataGridViewCellValidatingEventArgs e)
        {

            if (e.RowIndex == -1)
            {
                return;
            }


            if (dataGridView1.Rows[e.RowIndex].IsNewRow)
                return;
            try
            {
                if (e.RowIndex != -1 && e.ColumnIndex != 1 && e.ColumnIndex != 2 && e.ColumnIndex != 0)
                {
                    if (e.FormattedValue != null && dataGridView1.IsCurrentCellInEditMode)
                    {
                        var value = 0M;
                        if (decimal.TryParse(e.FormattedValue.Stringify(), out value))
                        {
                            if (value < 0)
                            {
                                MessageBox.Show(Tr.M1.m0264);
                                e.Cancel = true;
                                return;
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
            }

            try
            {
                var ItemID = dataGridView1.CurrentRow.Cells["ItemID"].Value == null ||
                             string.IsNullOrEmpty(dataGridView1.CurrentRow.Cells["ItemID"].Value.Stringify())
                    ? ""
                    : dataGridView1.CurrentRow.Cells["ItemID"].Value.Stringify();

                if (ItemID != "")
                {
                    var value = dataGridView1.CurrentRow.Cells["UnitPrice"].Value == null
                                || string.IsNullOrEmpty(dataGridView1.CurrentRow.Cells["UnitPrice"].Value
                                    .Stringify())
                        ? ""
                        : dataGridView1.CurrentRow.Cells["UnitPrice"].Value.Stringify();
                    decimal unitPrice = 0;
                    if (!decimal.TryParse(value, out unitPrice))
                    {
                        MessageBox.Show(Tr.M1.m0265);
                        e.Cancel = true;
                        return;
                    }
                }

            }
            catch (Exception ex)
            {
                MessageBox.Show(Tr.M1.m0265);
                e.Cancel = true;
                return;
            }

            //try
            //{
            //    if (dataGridView1.Rows[e.RowIndex].Cells["UnitPrice"].Value == null
            //        || dataGridView1.Rows[e.RowIndex].Cells["UnitPrice"].Value == "")
            //    {

            //        try
            //        {
            //            HandleCellValueChanged();

            //            dataGridView1.Rows[e.RowIndex].Cells["UnitPrice"].Value = 0;
            //        }
            //        catch
            //        {
            //        }
            //        finally
            //        {
            //            ReleaseCellValueChanged();

            //        }
            //    }

            //}
            //catch (Exception ex)
            //{
            //}
        }

        private void FrmSalesQuickly_FormClosing(object sender, System.Windows.Forms.FormClosingEventArgs e)
        {
            try
            {

                if (FrmMainNEW.Exit || ProSetting.HideAlertMessageWhenClosingBills)
                {
                    if (ProSetting.SalesAutoSaveEnabled)
                    {
                        try
                        {
                            AutoSaveTimer.Dispose();
                        }
                        catch
                        {
                        }

                        try
                        {
                            var found = _autoSaveManager.OpenningSalesScreens.FirstOrDefault(oss =>
                                oss.Key.ClientId == CurrentAutoSaveModel.ClientId
                                && oss.Key.TempId == CurrentAutoSaveModel.TempId);
                            _autoSaveManager.OpenningSalesScreens.Remove(found.Key);

                            _autoSaveManager.TempBillsList.Remove(CurrentAutoSaveModel);
                            _autoSaveManager.UpdateUnsavedBills(CurrentAutoSaveModel);

                        }
                        catch (Exception ex)
                        {
                        }
                    }

                    return;
                }

                var dr = MessageBox.Show(Tr.M1.m0263, Tr.M1.sure, MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2);
                if (dr == DialogResult.No)
                {
                    isFormClosed = false;
                    e.Cancel = true;
                }
                else
                {
                    if (ProSetting.SalesAutoSaveEnabled)
                    {
                        try
                        {
                            AutoSaveTimer.Dispose();
                        }
                        catch
                        {
                        }

                        try
                        {
                            var found = _autoSaveManager.OpenningSalesScreens.FirstOrDefault(oss =>
                                oss.Key.ClientId == CurrentAutoSaveModel.ClientId
                                && oss.Key.TempId == CurrentAutoSaveModel.TempId);
                            _autoSaveManager.OpenningSalesScreens.Remove(found.Key);

                            _autoSaveManager.TempBillsList.Remove(CurrentAutoSaveModel);
                            _autoSaveManager.UpdateUnsavedBills(CurrentAutoSaveModel);

                        }
                        catch (Exception ex)
                        {
                        }
                    }

                    isFormClosed = true;
                }
            }
            catch
            {
            }
        }


        private void dataGridView1_CellFormatting(object sender, DataGridViewCellFormattingEventArgs e)
        {
            try
            {
                if (e.RowIndex == dataGridView1.Rows.Count - 1 || e.RowIndex < 0)
                    return;

                if (e.ColumnIndex == dataGridView1.Columns["UnitPrice"].Index
                    && dataGridView1.Rows.Count > 1
                    && e.RowIndex < dataGridView1.Rows.Count
                    && ProSetting.BuyPriceHint
                    && AllowToShowBuyPriceInSales)
                {
                    var cell = dataGridView1.Rows[e.RowIndex].Cells[e.ColumnIndex];
                    cell.ToolTipText =
                        (Tr.M2.m047shortcut + " " + Environment.NewLine) +
                        Math.Round(
                                (Convert.ToDecimal(dataGridView1.Rows[e.RowIndex].Cells["buyprice"].Value.Stringify())),
                                ProSetting.Round, MidpointRounding.AwayFromZero)
                            .ToString("F" + ProSetting.Round);
                }
                else if (e.ColumnIndex == dataGridView1.Columns["qntStore"].Index
                         && dataGridView1.Rows.Count > 1
                         && e.RowIndex < dataGridView1.Rows.Count
                         && !ProSetting.RaseedDisappear)
                {
                    try
                    {
                        var collectedItem = _dcItemComponents.FirstOrDefault(itm => itm.Key.Key ==
                              dataGridView1.Rows[e.RowIndex].Cells["ItemID"].Value.ToInt32()
                              && itm.Key.Value == dataGridView1.Rows[e.RowIndex].Cells["StoreID"].Value.ToInt32());

                        var itemcomponents = collectedItem.Value ?? new DataTable();

                        var isitAssembled =
                            itemcomponents.Rows.Count > 0 &&
                            ProSetting.SkipQuantityAssemblingOfAnItem;

                        var storeQnt = dataGridView1.Rows[e.RowIndex].Cells["qntStore"].Value.ToDecimal();
                        var Mota7 = 0M;

                        if (isitAssembled)
                        {
                            try
                            {

                                var itemStoreQntDatatable =  Codes.Search2(
                        @"WITH ItemComponentsCTE AS (
SELECT  Row_Number() Over (Order by ItemsUnit.ItemId,ItemsUnit.ID) as Rn ,
ItemsUnit.ItemID,
ItemsUnit.Barcode,
(Select Name From Items Where ID =ItemsUnit.ItemID) as ItemName,
(Select Name From Units Where ID =ItemsUnit.UnitId) as UnitName,
Isnull((Select Price From Store Where ItemID =ParentITemID and StoreId =  '" + dataGridView1.Rows[e.RowIndex].Cells["StoreID"].Value +
                        @"'),0) as BuyPrice,
 ItemsUnit.ItMain as ComponentItMain,
(
(Case When ItemsUnit.ItMain = 1 
Then Isnull(dbo.Store.Price,0) Else ItemsUnit.BuyPrice END )
" + (!ProSetting.salesByList ? "" : @"
* (1 - ((Select case when Isnull(IsInDiscountList,0) = 0 then 0 
else isnull(discountincoming,0) end from Items Where ID = ItemsUnit.ItemID)/100))
") + @"
)
as ComponentBuyPrice,
Cast((Isnull(dbo.Store.Quantity,0)/ItemsUnit.ItMain) as money) as OriginalComponentStoreQuantity ,
Cast(Qnt as money) as ComponentAssemblingQuantity,
FLOOR(ISNULL(Quantity,0)/(Qnt * ItMain)) as ItemLargestAssembledQuantity,
Isnull((Select Quantity From Store Where ItemID = ParentItemID and StoreId = '" + dataGridView1.Rows[e.RowIndex].Cells["StoreID"].Value +
                        @"'),0) as ItemStoreQuantity,
Case When Sum(Qnt * ItMain) over (partition by ItemsUnit.ItemID) > Quantity then 0 else 1 end as QuantityAvailableStatus,
Isnull(ModifyBuyprice,1) as ModifyBuyprice ,
Isnull(masnyea,0) as masnyea,
(Select Count(*) From Store Where ItemID =ParentITemID and StoreId = '" + dataGridView1.Rows[e.RowIndex].Cells["StoreID"].Value + @"') as AddedToStore,
(Select Khadamy From Items Where ID =ItemsUnit.ItemID) as Khadamy
FROM dbo.ItemsColleting 
LEFT JOIN ItemsUnit 
ON ItemsColleting.ChildItemUnitID = ItemsUnit.Id 
LEFT Join dbo.Store 
ON dbo.ItemsUnit.ItemID = dbo.Store.ItemID  and Store.StoreID = '" + dataGridView1.Rows[e.RowIndex].Cells["StoreID"].Value + @"'
where ParentITemID = '" + dataGridView1.Rows[e.RowIndex].Cells["ItemID"].Value + @"'
),
ValidItemComponentsCTE AS (
    SELECT
        Rn,
        ItemID,
		Barcode,
		ItemName,
		UnitName,
        BuyPrice,
        ComponentBuyPrice,	
        (OriginalComponentStoreQuantity* ComponentItMain -
            (SELECT SUM(ComponentAssemblingQuantity)
             FROM ItemComponentsCTE AS innerCTE
             WHERE innerCTE.ItemID = outerCTE.ItemID
               AND innerCTE.Rn <= outerCTE.Rn) 
            + ComponentAssemblingQuantity)/ ComponentItMain AS ComponentStoreQuantity,
        ComponentAssemblingQuantity,
        ItemLargestAssembledQuantity,
		ItemStoreQuantity,
        ModifyBuyprice,
        masnyea,
		AddedToStore,
        Khadamy
    FROM ItemComponentsCTE AS outerCTE
)
SELECT
    ItemID,
	Barcode,
	ItemName,
	UnitName,
	BuyPrice,
	ComponentBuyPrice,
	ComponentStoreQuantity,
	ComponentAssemblingQuantity,
	CASE 
        WHEN ComponentStoreQuantity < ComponentAssemblingQuantity THEN 0
        ELSE ItemLargestAssembledQuantity end
    ItemLargestAssembledQuantity,
	ItemStoreQuantity,
    CASE 
        WHEN ComponentStoreQuantity < ComponentAssemblingQuantity THEN 0
        ELSE 1
    END AS QuantityAvailableStatus,
    ModifyBuyprice,
	masnyea,
	AddedToStore,
	Khadamy
FROM ValidItemComponentsCTE
ORDER BY Rn;");


                                var itemStoreQuantity =
                                    Convert.ToDecimal(itemStoreQntDatatable.Rows[0]["ItemStoreQuantity"]);
                                var largestAvailableQnt = 0M;
                                try
                                {
                                    largestAvailableQnt = itemStoreQntDatatable.Rows.OfType<DataRow>()
                                        .Where(dr => !Convert.ToBoolean(dr["Khadamy"]))
                                        .Min(dr => Convert.ToDecimal(dr["ItemLargestAssembledQuantity"]));
                                }
                                catch
                                {
                                }

                                var availableQuantity =
                                    largestAvailableQnt + (itemStoreQuantity < 0 ? 0 : itemStoreQuantity);

                                Mota7 = availableQuantity / Convert.ToDecimal(dataGridView1.Rows[e.RowIndex].Cells["mainIt"].Value);
                            }
                            catch (Exception exception)
                            {
                            }
                        }
                        else
                        {
                            Mota7 = (storeQnt).NormalizeDecimalPlaces();
                        }

                        var tip = "";

                        if (ProSetting.UniderDelevItem)
                        {
                            var underDeliveryQntText = dataGridView1.Rows[e.RowIndex].Cells["UnderDeliveryQnt"].Value.Stringify();
                            var underDeliveryStoreQnt = 0M;
                            var underDeliveryAllStoresQnt = 0M;
                            if (underDeliveryQntText != null && underDeliveryQntText.Contains('/'))
                            {


                                var underDeliveryQnt = underDeliveryQntText.Split('/');

                                if (underDeliveryQnt.Length == 2)
                                {
                                    underDeliveryStoreQnt = underDeliveryQnt[0].ToDecimal() /
                                                               dataGridView1.Rows[e.RowIndex].Cells["MainIt"].Value.ToDecimal();

                                    underDeliveryAllStoresQnt = underDeliveryQnt[1].ToDecimal()
                                        / dataGridView1.Rows[e.RowIndex].Cells["MainIt"].Value.ToDecimal();

                                    Mota7 = ((storeQnt - underDeliveryStoreQnt)
                                    / dataGridView1.Rows[e.RowIndex].Cells["mainIt"].Value.ToDecimal()).NormalizeDecimalPlaces();
                                }
                            }

                            Mota7 = Mota7 < 0 ? 0 : Mota7;
                            tip = (Tr.M2.m741 + " = ") + Mota7;
                            tip += ("\n" + Tr.M2.m69 + " = ")
                                   + underDeliveryStoreQnt.NormalizeDecimalPlaces().Stringify()
                                   + ("\n" + Tr.M2.m849 + " = ")
                                   + underDeliveryAllStoresQnt.NormalizeDecimalPlaces().Stringify();
                        }




                        var cell = dataGridView1.Rows[e.RowIndex].Cells[e.ColumnIndex];
                        cell.ToolTipText = tip;
                    }
                    catch
                    {
                    }
                }
            }
            catch
            {
            }
        }

        private void RBDiscountPercentage_CheckedChanged(object sender, EventArgs e)
        {
            textBox4.Enabled = RBDiscountPercentage.Checked && Convert.ToBoolean(FrmMainNEW.CurrentUser["AllowInvoiceDiscount"].Stringify());
        }

        private void RBDiscountValue_CheckedChanged(object sender, EventArgs e)
        {
            textBox3.Enabled = RBDiscountValue.Checked
                               && Convert.ToBoolean(FrmMainNEW.CurrentUser["AllowInvoiceDiscount"].Stringify());
        }
        private void TxtProfitGuiding_VisibleChanged(object sender, EventArgs e)
        {
            RebheaText.Visible = RebheaLbl2.Visible = !TxtProfitGuiding.Visible;
            TxtProfitGuiding.BringToFront();
        }
        private void TxtProfitGuiding_MouseHover(object sender, System.EventArgs e)
        {
            try
            {
                toolTip1.RemoveAll();
                toolTip1.SetToolTip(TxtProfitGuiding, RebheaText.Text);
            }
            catch
            {
            }
        }
        string SetItemsInsertQueryStart(string queryitems)
        {
            if (!queryitems.ToLower().Contains("declare"))
                return @"
Declare @StoreQuanity decimal(18,5),
@AddedUnderDelivery bit,
@AddedUnderDeliveryItems nvarchar(Max),
@Iter INT ,
@IterCount INT ,
@StoreID INT,
@ItemBuyPrice decimal(18,5),
@ItemBuyPriceInStore decimal(18,5),
@SellingItemTotalBuyPrice decimal(18,5),
@ItemStoreQnt decimal(18,5),
@ItemComponentStoreQntCount INT,
@notAvailbleItems nvarchar(MAX),
@ComponentItemID INT,
@ComponentItemQnt decimal(18,5),
@ComponentBuyPrice decimal(18,5),
@ComponenentoutcomePrice decimal(18,5),
@ComponentAssemblingQuantity decimal(18,5),
@ComponentItMain decimal(18,5),
@ComponentItemStoreQnt decimal(18,5),
@ComponentItemsCount INT,
@AssembledQnt decimal(18,5),
@SelledQnt decimal(18,5),
@masnyea decimal(18,5),
@KhadamyItem bit;
Set @AddedUnderDeliveryItems = '';";
            else
                return "";
        }
        private void HandleCellValueChanged()
        {
            ++_cellValueChanged;
            if ((_cellValueChangedHandled && !_cellValueChangedReleased) || _cellValueChanged > 1)
                return;
            _cellValueChangedHandled = true;
            _cellValueChangedReleased = false;
            dataGridView1.CellValueChanged -= dataGridView1_CellValueChanged;
        }

        private void ReleaseCellValueChanged()
        {
            if ((!_cellValueChangedReleased && !_cellValueChangedHandled) || _cellValueChanged > 1)
            {
                --_cellValueChanged;
                return;
            }
            _cellValueChanged = 0;
            _cellValueChangedHandled = false;
            _cellValueChangedReleased = true;
            dataGridView1.CellValueChanged += dataGridView1_CellValueChanged;
        }
    }
    public enum DiscountType
    {
        Percentage = 1,
        Value = 2
    }
}